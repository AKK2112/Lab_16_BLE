
d:/Labs/Lab_16_BLE/target/3.0.0/argon/Lab_16_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005084  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d90a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e510  000d90a4  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000278  2003e578  2003e578  0002e578  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d910c  000d910c  0002910c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9134  000d9134  00029134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d4734  00000000  00000000  00029138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a4cf  00000000  00000000  001fd86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003e3ef  00000000  00000000  00217d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003180  00000000  00000000  0025612a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009ab8  00000000  00000000  002592aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e658  00000000  00000000  00262d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000479df  00000000  00000000  002a13ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00128aad  00000000  00000000  002e8d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000907c  00000000  00000000  00411848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ffa9 	bl	d7f84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ffcb 	bl	d7fd4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e510 	.word	0x2003e510
   d4048:	000d90a4 	.word	0x000d90a4
   d404c:	2003e578 	.word	0x2003e578
   d4050:	2003e578 	.word	0x2003e578
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 faad 	bl	d75bc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d907c 	.word	0x000d907c
   d407c:	000d90a0 	.word	0x000d90a0

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b862 	b.w	d4148 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8b7 	bl	d41f8 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 ba57 	b.w	d7540 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bdf3 	b.w	d5c7c <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bdf1 	b.w	d5c7c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bdf7 	b.w	d5c8c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fd44 	bl	d5b34 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d572d 	.word	0x000d572d

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);

void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d40c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (size_t i = 0; i < len; i++)
  {
    if (data[0] == '1')
    {
      display.clearDisplay();
   d40c8:	4f1d      	ldr	r7, [pc, #116]	; (d4140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.println("Never gonna give you up, Never gonna let you down...");
   d40ca:	f8df 8078 	ldr.w	r8, [pc, #120]	; d4144 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>
{
   d40ce:	4604      	mov	r4, r0
   d40d0:	4605      	mov	r5, r0
   d40d2:	1846      	adds	r6, r0, r1
  for (size_t i = 0; i < len; i++)
   d40d4:	42b5      	cmp	r5, r6
   d40d6:	d030      	beq.n	d413a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
    if (data[0] == '1')
   d40d8:	7823      	ldrb	r3, [r4, #0]
   d40da:	2b31      	cmp	r3, #49	; 0x31
   d40dc:	d112      	bne.n	d4104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>
      display.clearDisplay();
   d40de:	4818      	ldr	r0, [pc, #96]	; (d4140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d40e0:	f000 ffe6 	bl	d50b0 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d40e4:	4816      	ldr	r0, [pc, #88]	; (d4140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d40e6:	2101      	movs	r1, #1
   d40e8:	f000 fd87 	bl	d4bfa <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40ec:	2200      	movs	r2, #0
   d40ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
      display.println("Never gonna give you up, Never gonna let you down...");
   d40f2:	4813      	ldr	r0, [pc, #76]	; (d4140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d40f4:	4641      	mov	r1, r8
   d40f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
   d40fa:	f003 f946 	bl	d738a <_ZN5Print7printlnEPKc>
      display.display();
   d40fe:	4810      	ldr	r0, [pc, #64]	; (d4140 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   d4100:	f001 fa42 	bl	d5588 <_ZN16Adafruit_SSD13067displayEv>
    }
    if (data[0] == '0')
   d4104:	7823      	ldrb	r3, [r4, #0]
   d4106:	2b30      	cmp	r3, #48	; 0x30
   d4108:	d10f      	bne.n	d412a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x66>
    {
      RGB.control(true);
   d410a:	2001      	movs	r0, #1
   d410c:	f003 f9b7 	bl	d747e <_ZN8RGBClass7controlEb>
      RGB.color(255, 255, 0);
   d4110:	21ff      	movs	r1, #255	; 0xff
   d4112:	2200      	movs	r2, #0
   d4114:	4608      	mov	r0, r1
   d4116:	f003 f9c2 	bl	d749e <_ZN8RGBClass5colorEiii>
      RGB.brightness(255);
   d411a:	2101      	movs	r1, #1
   d411c:	20ff      	movs	r0, #255	; 0xff
   d411e:	f003 f9d1 	bl	d74c4 <_ZN8RGBClass10brightnessEhb>
      BLE.disconnect();
   d4122:	f002 fb71 	bl	d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4126:	f002 fcff 	bl	d6b28 <_ZNK8particle14BleLocalDevice10disconnectEv>
    }
    Serial.write(data[i]);
   d412a:	f003 fb49 	bl	d77c0 <_Z16_fetch_usbserialv>
   d412e:	6803      	ldr	r3, [r0, #0]
   d4130:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4134:	689b      	ldr	r3, [r3, #8]
   d4136:	4798      	blx	r3
  for (size_t i = 0; i < len; i++)
   d4138:	e7cc      	b.n	d40d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>
    
  }
}
   d413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d413e:	bf00      	nop
   d4140:	2003e5b8 	.word	0x2003e5b8
   d4144:	000d80a4 	.word	0x000d80a4

000d4148 <setup>:

void setup()
{
   d4148:	b510      	push	{r4, lr}
  display.setup();
   d414a:	4827      	ldr	r0, [pc, #156]	; (d41e8 <setup+0xa0>)
{
   d414c:	b096      	sub	sp, #88	; 0x58
  display.setup();
   d414e:	f000 fda3 	bl	d4c98 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4152:	4825      	ldr	r0, [pc, #148]	; (d41e8 <setup+0xa0>)
   d4154:	f000 ffac 	bl	d50b0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4158:	4823      	ldr	r0, [pc, #140]	; (d41e8 <setup+0xa0>)
   d415a:	f001 fa15 	bl	d5588 <_ZN16Adafruit_SSD13067displayEv>
  BLE.on();
   d415e:	f002 fb53 	bl	d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4162:	f002 fb9f 	bl	d68a4 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d4166:	f002 fb4f 	bl	d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d416a:	4a20      	ldr	r2, [pc, #128]	; (d41ec <setup+0xa4>)
   d416c:	4601      	mov	r1, r0
   d416e:	a80d      	add	r0, sp, #52	; 0x34
   d4170:	f002 ffb4 	bl	d70dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4174:	a80d      	add	r0, sp, #52	; 0x34
   d4176:	f002 fc1c 	bl	d69b2 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d417a:	f002 fb45 	bl	d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d417e:	4a1c      	ldr	r2, [pc, #112]	; (d41f0 <setup+0xa8>)
   d4180:	4601      	mov	r1, r0
   d4182:	a80d      	add	r0, sp, #52	; 0x34
   d4184:	f002 ffaa 	bl	d70dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4188:	a80d      	add	r0, sp, #52	; 0x34
   d418a:	f002 fc12 	bl	d69b2 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d418e:	a80d      	add	r0, sp, #52	; 0x34
   d4190:	f002 f9cb 	bl	d652a <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4194:	4917      	ldr	r1, [pc, #92]	; (d41f4 <setup+0xac>)
   d4196:	a803      	add	r0, sp, #12
   d4198:	f002 f8ca 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d419c:	a903      	add	r1, sp, #12
   d419e:	a808      	add	r0, sp, #32
   d41a0:	f002 f8c6 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41a4:	a808      	add	r0, sp, #32
   d41a6:	f002 f909 	bl	d63bc <_ZNK8particle7BleUuid4typeEv>
   d41aa:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d41ac:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41ae:	b99c      	cbnz	r4, d41d8 <setup+0x90>
            uint16_t uuid16 = tempUUID.shorted();
   d41b0:	f002 f923 	bl	d63fa <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41b4:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d41b6:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41ba:	2302      	movs	r3, #2
   d41bc:	f10d 020a 	add.w	r2, sp, #10
   d41c0:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d41c2:	a80d      	add	r0, sp, #52	; 0x34
   d41c4:	f002 f9a6 	bl	d6514 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d41c8:	f002 fb1e 	bl	d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41cc:	2200      	movs	r2, #0
   d41ce:	a90d      	add	r1, sp, #52	; 0x34
   d41d0:	f002 fb88 	bl	d68e4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d41d4:	b016      	add	sp, #88	; 0x58
   d41d6:	bd10      	pop	{r4, pc}
   d41d8:	f002 f914 	bl	d6404 <_ZNK8particle7BleUuid8rawBytesEv>
   d41dc:	2300      	movs	r3, #0
   d41de:	9300      	str	r3, [sp, #0]
   d41e0:	4602      	mov	r2, r0
   d41e2:	2310      	movs	r3, #16
   d41e4:	2107      	movs	r1, #7
   d41e6:	e7ec      	b.n	d41c2 <setup+0x7a>
   d41e8:	2003e5b8 	.word	0x2003e5b8
   d41ec:	2003e630 	.word	0x2003e630
   d41f0:	2003e628 	.word	0x2003e628
   d41f4:	2003e57c 	.word	0x2003e57c

000d41f8 <loop>:

void loop()
{
   d41f8:	b510      	push	{r4, lr}
  display.loop();
   d41fa:	481f      	ldr	r0, [pc, #124]	; (d4278 <loop+0x80>)
{
   d41fc:	b08a      	sub	sp, #40	; 0x28
  display.loop();
   d41fe:	f000 fd74 	bl	d4cea <_ZN16OledWingAdafruit4loopEv>
  if (BLE.connected())
   d4202:	f002 fb01 	bl	d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4206:	f002 fb80 	bl	d690a <_ZNK8particle14BleLocalDevice9connectedEv>
   d420a:	4604      	mov	r4, r0
   d420c:	b330      	cbz	r0, d425c <loop+0x64>
  {
    uint8_t txBuf[UART_TX_BUF_SIZE];
    String message = "Hello!\n";
   d420e:	491b      	ldr	r1, [pc, #108]	; (d427c <loop+0x84>)
   d4210:	a801      	add	r0, sp, #4
   d4212:	f001 fec8 	bl	d5fa6 <_ZN6StringC1EPKc>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4216:	9a03      	ldr	r2, [sp, #12]
   d4218:	2300      	movs	r3, #0
   d421a:	3201      	adds	r2, #1
   d421c:	a905      	add	r1, sp, #20
   d421e:	a801      	add	r0, sp, #4
   d4220:	f001 fee7 	bl	d5ff2 <_ZNK6String8getBytesEPhjj>
    message.toCharArray((char *)txBuf, message.length() + 1);
    txCharacteristic.setValue(txBuf, message.length() + 1);
   d4224:	9a03      	ldr	r2, [sp, #12]
   d4226:	4816      	ldr	r0, [pc, #88]	; (d4280 <loop+0x88>)
   d4228:	2300      	movs	r3, #0
   d422a:	3201      	adds	r2, #1
   d422c:	a905      	add	r1, sp, #20
   d422e:	f002 f9e3 	bl	d65f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    RGB.control(true);
   d4232:	2001      	movs	r0, #1
   d4234:	f003 f923 	bl	d747e <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 255);
   d4238:	2100      	movs	r1, #0
   d423a:	4608      	mov	r0, r1
   d423c:	22ff      	movs	r2, #255	; 0xff
   d423e:	f003 f92e 	bl	d749e <_ZN8RGBClass5colorEiii>
    RGB.brightness(255);
   d4242:	20ff      	movs	r0, #255	; 0xff
   d4244:	2101      	movs	r1, #1
   d4246:	f003 f93d 	bl	d74c4 <_ZN8RGBClass10brightnessEhb>
    String message = "Hello!\n";
   d424a:	a801      	add	r0, sp, #4
   d424c:	f001 fe60 	bl	d5f10 <_ZN6StringD1Ev>
  {
    RGB.control(true);
    RGB.color(255, 255, 0);
    RGB.brightness(255);
  }
  delay(1000);
   d4250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4254:	f003 f90a 	bl	d746c <delay>
  
}
   d4258:	b00a      	add	sp, #40	; 0x28
   d425a:	bd10      	pop	{r4, pc}
    RGB.control(true);
   d425c:	2001      	movs	r0, #1
   d425e:	f003 f90e 	bl	d747e <_ZN8RGBClass7controlEb>
    RGB.color(255, 255, 0);
   d4262:	21ff      	movs	r1, #255	; 0xff
   d4264:	4608      	mov	r0, r1
   d4266:	4622      	mov	r2, r4
   d4268:	f003 f919 	bl	d749e <_ZN8RGBClass5colorEiii>
    RGB.brightness(255);
   d426c:	2101      	movs	r1, #1
   d426e:	20ff      	movs	r0, #255	; 0xff
   d4270:	f003 f928 	bl	d74c4 <_ZN8RGBClass10brightnessEhb>
   d4274:	e7ec      	b.n	d4250 <loop+0x58>
   d4276:	bf00      	nop
   d4278:	2003e5b8 	.word	0x2003e5b8
   d427c:	000d80d9 	.word	0x000d80d9
   d4280:	2003e630 	.word	0x2003e630

000d4284 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4284:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4286:	4616      	mov	r6, r2
   d4288:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d428a:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d428c:	e9c0 2200 	strd	r2, r2, [r0]
   d4290:	4604      	mov	r4, r0
   d4292:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4294:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4296:	4619      	mov	r1, r3
   d4298:	a806      	add	r0, sp, #24
   d429a:	f002 f849 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d429e:	9916      	ldr	r1, [sp, #88]	; 0x58
   d42a0:	4638      	mov	r0, r7
   d42a2:	f002 f845 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d42a6:	7833      	ldrb	r3, [r6, #0]
   d42a8:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d42ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d42ae:	9302      	str	r3, [sp, #8]
   d42b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d42b2:	4620      	mov	r0, r4
   d42b4:	e9cd 7300 	strd	r7, r3, [sp]
   d42b8:	aa05      	add	r2, sp, #20
   d42ba:	ab06      	add	r3, sp, #24
   d42bc:	4629      	mov	r1, r5
   d42be:	f002 fdeb 	bl	d6e98 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d42c2:	4620      	mov	r0, r4
   d42c4:	b011      	add	sp, #68	; 0x44
   d42c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d42c8 <_GLOBAL__sub_I_display>:
}
   d42c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
OledWingAdafruit display;
   d42cc:	4d2e      	ldr	r5, [pc, #184]	; (d4388 <_GLOBAL__sub_I_display+0xc0>)
   d42ce:	4c2f      	ldr	r4, [pc, #188]	; (d438c <_GLOBAL__sub_I_display+0xc4>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d42d0:	4e2f      	ldr	r6, [pc, #188]	; (d4390 <_GLOBAL__sub_I_display+0xc8>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d42d2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; d43bc <_GLOBAL__sub_I_display+0xf4>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d42d6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; d43c0 <_GLOBAL__sub_I_display+0xf8>
   d42da:	4f2e      	ldr	r7, [pc, #184]	; (d4394 <_GLOBAL__sub_I_display+0xcc>)
}
   d42dc:	b091      	sub	sp, #68	; 0x44
SYSTEM_THREAD(ENABLED);
   d42de:	2100      	movs	r1, #0
   d42e0:	2001      	movs	r0, #1
   d42e2:	f001 fc47 	bl	d5b74 <system_thread_set_state>
OledWingAdafruit display;
   d42e6:	2107      	movs	r1, #7
   d42e8:	4628      	mov	r0, r5
   d42ea:	f000 fca7 	bl	d4c3c <_ZN16OledWingAdafruitC1Ei>
   d42ee:	4622      	mov	r2, r4
   d42f0:	4929      	ldr	r1, [pc, #164]	; (d4398 <_GLOBAL__sub_I_display+0xd0>)
   d42f2:	4628      	mov	r0, r5
   d42f4:	f003 fd0c 	bl	d7d10 <__aeabi_atexit>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d42f8:	4d28      	ldr	r5, [pc, #160]	; (d439c <_GLOBAL__sub_I_display+0xd4>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d42fa:	4929      	ldr	r1, [pc, #164]	; (d43a0 <_GLOBAL__sub_I_display+0xd8>)
   d42fc:	4630      	mov	r0, r6
   d42fe:	f002 f8fd 	bl	d64fc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4302:	4928      	ldr	r1, [pc, #160]	; (d43a4 <_GLOBAL__sub_I_display+0xdc>)
   d4304:	4640      	mov	r0, r8
   d4306:	f002 f8f9 	bl	d64fc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d430a:	4927      	ldr	r1, [pc, #156]	; (d43a8 <_GLOBAL__sub_I_display+0xe0>)
   d430c:	4628      	mov	r0, r5
   d430e:	f002 f8f5 	bl	d64fc <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d4312:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4314:	4629      	mov	r1, r5
   d4316:	a806      	add	r0, sp, #24
   d4318:	f88d 3014 	strb.w	r3, [sp, #20]
   d431c:	f002 f808 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
   d4320:	4631      	mov	r1, r6
   d4322:	a80b      	add	r0, sp, #44	; 0x2c
   d4324:	f002 f804 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
   d4328:	2500      	movs	r5, #0
   d432a:	ab0b      	add	r3, sp, #44	; 0x2c
   d432c:	9300      	str	r3, [sp, #0]
   d432e:	aa05      	add	r2, sp, #20
   d4330:	ab06      	add	r3, sp, #24
   d4332:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4336:	491d      	ldr	r1, [pc, #116]	; (d43ac <_GLOBAL__sub_I_display+0xe4>)
   d4338:	4648      	mov	r0, r9
   d433a:	f7ff ffa3 	bl	d4284 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d433e:	4622      	mov	r2, r4
   d4340:	4639      	mov	r1, r7
   d4342:	4648      	mov	r0, r9
   d4344:	f003 fce4 	bl	d7d10 <__aeabi_atexit>
   d4348:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d434a:	4641      	mov	r1, r8
   d434c:	a806      	add	r0, sp, #24
   d434e:	f88d 3014 	strb.w	r3, [sp, #20]
   d4352:	f001 ffed 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
   d4356:	4631      	mov	r1, r6
   d4358:	a80b      	add	r0, sp, #44	; 0x2c
   d435a:	f001 ffe9 	bl	d6330 <_ZN8particle7BleUuidC1ERKS0_>
   d435e:	4e14      	ldr	r6, [pc, #80]	; (d43b0 <_GLOBAL__sub_I_display+0xe8>)
   d4360:	4b14      	ldr	r3, [pc, #80]	; (d43b4 <_GLOBAL__sub_I_display+0xec>)
   d4362:	9301      	str	r3, [sp, #4]
   d4364:	ab0b      	add	r3, sp, #44	; 0x2c
   d4366:	9300      	str	r3, [sp, #0]
   d4368:	aa05      	add	r2, sp, #20
   d436a:	ab06      	add	r3, sp, #24
   d436c:	4912      	ldr	r1, [pc, #72]	; (d43b8 <_GLOBAL__sub_I_display+0xf0>)
   d436e:	9502      	str	r5, [sp, #8]
   d4370:	4630      	mov	r0, r6
   d4372:	f7ff ff87 	bl	d4284 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4376:	4622      	mov	r2, r4
   d4378:	4639      	mov	r1, r7
   d437a:	4630      	mov	r0, r6
   d437c:	f003 fcc8 	bl	d7d10 <__aeabi_atexit>
}
   d4380:	b011      	add	sp, #68	; 0x44
   d4382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4386:	bf00      	nop
   d4388:	2003e5b8 	.word	0x2003e5b8
   d438c:	2003e578 	.word	0x2003e578
   d4390:	2003e57c 	.word	0x2003e57c
   d4394:	000d69b3 	.word	0x000d69b3
   d4398:	000d4c09 	.word	0x000d4c09
   d439c:	2003e5a4 	.word	0x2003e5a4
   d43a0:	000d80e1 	.word	0x000d80e1
   d43a4:	000d8106 	.word	0x000d8106
   d43a8:	000d812b 	.word	0x000d812b
   d43ac:	000d8150 	.word	0x000d8150
   d43b0:	2003e628 	.word	0x2003e628
   d43b4:	000d40c5 	.word	0x000d40c5
   d43b8:	000d8153 	.word	0x000d8153
   d43bc:	2003e590 	.word	0x2003e590
   d43c0:	2003e630 	.word	0x2003e630

000d43c4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d43c4:	4770      	bx	lr

000d43c6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d43c6:	b510      	push	{r4, lr}
  }
   d43c8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d43ca:	4604      	mov	r4, r0
  }
   d43cc:	f003 fca5 	bl	d7d1a <_ZdlPvj>
   d43d0:	4620      	mov	r0, r4
   d43d2:	bd10      	pop	{r4, pc}

000d43d4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d43d4:	b40e      	push	{r1, r2, r3}
   d43d6:	b503      	push	{r0, r1, lr}
   d43d8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d43da:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d43dc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d43e0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d43e2:	f002 fffa 	bl	d73da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d43e6:	b002      	add	sp, #8
   d43e8:	f85d eb04 	ldr.w	lr, [sp], #4
   d43ec:	b003      	add	sp, #12
   d43ee:	4770      	bx	lr

000d43f0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d43f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d43f2:	4604      	mov	r4, r0
   d43f4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d43f6:	7922      	ldrb	r2, [r4, #4]
   d43f8:	68a3      	ldr	r3, [r4, #8]
   d43fa:	b132      	cbz	r2, d440a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d43fc:	b9a3      	cbnz	r3, d4428 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d43fe:	490b      	ldr	r1, [pc, #44]	; (d442c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4400:	b002      	add	sp, #8
   d4402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4406:	f002 bfad 	b.w	d7364 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d440a:	4a09      	ldr	r2, [pc, #36]	; (d4430 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d440c:	7b26      	ldrb	r6, [r4, #12]
   d440e:	4d09      	ldr	r5, [pc, #36]	; (d4434 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4410:	4909      	ldr	r1, [pc, #36]	; (d4438 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4412:	7b64      	ldrb	r4, [r4, #13]
   d4414:	2e01      	cmp	r6, #1
   d4416:	bf18      	it	ne
   d4418:	4629      	movne	r1, r5
   d441a:	e9cd 1400 	strd	r1, r4, [sp]
   d441e:	4907      	ldr	r1, [pc, #28]	; (d443c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4420:	f7ff ffd8 	bl	d43d4 <_ZN5Print6printfEPKcz>
  }
   d4424:	b002      	add	sp, #8
   d4426:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4428:	4a05      	ldr	r2, [pc, #20]	; (d4440 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d442a:	e7ef      	b.n	d440c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d442c:	000d8167 	.word	0x000d8167
   d4430:	000d80e0 	.word	0x000d80e0
   d4434:	000d8163 	.word	0x000d8163
   d4438:	000d815f 	.word	0x000d815f
   d443c:	000d817d 	.word	0x000d817d
   d4440:	000d8156 	.word	0x000d8156

000d4444 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4448:	b085      	sub	sp, #20
   d444a:	461f      	mov	r7, r3
   d444c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d4450:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4454:	eba8 0902 	sub.w	r9, r8, r2
   d4458:	eba7 0a01 	sub.w	sl, r7, r1
   d445c:	f1b9 0f00 	cmp.w	r9, #0
   d4460:	bfb8      	it	lt
   d4462:	f1c9 0900 	rsblt	r9, r9, #0
   d4466:	f1ba 0f00 	cmp.w	sl, #0
   d446a:	bfb8      	it	lt
   d446c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4470:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4472:	4683      	mov	fp, r0
   d4474:	460c      	mov	r4, r1
   d4476:	4615      	mov	r5, r2
    if (steep) {
   d4478:	dd04      	ble.n	d4484 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d447a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d447c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d447e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4480:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4482:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4484:	42bc      	cmp	r4, r7
   d4486:	dd05      	ble.n	d4494 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4488:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d448a:	4645      	mov	r5, r8
   d448c:	4690      	mov	r8, r2
    if (x0 > x1) {
   d448e:	4622      	mov	r2, r4
   d4490:	463c      	mov	r4, r7
   d4492:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4494:	1b3e      	subs	r6, r7, r4
   d4496:	b2b2      	uxth	r2, r6
   d4498:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d449a:	eba8 0205 	sub.w	r2, r8, r5
   d449e:	2a00      	cmp	r2, #0
   d44a0:	bfb8      	it	lt
   d44a2:	4252      	neglt	r2, r2
   d44a4:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d44a6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d44aa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d44ae:	4545      	cmp	r5, r8
   d44b0:	bfb4      	ite	lt
   d44b2:	2201      	movlt	r2, #1
   d44b4:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d44b8:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d44ba:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d44bc:	42bc      	cmp	r4, r7
   d44be:	dc1c      	bgt.n	d44fa <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d44c0:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d44c4:	9303      	str	r3, [sp, #12]
        if (steep) {
   d44c6:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d44c8:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d44cc:	bfc7      	ittee	gt
   d44ce:	4629      	movgt	r1, r5
   d44d0:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d44d2:	462a      	movle	r2, r5
   d44d4:	4621      	movle	r1, r4
   d44d6:	4658      	mov	r0, fp
   d44d8:	47c0      	blx	r8
        }
        err -= dy;
   d44da:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d44dc:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d44de:	1ab6      	subs	r6, r6, r2
   d44e0:	b2b1      	uxth	r1, r6
   d44e2:	b236      	sxth	r6, r6
        if (err < 0) {
   d44e4:	2e00      	cmp	r6, #0
   d44e6:	da05      	bge.n	d44f4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d44e8:	9a02      	ldr	r2, [sp, #8]
   d44ea:	4415      	add	r5, r2
            err += dx;
   d44ec:	9a00      	ldr	r2, [sp, #0]
   d44ee:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d44f0:	b22d      	sxth	r5, r5
            err += dx;
   d44f2:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d44f4:	3401      	adds	r4, #1
   d44f6:	b224      	sxth	r4, r4
   d44f8:	e7e0      	b.n	d44bc <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d44fa:	b005      	add	sp, #20
   d44fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4500 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4500:	4770      	bx	lr

000d4502 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4502:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4504:	6804      	ldr	r4, [r0, #0]
   d4506:	6924      	ldr	r4, [r4, #16]
   d4508:	46a4      	mov	ip, r4
}
   d450a:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d450e:	4760      	bx	ip

000d4510 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4510:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4512:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4514:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4518:	9502      	str	r5, [sp, #8]
   d451a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d451c:	46a4      	mov	ip, r4
}
   d451e:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4520:	4760      	bx	ip

000d4522 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4522:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4524:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4526:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d452a:	9502      	str	r5, [sp, #8]
   d452c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d452e:	46a4      	mov	ip, r4
}
   d4530:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4532:	4760      	bx	ip

000d4534 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4534:	b470      	push	{r4, r5, r6}
   d4536:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d453a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d453e:	6804      	ldr	r4, [r0, #0]
   d4540:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4544:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4546:	46a4      	mov	ip, r4
}
   d4548:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d454a:	4760      	bx	ip

000d454c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d454c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4550:	461c      	mov	r4, r3
    startWrite();
   d4552:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4554:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4558:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d455a:	4605      	mov	r5, r0
   d455c:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d455e:	3c01      	subs	r4, #1
   d4560:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d4562:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4564:	b224      	sxth	r4, r4
    startWrite();
   d4566:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4568:	682b      	ldr	r3, [r5, #0]
   d456a:	f8cd 8004 	str.w	r8, [sp, #4]
   d456e:	9400      	str	r4, [sp, #0]
   d4570:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4572:	4628      	mov	r0, r5
   d4574:	463b      	mov	r3, r7
   d4576:	4632      	mov	r2, r6
   d4578:	4639      	mov	r1, r7
   d457a:	47a0      	blx	r4
    endWrite();
   d457c:	682b      	ldr	r3, [r5, #0]
   d457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4580:	4628      	mov	r0, r5
}
   d4582:	b002      	add	sp, #8
   d4584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4588:	4718      	bx	r3

000d458a <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d458a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d458e:	461d      	mov	r5, r3
    startWrite();
   d4590:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4592:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4596:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4598:	4604      	mov	r4, r0
   d459a:	4617      	mov	r7, r2
   d459c:	460e      	mov	r6, r1
    startWrite();
   d459e:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d45a0:	e9cd 7800 	strd	r7, r8, [sp]
   d45a4:	6822      	ldr	r2, [r4, #0]
   d45a6:	1e6b      	subs	r3, r5, #1
   d45a8:	4433      	add	r3, r6
   d45aa:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d45ac:	4620      	mov	r0, r4
   d45ae:	b21b      	sxth	r3, r3
   d45b0:	463a      	mov	r2, r7
   d45b2:	4631      	mov	r1, r6
   d45b4:	47a8      	blx	r5
    endWrite();
   d45b6:	6823      	ldr	r3, [r4, #0]
   d45b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45ba:	4620      	mov	r0, r4
}
   d45bc:	b002      	add	sp, #8
   d45be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d45c2:	4718      	bx	r3

000d45c4 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d45c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d45c8:	461e      	mov	r6, r3
    startWrite();
   d45ca:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d45cc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d45d0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d45d2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d45d6:	460c      	mov	r4, r1
   d45d8:	4605      	mov	r5, r0
   d45da:	4617      	mov	r7, r2
    startWrite();
   d45dc:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d45de:	4426      	add	r6, r4
   d45e0:	42b4      	cmp	r4, r6
   d45e2:	682b      	ldr	r3, [r5, #0]
   d45e4:	da0b      	bge.n	d45fe <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d45e6:	f8cd 8000 	str.w	r8, [sp]
   d45ea:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d45ee:	4621      	mov	r1, r4
   d45f0:	464b      	mov	r3, r9
   d45f2:	463a      	mov	r2, r7
   d45f4:	4628      	mov	r0, r5
   d45f6:	3401      	adds	r4, #1
   d45f8:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d45fa:	b224      	sxth	r4, r4
   d45fc:	e7f0      	b.n	d45e0 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d45fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4600:	4628      	mov	r0, r5
}
   d4602:	b002      	add	sp, #8
   d4604:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4608:	4718      	bx	r3

000d460a <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d460a:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d460c:	6802      	ldr	r2, [r0, #0]
   d460e:	9101      	str	r1, [sp, #4]
   d4610:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4614:	9100      	str	r1, [sp, #0]
   d4616:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4618:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d461c:	2200      	movs	r2, #0
   d461e:	4611      	mov	r1, r2
   d4620:	47a0      	blx	r4
}
   d4622:	b002      	add	sp, #8
   d4624:	bd10      	pop	{r4, pc}

000d4626 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4626:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d462a:	461d      	mov	r5, r3
    startWrite();
   d462c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d462e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4632:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4634:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4638:	4604      	mov	r4, r0
   d463a:	460f      	mov	r7, r1
   d463c:	4616      	mov	r6, r2
    startWrite();
   d463e:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4640:	6823      	ldr	r3, [r4, #0]
   d4642:	f8cd 8000 	str.w	r8, [sp]
   d4646:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d464a:	4632      	mov	r2, r6
   d464c:	462b      	mov	r3, r5
   d464e:	4639      	mov	r1, r7
   d4650:	4620      	mov	r0, r4
   d4652:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4654:	6823      	ldr	r3, [r4, #0]
   d4656:	f8cd 8000 	str.w	r8, [sp]
   d465a:	f109 32ff 	add.w	r2, r9, #4294967295
   d465e:	4432      	add	r2, r6
   d4660:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4664:	4639      	mov	r1, r7
   d4666:	462b      	mov	r3, r5
   d4668:	4620      	mov	r0, r4
   d466a:	b212      	sxth	r2, r2
   d466c:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d466e:	6823      	ldr	r3, [r4, #0]
   d4670:	f8cd 8000 	str.w	r8, [sp]
   d4674:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4678:	4632      	mov	r2, r6
   d467a:	464b      	mov	r3, r9
   d467c:	4639      	mov	r1, r7
   d467e:	4620      	mov	r0, r4
   d4680:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4682:	1e6b      	subs	r3, r5, #1
   d4684:	19d9      	adds	r1, r3, r7
   d4686:	6823      	ldr	r3, [r4, #0]
   d4688:	f8cd 8000 	str.w	r8, [sp]
   d468c:	6a1d      	ldr	r5, [r3, #32]
   d468e:	4620      	mov	r0, r4
   d4690:	464b      	mov	r3, r9
   d4692:	4632      	mov	r2, r6
   d4694:	b209      	sxth	r1, r1
   d4696:	47a8      	blx	r5
    endWrite();
   d4698:	6823      	ldr	r3, [r4, #0]
   d469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d469c:	4620      	mov	r0, r4
}
   d469e:	b002      	add	sp, #8
   d46a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d46a4:	4718      	bx	r3

000d46a6 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d46a6:	4770      	bx	lr

000d46a8 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d46a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d46ac:	4299      	cmp	r1, r3
        uint16_t color) {
   d46ae:	4616      	mov	r6, r2
   d46b0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d46b4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d46b8:	6802      	ldr	r2, [r0, #0]
   d46ba:	4680      	mov	r8, r0
   d46bc:	460d      	mov	r5, r1
   d46be:	461c      	mov	r4, r3
    if(x0 == x1){
   d46c0:	d113      	bne.n	d46ea <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d46c2:	42be      	cmp	r6, r7
   d46c4:	bfc8      	it	gt
   d46c6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d46c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d46cc:	bfc4      	itt	gt
   d46ce:	463e      	movgt	r6, r7
   d46d0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d46d2:	1c7b      	adds	r3, r7, #1
   d46d4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d46d6:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d46d8:	b21b      	sxth	r3, r3
   d46da:	4632      	mov	r2, r6
   d46dc:	4629      	mov	r1, r5
   d46de:	4640      	mov	r0, r8
   d46e0:	46a4      	mov	ip, r4
}
   d46e2:	b003      	add	sp, #12
   d46e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d46e8:	4760      	bx	ip
    } else if(y0 == y1){
   d46ea:	42be      	cmp	r6, r7
   d46ec:	d10a      	bne.n	d4704 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d46ee:	4299      	cmp	r1, r3
   d46f0:	bfc2      	ittt	gt
   d46f2:	460b      	movgt	r3, r1
   d46f4:	4625      	movgt	r5, r4
   d46f6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d46f8:	1c63      	adds	r3, r4, #1
   d46fa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d46fe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4700:	1b5b      	subs	r3, r3, r5
   d4702:	e7e9      	b.n	d46d8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4704:	6953      	ldr	r3, [r2, #20]
   d4706:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4708:	e9cd 7900 	strd	r7, r9, [sp]
   d470c:	f8d8 3000 	ldr.w	r3, [r8]
   d4710:	4640      	mov	r0, r8
   d4712:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4714:	4632      	mov	r2, r6
   d4716:	4623      	mov	r3, r4
   d4718:	4629      	mov	r1, r5
   d471a:	47b8      	blx	r7
        endWrite();
   d471c:	f8d8 3000 	ldr.w	r3, [r8]
   d4720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4722:	4640      	mov	r0, r8
}
   d4724:	b003      	add	sp, #12
   d4726:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d472a:	4718      	bx	r3

000d472c <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d472c:	f001 0303 	and.w	r3, r1, #3
   d4730:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4734:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d4736:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4738:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d473c:	bf59      	ittee	pl
   d473e:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4740:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d4742:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4744:	81c3      	strhmi	r3, [r0, #14]
}
   d4746:	4770      	bx	lr

000d4748 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4748:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d474a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d474c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d474e:	4a07      	ldr	r2, [pc, #28]	; (d476c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d4750:	4d07      	ldr	r5, [pc, #28]	; (d4770 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4752:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d4754:	2400      	movs	r4, #0
    _width    = WIDTH;
   d4756:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4758:	f04f 31ff 	mov.w	r1, #4294967295
   d475c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4760:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d4762:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d4764:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d4766:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4768:	6204      	str	r4, [r0, #32]
}
   d476a:	bd30      	pop	{r4, r5, pc}
   d476c:	01000101 	.word	0x01000101
   d4770:	000d86a4 	.word	0x000d86a4

000d4774 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4778:	b089      	sub	sp, #36	; 0x24
   d477a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d477e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4780:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4784:	9304      	str	r3, [sp, #16]
   d4786:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d478a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d478c:	9305      	str	r3, [sp, #20]
   d478e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d4792:	4604      	mov	r4, r0
    startWrite();
   d4794:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4796:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d479a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d479e:	bf48      	it	mi
   d47a0:	f108 020e 	addmi.w	r2, r8, #14
   d47a4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d47a8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d47aa:	4635      	mov	r5, r6
   d47ac:	9b03      	ldr	r3, [sp, #12]
   d47ae:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d47b0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d47b4:	189a      	adds	r2, r3, r2
   d47b6:	9b05      	ldr	r3, [sp, #20]
   d47b8:	428b      	cmp	r3, r1
   d47ba:	b212      	sxth	r2, r2
   d47bc:	dd27      	ble.n	d480e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47be:	9b04      	ldr	r3, [sp, #16]
   d47c0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d47c2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47c6:	9306      	str	r3, [sp, #24]
   d47c8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d47cc:	4580      	cmp	r8, r0
   d47ce:	fa1f f189 	uxth.w	r1, r9
   d47d2:	dd17      	ble.n	d4804 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d47d4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47d6:	bf05      	ittet	eq
   d47d8:	9b06      	ldreq	r3, [sp, #24]
   d47da:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d47dc:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47de:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d47e0:	bf18      	it	ne
   d47e2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d47e4:	062b      	lsls	r3, r5, #24
   d47e6:	d50a      	bpl.n	d47fe <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d47e8:	9b02      	ldr	r3, [sp, #8]
   d47ea:	6820      	ldr	r0, [r4, #0]
   d47ec:	9207      	str	r2, [sp, #28]
   d47ee:	4419      	add	r1, r3
   d47f0:	6983      	ldr	r3, [r0, #24]
   d47f2:	b209      	sxth	r1, r1
   d47f4:	461f      	mov	r7, r3
   d47f6:	4620      	mov	r0, r4
   d47f8:	4653      	mov	r3, sl
   d47fa:	47b8      	blx	r7
   d47fc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d47fe:	f109 0901 	add.w	r9, r9, #1
   d4802:	e7e1      	b.n	d47c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4804:	9b01      	ldr	r3, [sp, #4]
   d4806:	3301      	adds	r3, #1
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	445e      	add	r6, fp
   d480c:	e7ce      	b.n	d47ac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d480e:	6823      	ldr	r3, [r4, #0]
   d4810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4812:	4620      	mov	r0, r4
}
   d4814:	b009      	add	sp, #36	; 0x24
   d4816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d481a:	4718      	bx	r3

000d481c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4820:	ed2d 8b02 	vpush	{d8}
   d4824:	b091      	sub	sp, #68	; 0x44
   d4826:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4828:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d482a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d482e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d4832:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d4836:	9103      	str	r1, [sp, #12]
   d4838:	461f      	mov	r7, r3
   d483a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d483e:	9304      	str	r3, [sp, #16]
   d4840:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d4842:	2a00      	cmp	r2, #0
   d4844:	f040 80c5 	bne.w	d49d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d4848:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d484c:	428b      	cmp	r3, r1
   d484e:	f340 814c 	ble.w	d4aea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d4852:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d4856:	42b3      	cmp	r3, r6
   d4858:	f340 8147 	ble.w	d4aea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d485c:	2306      	movs	r3, #6
   d485e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d4862:	2b00      	cmp	r3, #0
   d4864:	f340 8141 	ble.w	d4aea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d4868:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d486c:	2b00      	cmp	r3, #0
   d486e:	f340 813c 	ble.w	d4aea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4872:	7f03      	ldrb	r3, [r0, #28]
   d4874:	b91b      	cbnz	r3, d487e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d4876:	2faf      	cmp	r7, #175	; 0xaf
   d4878:	bf84      	itt	hi
   d487a:	3701      	addhi	r7, #1
   d487c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d487e:	f8db 3000 	ldr.w	r3, [fp]
   d4882:	4658      	mov	r0, fp
   d4884:	695b      	ldr	r3, [r3, #20]
   d4886:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4888:	2205      	movs	r2, #5
   d488a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d488c:	2200      	movs	r2, #0
   d488e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4890:	4a98      	ldr	r2, [pc, #608]	; (d4af4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d4892:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d4896:	18d3      	adds	r3, r2, r3
   d4898:	930c      	str	r3, [sp, #48]	; 0x30
   d489a:	b2b3      	uxth	r3, r6
   d489c:	9306      	str	r3, [sp, #24]
   d489e:	9a05      	ldr	r2, [sp, #20]
   d48a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d48a2:	5c9b      	ldrb	r3, [r3, r2]
   d48a4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d48a6:	b2ab      	uxth	r3, r5
   d48a8:	930b      	str	r3, [sp, #44]	; 0x2c
   d48aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d48ae:	9308      	str	r3, [sp, #32]
   d48b0:	9b03      	ldr	r3, [sp, #12]
   d48b2:	fb02 f905 	mul.w	r9, r2, r5
   d48b6:	fa19 f983 	uxtah	r9, r9, r3
   d48ba:	fa0f f389 	sxth.w	r3, r9
   d48be:	ee08 3a10 	vmov	s16, r3
   d48c2:	2308      	movs	r3, #8
   d48c4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d48c6:	9b03      	ldr	r3, [sp, #12]
   d48c8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d48cc:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d48d0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d48d4:	9a07      	ldr	r2, [sp, #28]
   d48d6:	f8db 3000 	ldr.w	r3, [fp]
   d48da:	07d2      	lsls	r2, r2, #31
   d48dc:	d552      	bpl.n	d4984 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d48de:	2d01      	cmp	r5, #1
   d48e0:	fa1f f289 	uxth.w	r2, r9
   d48e4:	d13e      	bne.n	d4964 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d48e6:	2c01      	cmp	r4, #1
   d48e8:	d13c      	bne.n	d4964 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d48ea:	699b      	ldr	r3, [r3, #24]
   d48ec:	9906      	ldr	r1, [sp, #24]
   d48ee:	461f      	mov	r7, r3
   d48f0:	9b04      	ldr	r3, [sp, #16]
   d48f2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d48f4:	b212      	sxth	r2, r2
   d48f6:	4651      	mov	r1, sl
   d48f8:	4658      	mov	r0, fp
   d48fa:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d48fc:	f109 0301 	add.w	r3, r9, #1
   d4900:	fa4f f983 	sxtb.w	r9, r3
   d4904:	9b07      	ldr	r3, [sp, #28]
   d4906:	085b      	lsrs	r3, r3, #1
   d4908:	9307      	str	r3, [sp, #28]
   d490a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d490c:	3b01      	subs	r3, #1
   d490e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4912:	930a      	str	r3, [sp, #40]	; 0x28
   d4914:	d1de      	bne.n	d48d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4916:	9f05      	ldr	r7, [sp, #20]
   d4918:	3701      	adds	r7, #1
   d491a:	b27b      	sxtb	r3, r7
   d491c:	9305      	str	r3, [sp, #20]
   d491e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4920:	3b01      	subs	r3, #1
   d4922:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4926:	9309      	str	r3, [sp, #36]	; 0x24
   d4928:	d1b9      	bne.n	d489e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d492a:	9b04      	ldr	r3, [sp, #16]
   d492c:	4543      	cmp	r3, r8
   d492e:	d00f      	beq.n	d4950 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d4930:	2d01      	cmp	r5, #1
   d4932:	f8db 3000 	ldr.w	r3, [fp]
   d4936:	d13b      	bne.n	d49b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4938:	2c01      	cmp	r4, #1
   d493a:	d139      	bne.n	d49b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d493c:	9908      	ldr	r1, [sp, #32]
   d493e:	f8cd 8000 	str.w	r8, [sp]
   d4942:	3105      	adds	r1, #5
   d4944:	6a1c      	ldr	r4, [r3, #32]
   d4946:	4632      	mov	r2, r6
   d4948:	2308      	movs	r3, #8
   d494a:	b209      	sxth	r1, r1
   d494c:	4658      	mov	r0, fp
   d494e:	47a0      	blx	r4
        endWrite();
   d4950:	f8db 3000 	ldr.w	r3, [fp]
   d4954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4956:	4658      	mov	r0, fp
}
   d4958:	b011      	add	sp, #68	; 0x44
   d495a:	ecbd 8b02 	vpop	{d8}
   d495e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d4962:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d4964:	9906      	ldr	r1, [sp, #24]
   d4966:	fb14 f202 	smulbb	r2, r4, r2
   d496a:	440a      	add	r2, r1
   d496c:	9904      	ldr	r1, [sp, #16]
   d496e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4970:	9400      	str	r4, [sp, #0]
   d4972:	69db      	ldr	r3, [r3, #28]
   d4974:	ee18 1a10 	vmov	r1, s16
   d4978:	461f      	mov	r7, r3
   d497a:	b212      	sxth	r2, r2
   d497c:	462b      	mov	r3, r5
   d497e:	4658      	mov	r0, fp
   d4980:	47b8      	blx	r7
   d4982:	e7bb      	b.n	d48fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d4984:	9a04      	ldr	r2, [sp, #16]
   d4986:	4542      	cmp	r2, r8
   d4988:	d0b8      	beq.n	d48fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d498a:	2d01      	cmp	r5, #1
   d498c:	fa1f f289 	uxth.w	r2, r9
   d4990:	d107      	bne.n	d49a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d4992:	2c01      	cmp	r4, #1
   d4994:	d105      	bne.n	d49a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d4996:	699b      	ldr	r3, [r3, #24]
   d4998:	9906      	ldr	r1, [sp, #24]
   d499a:	461f      	mov	r7, r3
   d499c:	440a      	add	r2, r1
   d499e:	4643      	mov	r3, r8
   d49a0:	e7a8      	b.n	d48f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d49a2:	9906      	ldr	r1, [sp, #24]
   d49a4:	f8cd 8004 	str.w	r8, [sp, #4]
   d49a8:	fb14 f202 	smulbb	r2, r4, r2
   d49ac:	440a      	add	r2, r1
   d49ae:	e7df      	b.n	d4970 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d49b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d49b2:	f8cd 8004 	str.w	r8, [sp, #4]
   d49b6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d49ba:	9a08      	ldr	r2, [sp, #32]
   d49bc:	00e4      	lsls	r4, r4, #3
   d49be:	440a      	add	r2, r1
   d49c0:	4611      	mov	r1, r2
   d49c2:	9400      	str	r4, [sp, #0]
   d49c4:	69dc      	ldr	r4, [r3, #28]
   d49c6:	4632      	mov	r2, r6
   d49c8:	462b      	mov	r3, r5
   d49ca:	b209      	sxth	r1, r1
   d49cc:	4658      	mov	r0, fp
   d49ce:	47a0      	blx	r4
        endWrite();
   d49d0:	e7be      	b.n	d4950 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d49d2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d49d4:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d49d6:	6812      	ldr	r2, [r2, #0]
   d49d8:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d49da:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d49dc:	b2ff      	uxtb	r7, r7
   d49de:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d49e2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d49e6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d49e8:	789a      	ldrb	r2, [r3, #2]
   d49ea:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d49ec:	78da      	ldrb	r2, [r3, #3]
   d49ee:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d49f0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d49f2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d49f6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d49fa:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d49fc:	d801      	bhi.n	d4a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d49fe:	2c01      	cmp	r4, #1
   d4a00:	d957      	bls.n	d4ab2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d4a02:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d4a06:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4a08:	fa0f f38a 	sxth.w	r3, sl
   d4a0c:	9307      	str	r3, [sp, #28]
        startWrite();
   d4a0e:	f8db 3000 	ldr.w	r3, [fp]
   d4a12:	4658      	mov	r0, fp
   d4a14:	695b      	ldr	r3, [r3, #20]
   d4a16:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a18:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4a1a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a1e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a20:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4a24:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d4a26:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a28:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4a2c:	429f      	cmp	r7, r3
   d4a2e:	d28f      	bcs.n	d4950 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a30:	9b07      	ldr	r3, [sp, #28]
   d4a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4a34:	443b      	add	r3, r7
   d4a36:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4a3a:	2200      	movs	r2, #0
   d4a3c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a40:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a42:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a46:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a4a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a4e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d4a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4a52:	9905      	ldr	r1, [sp, #20]
   d4a54:	4291      	cmp	r1, r2
   d4a56:	d241      	bcs.n	d4adc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4a58:	1c5a      	adds	r2, r3, #1
   d4a5a:	b2d2      	uxtb	r2, r2
   d4a5c:	075b      	lsls	r3, r3, #29
   d4a5e:	920c      	str	r2, [sp, #48]	; 0x30
   d4a60:	d107      	bne.n	d4a72 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d4a62:	9b06      	ldr	r3, [sp, #24]
   d4a64:	9906      	ldr	r1, [sp, #24]
   d4a66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4a68:	3301      	adds	r3, #1
   d4a6a:	b29b      	uxth	r3, r3
   d4a6c:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4a70:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d4a72:	f019 0f80 	tst.w	r9, #128	; 0x80
   d4a76:	d012      	beq.n	d4a9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4a78:	2d01      	cmp	r5, #1
   d4a7a:	f8db 3000 	ldr.w	r3, [fp]
   d4a7e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4a82:	d11a      	bne.n	d4aba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4a84:	2c01      	cmp	r4, #1
   d4a86:	d118      	bne.n	d4aba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4a8a:	699b      	ldr	r3, [r3, #24]
   d4a8c:	4411      	add	r1, r2
   d4a8e:	9a05      	ldr	r2, [sp, #20]
   d4a90:	4411      	add	r1, r2
   d4a92:	461e      	mov	r6, r3
   d4a94:	4652      	mov	r2, sl
   d4a96:	9b04      	ldr	r3, [sp, #16]
   d4a98:	b209      	sxth	r1, r1
   d4a9a:	4658      	mov	r0, fp
   d4a9c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4a9e:	9e05      	ldr	r6, [sp, #20]
   d4aa0:	3601      	adds	r6, #1
   d4aa2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4aa4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4aa8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4aaa:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4ab0:	e7ce      	b.n	d4a50 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4ab2:	2300      	movs	r3, #0
   d4ab4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4ab8:	e7a9      	b.n	d4a0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4aba:	9805      	ldr	r0, [sp, #20]
   d4abc:	9a08      	ldr	r2, [sp, #32]
   d4abe:	4402      	add	r2, r0
   d4ac0:	fb02 1105 	mla	r1, r2, r5, r1
   d4ac4:	9a04      	ldr	r2, [sp, #16]
   d4ac6:	e9cd 4200 	strd	r4, r2, [sp]
   d4aca:	69db      	ldr	r3, [r3, #28]
   d4acc:	ee18 2a10 	vmov	r2, s16
   d4ad0:	461e      	mov	r6, r3
   d4ad2:	b209      	sxth	r1, r1
   d4ad4:	462b      	mov	r3, r5
   d4ad6:	4658      	mov	r0, fp
   d4ad8:	47b0      	blx	r6
   d4ada:	e7e0      	b.n	d4a9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4ade:	3701      	adds	r7, #1
   d4ae0:	4498      	add	r8, r3
   d4ae2:	fa5f f888 	uxtb.w	r8, r8
   d4ae6:	b2ff      	uxtb	r7, r7
   d4ae8:	e79f      	b.n	d4a2a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4aea:	b011      	add	sp, #68	; 0x44
   d4aec:	ecbd 8b02 	vpop	{d8}
   d4af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4af4:	000d819a 	.word	0x000d819a

000d4af8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4afa:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4afc:	b085      	sub	sp, #20
   d4afe:	4604      	mov	r4, r0
   d4b00:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4b02:	2a00      	cmp	r2, #0
   d4b04:	d134      	bne.n	d4b70 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4b06:	290a      	cmp	r1, #10
   d4b08:	d108      	bne.n	d4b1c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4b0a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4b0c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4b0e:	7e42      	ldrb	r2, [r0, #25]
   d4b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4b14:	8263      	strh	r3, [r4, #18]
}
   d4b16:	2001      	movs	r0, #1
   d4b18:	b005      	add	sp, #20
   d4b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4b1c:	290d      	cmp	r1, #13
   d4b1e:	d0fa      	beq.n	d4b16 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4b20:	7ee1      	ldrb	r1, [r4, #27]
   d4b22:	7e00      	ldrb	r0, [r0, #24]
   d4b24:	7e65      	ldrb	r5, [r4, #25]
   d4b26:	b171      	cbz	r1, d4b46 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4b28:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4b2c:	2106      	movs	r1, #6
   d4b2e:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4b32:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4b36:	42b1      	cmp	r1, r6
   d4b38:	bfc1      	itttt	gt
   d4b3a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4b3e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4b40:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4b44:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4b46:	8ae2      	ldrh	r2, [r4, #22]
   d4b48:	9201      	str	r2, [sp, #4]
   d4b4a:	8aa2      	ldrh	r2, [r4, #20]
   d4b4c:	9200      	str	r2, [sp, #0]
   d4b4e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4b52:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4b56:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	f7ff fe5e 	bl	d481c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4b60:	7e23      	ldrb	r3, [r4, #24]
   d4b62:	8a22      	ldrh	r2, [r4, #16]
   d4b64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4b68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4b6c:	8223      	strh	r3, [r4, #16]
   d4b6e:	e7d2      	b.n	d4b16 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4b70:	290a      	cmp	r1, #10
   d4b72:	d107      	bne.n	d4b84 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4b74:	2300      	movs	r3, #0
   d4b76:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4b78:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4b7a:	7e41      	ldrb	r1, [r0, #25]
   d4b7c:	8a42      	ldrh	r2, [r0, #18]
   d4b7e:	fb01 2303 	mla	r3, r1, r3, r2
   d4b82:	e7c7      	b.n	d4b14 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4b84:	290d      	cmp	r1, #13
   d4b86:	d0c6      	beq.n	d4b16 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4b88:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4b8a:	42a9      	cmp	r1, r5
   d4b8c:	d3c3      	bcc.n	d4b16 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4b8e:	7a51      	ldrb	r1, [r2, #9]
   d4b90:	4299      	cmp	r1, r3
   d4b92:	d3c0      	bcc.n	d4b16 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4b94:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4b96:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4b98:	b2ed      	uxtb	r5, r5
   d4b9a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4b9e:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4ba0:	b32f      	cbz	r7, d4bee <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4ba2:	78e9      	ldrb	r1, [r5, #3]
   d4ba4:	b319      	cbz	r1, d4bee <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4ba6:	7ee1      	ldrb	r1, [r4, #27]
   d4ba8:	7e00      	ldrb	r0, [r0, #24]
   d4baa:	7e66      	ldrb	r6, [r4, #25]
   d4bac:	b191      	cbz	r1, d4bd4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4bae:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4bb2:	4439      	add	r1, r7
   d4bb4:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4bb8:	fb00 7101 	mla	r1, r0, r1, r7
   d4bbc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4bc0:	42b9      	cmp	r1, r7
   d4bc2:	dd07      	ble.n	d4bd4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4bc4:	2700      	movs	r7, #0
   d4bc6:	8227      	strh	r7, [r4, #16]
   d4bc8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4bcc:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4bce:	fb02 1206 	mla	r2, r2, r6, r1
   d4bd2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4bd4:	8ae2      	ldrh	r2, [r4, #22]
   d4bd6:	9201      	str	r2, [sp, #4]
   d4bd8:	8aa2      	ldrh	r2, [r4, #20]
   d4bda:	9200      	str	r2, [sp, #0]
   d4bdc:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4be0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4be4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4be8:	4620      	mov	r0, r4
   d4bea:	f7ff fe17 	bl	d481c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4bee:	7929      	ldrb	r1, [r5, #4]
   d4bf0:	7e23      	ldrb	r3, [r4, #24]
   d4bf2:	8a22      	ldrh	r2, [r4, #16]
   d4bf4:	fb01 2303 	mla	r3, r1, r3, r2
   d4bf8:	e7b8      	b.n	d4b6c <_ZN12Adafruit_GFX5writeEh+0x74>

000d4bfa <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4bfa:	2901      	cmp	r1, #1
   d4bfc:	bf38      	it	cc
   d4bfe:	2101      	movcc	r1, #1
   d4c00:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4c02:	7641      	strb	r1, [r0, #25]
}
   d4c04:	4770      	bx	lr
	...

000d4c08 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4c08:	b510      	push	{r4, lr}
   d4c0a:	4b06      	ldr	r3, [pc, #24]	; (d4c24 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4c0c:	6003      	str	r3, [r0, #0]
   d4c0e:	4604      	mov	r4, r0
	if (mutex) {
   d4c10:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4c12:	b108      	cbz	r0, d4c18 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4c14:	f000 fe26 	bl	d5864 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4c18:	4620      	mov	r0, r4
   d4c1a:	f000 f8d1 	bl	d4dc0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4c1e:	4620      	mov	r0, r4
   d4c20:	bd10      	pop	{r4, pc}
   d4c22:	bf00      	nop
   d4c24:	000d86fc 	.word	0x000d86fc

000d4c28 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4c28:	b510      	push	{r4, lr}
   d4c2a:	4604      	mov	r4, r0
}
   d4c2c:	f7ff ffec 	bl	d4c08 <_ZN16OledWingAdafruitD1Ev>
   d4c30:	4620      	mov	r0, r4
   d4c32:	2170      	movs	r1, #112	; 0x70
   d4c34:	f003 f871 	bl	d7d1a <_ZdlPvj>
   d4c38:	4620      	mov	r0, r4
   d4c3a:	bd10      	pop	{r4, pc}

000d4c3c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4c3c:	b530      	push	{r4, r5, lr}
   d4c3e:	b085      	sub	sp, #20
   d4c40:	4604      	mov	r4, r0
   d4c42:	460d      	mov	r5, r1
   d4c44:	f003 f83c 	bl	d7cc0 <_Z19__fetch_global_Wirev>
   d4c48:	4a10      	ldr	r2, [pc, #64]	; (d4c8c <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4c4a:	4911      	ldr	r1, [pc, #68]	; (d4c90 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4c4c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4c50:	f04f 32ff 	mov.w	r2, #4294967295
   d4c54:	2180      	movs	r1, #128	; 0x80
   d4c56:	4603      	mov	r3, r0
   d4c58:	9200      	str	r2, [sp, #0]
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	2220      	movs	r2, #32
   d4c5e:	f000 f935 	bl	d4ecc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4c62:	4b0c      	ldr	r3, [pc, #48]	; (d4c94 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4c64:	6023      	str	r3, [r4, #0]
   d4c66:	2300      	movs	r3, #0
   d4c68:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4c70:	f000 f854 	bl	d4d1c <_ZN8DebounceC1Ev>
   d4c74:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4c78:	f000 f850 	bl	d4d1c <_ZN8DebounceC1Ev>
   d4c7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4c80:	f000 f84c 	bl	d4d1c <_ZN8DebounceC1Ev>
}
   d4c84:	4620      	mov	r0, r4
   d4c86:	b005      	add	sp, #20
   d4c88:	bd30      	pop	{r4, r5, pc}
   d4c8a:	bf00      	nop
   d4c8c:	00061a80 	.word	0x00061a80
   d4c90:	000186a0 	.word	0x000186a0
   d4c94:	000d86fc 	.word	0x000d86fc

000d4c98 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4c98:	b513      	push	{r0, r1, r4, lr}
   d4c9a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4c9c:	3050      	adds	r0, #80	; 0x50
   d4c9e:	f000 fdd9 	bl	d5854 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4ca2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4ca4:	07d9      	lsls	r1, r3, #31
   d4ca6:	d505      	bpl.n	d4cb4 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4ca8:	2202      	movs	r2, #2
   d4caa:	2104      	movs	r1, #4
   d4cac:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4cb0:	f000 f848 	bl	d4d44 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4cb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cb6:	079a      	lsls	r2, r3, #30
   d4cb8:	d505      	bpl.n	d4cc6 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4cba:	2200      	movs	r2, #0
   d4cbc:	2103      	movs	r1, #3
   d4cbe:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4cc2:	f000 f83f 	bl	d4d44 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4cc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cc8:	075b      	lsls	r3, r3, #29
   d4cca:	d505      	bpl.n	d4cd8 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4ccc:	2202      	movs	r2, #2
   d4cce:	4611      	mov	r1, r2
   d4cd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4cd4:	f000 f836 	bl	d4d44 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4cd8:	2301      	movs	r3, #1
   d4cda:	9300      	str	r3, [sp, #0]
   d4cdc:	223c      	movs	r2, #60	; 0x3c
   d4cde:	2102      	movs	r1, #2
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	f000 f9f3 	bl	d50cc <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4ce6:	b002      	add	sp, #8
   d4ce8:	bd10      	pop	{r4, pc}

000d4cea <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4cea:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4cec:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4cee:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4cf0:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4cf2:	d502      	bpl.n	d4cfa <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4cf4:	3058      	adds	r0, #88	; 0x58
   d4cf6:	f000 f832 	bl	d4d5e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4cfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cfc:	079a      	lsls	r2, r3, #30
   d4cfe:	d503      	bpl.n	d4d08 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4d00:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4d04:	f000 f82b 	bl	d4d5e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4d08:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4d0a:	075b      	lsls	r3, r3, #29
   d4d0c:	d505      	bpl.n	d4d1a <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4d0e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4d16:	f000 b822 	b.w	d4d5e <_ZN8Debounce6updateEv>
}
   d4d1a:	bd10      	pop	{r4, pc}

000d4d1c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4d1c:	2100      	movs	r1, #0
   d4d1e:	220a      	movs	r2, #10
   d4d20:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4d24:	4770      	bx	lr

000d4d26 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4d26:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4d28:	b510      	push	{r4, lr}
   d4d2a:	4604      	mov	r4, r0
    this->pin = pin;
   d4d2c:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4d2e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4d30:	b288      	uxth	r0, r1
   d4d32:	f002 ff99 	bl	d7c68 <digitalRead>
   d4d36:	b108      	cbz	r0, d4d3c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4d38:	2303      	movs	r3, #3
   d4d3a:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d3c:	f000 fcfe 	bl	d573c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4d40:	6020      	str	r0, [r4, #0]
#endif
}
   d4d42:	bd10      	pop	{r4, pc}

000d4d44 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4d44:	b538      	push	{r3, r4, r5, lr}
   d4d46:	460c      	mov	r4, r1
   d4d48:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4d4a:	4611      	mov	r1, r2
   d4d4c:	b2a0      	uxth	r0, r4
   d4d4e:	f002 ff61 	bl	d7c14 <pinMode>
  
  this->attach(pin);
   d4d52:	4621      	mov	r1, r4
   d4d54:	4628      	mov	r0, r5
}
   d4d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4d5a:	f7ff bfe4 	b.w	d4d26 <_ZN8Debounce6attachEi>

000d4d5e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4d5e:	b538      	push	{r3, r4, r5, lr}
   d4d60:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4d62:	79c0      	ldrb	r0, [r0, #7]
   d4d64:	f002 ff80 	bl	d7c68 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4d68:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4d6a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4d6c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4d70:	bf18      	it	ne
   d4d72:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4d74:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4d78:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4d7a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4d7c:	d00a      	beq.n	d4d94 <_ZN8Debounce6updateEv+0x36>
   d4d7e:	f000 fcdd 	bl	d573c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4d82:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4d84:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4d86:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4d8a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4d8c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4d8e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4d92:	bd38      	pop	{r3, r4, r5, pc}
   d4d94:	f000 fcd2 	bl	d573c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4d98:	6823      	ldr	r3, [r4, #0]
   d4d9a:	1ac0      	subs	r0, r0, r3
   d4d9c:	88a3      	ldrh	r3, [r4, #4]
   d4d9e:	4298      	cmp	r0, r3
   d4da0:	d3f4      	bcc.n	d4d8c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4da2:	79a3      	ldrb	r3, [r4, #6]
   d4da4:	f003 0301 	and.w	r3, r3, #1
   d4da8:	42ab      	cmp	r3, r5
   d4daa:	d0ef      	beq.n	d4d8c <_ZN8Debounce6updateEv+0x2e>
   d4dac:	f000 fcc6 	bl	d573c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4db0:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4db2:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4db4:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4db8:	f043 0308 	orr.w	r3, r3, #8
   d4dbc:	e7e5      	b.n	d4d8a <_ZN8Debounce6updateEv+0x2c>
	...

000d4dc0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4dc0:	b510      	push	{r4, lr}
   d4dc2:	4b04      	ldr	r3, [pc, #16]	; (d4dd4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4dc4:	6003      	str	r3, [r0, #0]
   d4dc6:	4604      	mov	r4, r0
  if(buffer) {
   d4dc8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4dca:	b108      	cbz	r0, d4dd0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4dcc:	f000 ff5e 	bl	d5c8c <free>
    buffer = NULL;
  }
}
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	bd10      	pop	{r4, pc}
   d4dd4:	000d8c08 	.word	0x000d8c08

000d4dd8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4dd8:	b510      	push	{r4, lr}
   d4dda:	4604      	mov	r4, r0
}
   d4ddc:	f7ff fff0 	bl	d4dc0 <_ZN16Adafruit_SSD1306D1Ev>
   d4de0:	4620      	mov	r0, r4
   d4de2:	2150      	movs	r1, #80	; 0x50
   d4de4:	f002 ff99 	bl	d7d1a <_ZdlPvj>
   d4de8:	4620      	mov	r0, r4
   d4dea:	bd10      	pop	{r4, pc}

000d4dec <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4dec:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4dee:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4df0:	db4b      	blt.n	d4e8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4df2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4df6:	428c      	cmp	r4, r1
   d4df8:	dd47      	ble.n	d4e8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4dfa:	2a00      	cmp	r2, #0
   d4dfc:	db45      	blt.n	d4e8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4dfe:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4e02:	4294      	cmp	r4, r2
   d4e04:	dd41      	ble.n	d4e8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4e06:	7e84      	ldrb	r4, [r0, #26]
   d4e08:	2c02      	cmp	r4, #2
   d4e0a:	d01f      	beq.n	d4e4c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4e0c:	2c03      	cmp	r4, #3
   d4e0e:	d026      	beq.n	d4e5e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4e10:	2c01      	cmp	r4, #1
   d4e12:	d104      	bne.n	d4e1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4e14:	8904      	ldrh	r4, [r0, #8]
   d4e16:	43d2      	mvns	r2, r2
   d4e18:	4414      	add	r4, r2
      break;
   d4e1a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4e1c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4e1e:	2b01      	cmp	r3, #1
   d4e20:	d023      	beq.n	d4e6a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4e22:	2b02      	cmp	r3, #2
   d4e24:	d032      	beq.n	d4e8c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4e26:	bb83      	cbnz	r3, d4e8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4e28:	2a00      	cmp	r2, #0
   d4e2a:	4613      	mov	r3, r2
   d4e2c:	8904      	ldrh	r4, [r0, #8]
   d4e2e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4e30:	bfb8      	it	lt
   d4e32:	1dd3      	addlt	r3, r2, #7
   d4e34:	10db      	asrs	r3, r3, #3
   d4e36:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e3a:	f002 0207 	and.w	r2, r2, #7
   d4e3e:	2301      	movs	r3, #1
   d4e40:	4093      	lsls	r3, r2
   d4e42:	5c42      	ldrb	r2, [r0, r1]
   d4e44:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4e48:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4e4a:	e01e      	b.n	d4e8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4e4c:	8904      	ldrh	r4, [r0, #8]
   d4e4e:	43c9      	mvns	r1, r1
   d4e50:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4e52:	8944      	ldrh	r4, [r0, #10]
   d4e54:	43d2      	mvns	r2, r2
   d4e56:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4e58:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4e5a:	b212      	sxth	r2, r2
      break;
   d4e5c:	e7df      	b.n	d4e1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4e5e:	8944      	ldrh	r4, [r0, #10]
   d4e60:	43c9      	mvns	r1, r1
   d4e62:	440c      	add	r4, r1
      break;
   d4e64:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4e66:	b222      	sxth	r2, r4
      break;
   d4e68:	e7d9      	b.n	d4e1e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4e6a:	2a00      	cmp	r2, #0
   d4e6c:	8904      	ldrh	r4, [r0, #8]
   d4e6e:	4613      	mov	r3, r2
   d4e70:	bfb8      	it	lt
   d4e72:	1dd3      	addlt	r3, r2, #7
   d4e74:	10db      	asrs	r3, r3, #3
   d4e76:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4e7c:	f002 0007 	and.w	r0, r2, #7
   d4e80:	2201      	movs	r2, #1
   d4e82:	4082      	lsls	r2, r0
   d4e84:	5c58      	ldrb	r0, [r3, r1]
   d4e86:	4302      	orrs	r2, r0
   d4e88:	545a      	strb	r2, [r3, r1]
}
   d4e8a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4e8c:	2a00      	cmp	r2, #0
   d4e8e:	4613      	mov	r3, r2
   d4e90:	8904      	ldrh	r4, [r0, #8]
   d4e92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4e94:	bfb8      	it	lt
   d4e96:	1dd3      	addlt	r3, r2, #7
   d4e98:	10db      	asrs	r3, r3, #3
   d4e9a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e9e:	f002 0207 	and.w	r2, r2, #7
   d4ea2:	2301      	movs	r3, #1
   d4ea4:	fa03 f202 	lsl.w	r2, r3, r2
   d4ea8:	5c43      	ldrb	r3, [r0, r1]
   d4eaa:	405a      	eors	r2, r3
   d4eac:	e7cc      	b.n	d4e48 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4eae <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4eae:	b510      	push	{r4, lr}
   d4eb0:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4eb2:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4eb6:	2101      	movs	r1, #1
   d4eb8:	b280      	uxth	r0, r0
   d4eba:	f002 febc 	bl	d7c36 <digitalWrite>
   d4ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4ec0:	b118      	cbz	r0, d4eca <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4ec6:	f000 bf68 	b.w	d5d9a <_ZN8SPIClass14endTransactionEv>
}
   d4eca:	bd10      	pop	{r4, pc}

000d4ecc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4ecc:	b570      	push	{r4, r5, r6, lr}
   d4ece:	4604      	mov	r4, r0
   d4ed0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4ed2:	2600      	movs	r6, #0
   d4ed4:	f7ff fc38 	bl	d4748 <_ZN12Adafruit_GFXC1Ess>
   d4ed8:	4b11      	ldr	r3, [pc, #68]	; (d4f20 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4eda:	6023      	str	r3, [r4, #0]
   d4edc:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4ede:	b915      	cbnz	r5, d4ee6 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4ee0:	f002 feee 	bl	d7cc0 <_Z19__fetch_global_Wirev>
   d4ee4:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4ee6:	23ff      	movs	r3, #255	; 0xff
   d4ee8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4eec:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4ef0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4ef4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4ef8:	4b0a      	ldr	r3, [pc, #40]	; (d4f24 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4efa:	63a3      	str	r3, [r4, #56]	; 0x38
   d4efc:	2301      	movs	r3, #1
   d4efe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4f02:	9b05      	ldr	r3, [sp, #20]
   d4f04:	64a3      	str	r3, [r4, #72]	; 0x48
   d4f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4f0a:	9b06      	ldr	r3, [sp, #24]
   d4f0c:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4f0e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4f12:	6426      	str	r6, [r4, #64]	; 0x40
   d4f14:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4f18:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4f1a:	4620      	mov	r0, r4
   d4f1c:	bd70      	pop	{r4, r5, r6, pc}
   d4f1e:	bf00      	nop
   d4f20:	000d8c08 	.word	0x000d8c08
   d4f24:	000d8754 	.word	0x000d8754

000d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f2a:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4f2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4f2e:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4f30:	b190      	cbz	r0, d4f58 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4f32:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4f36:	f002 fd37 	bl	d79a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4f3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f3c:	6803      	ldr	r3, [r0, #0]
   d4f3e:	2100      	movs	r1, #0
   d4f40:	689b      	ldr	r3, [r3, #8]
   d4f42:	4798      	blx	r3
    WIRE_WRITE(c);
   d4f44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f46:	6803      	ldr	r3, [r0, #0]
   d4f48:	4629      	mov	r1, r5
   d4f4a:	689b      	ldr	r3, [r3, #8]
   d4f4c:	4798      	blx	r3
    wire->endTransmission();
   d4f4e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4f54:	f002 bd2f 	b.w	d79b6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4f58:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4f5c:	4601      	mov	r1, r0
   d4f5e:	b298      	uxth	r0, r3
   d4f60:	f002 fe69 	bl	d7c36 <digitalWrite>
  if(spi) {
   d4f64:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f66:	b120      	cbz	r0, d4f72 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4f68:	4629      	mov	r1, r5
}
   d4f6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4f6e:	f000 bf9b 	b.w	d5ea8 <_ZN8SPIClass8transferEh>
   d4f72:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f74:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4f76:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4f7a:	ea05 0107 	and.w	r1, r5, r7
   d4f7e:	b280      	uxth	r0, r0
   d4f80:	f002 fe59 	bl	d7c36 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4f84:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f88:	2101      	movs	r1, #1
   d4f8a:	b280      	uxth	r0, r0
   d4f8c:	f002 fe53 	bl	d7c36 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4f90:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f94:	2100      	movs	r1, #0
   d4f96:	b280      	uxth	r0, r0
   d4f98:	f002 fe4d 	bl	d7c36 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f9c:	3e01      	subs	r6, #1
   d4f9e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4fa2:	d1e8      	bne.n	d4f76 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fa6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4fa6:	b538      	push	{r3, r4, r5, lr}
   d4fa8:	4604      	mov	r4, r0
  TRANSACTION_START
   d4faa:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4fac:	460d      	mov	r5, r1
  TRANSACTION_START
   d4fae:	b180      	cbz	r0, d4fd2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4fb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4fb2:	f002 fceb 	bl	d798c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4fb6:	2d00      	cmp	r5, #0
   d4fb8:	4620      	mov	r0, r4
   d4fba:	bf14      	ite	ne
   d4fbc:	21a7      	movne	r1, #167	; 0xa7
   d4fbe:	21a6      	moveq	r1, #166	; 0xa6
   d4fc0:	f7ff ffb2 	bl	d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4fc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4fc6:	b188      	cbz	r0, d4fec <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4fc8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fce:	f002 bcdd 	b.w	d798c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4fd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4fd4:	b118      	cbz	r0, d4fde <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4fd6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4fda:	f000 fef7 	bl	d5dcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4fde:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4fe2:	2100      	movs	r1, #0
   d4fe4:	b280      	uxth	r0, r0
   d4fe6:	f002 fe26 	bl	d7c36 <digitalWrite>
   d4fea:	e7e4      	b.n	d4fb6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4fec:	4620      	mov	r0, r4
}
   d4fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ff2:	f7ff bf5c 	b.w	d4eae <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4ff6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4ffa:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4ffc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4ffe:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5000:	188f      	adds	r7, r1, r2
   d5002:	b340      	cbz	r0, d5056 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d5004:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5008:	f002 fcce 	bl	d79a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d500c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d500e:	6803      	ldr	r3, [r0, #0]
   d5010:	2100      	movs	r1, #0
   d5012:	689b      	ldr	r3, [r3, #8]
   d5014:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5016:	2601      	movs	r6, #1
    while(n--) {
   d5018:	42bd      	cmp	r5, r7
   d501a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d501c:	d017      	beq.n	d504e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d501e:	2e1f      	cmp	r6, #31
   d5020:	d90c      	bls.n	d503c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d5022:	f002 fcc8 	bl	d79b6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5026:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d502a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d502c:	f002 fcbc 	bl	d79a8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5030:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5032:	6803      	ldr	r3, [r0, #0]
   d5034:	2100      	movs	r1, #0
   d5036:	689b      	ldr	r3, [r3, #8]
   d5038:	4798      	blx	r3
        bytesOut = 1;
   d503a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d503c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d503e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5042:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5044:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5046:	689b      	ldr	r3, [r3, #8]
   d5048:	4798      	blx	r3
      bytesOut++;
   d504a:	b2f6      	uxtb	r6, r6
    while(n--) {
   d504c:	e7e4      	b.n	d5018 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d504e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d5052:	f002 bcb0 	b.w	d79b6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5056:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d505a:	4601      	mov	r1, r0
   d505c:	b298      	uxth	r0, r3
   d505e:	f002 fdea 	bl	d7c36 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5062:	42af      	cmp	r7, r5
   d5064:	d022      	beq.n	d50ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5066:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5068:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d506c:	b118      	cbz	r0, d5076 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d506e:	4649      	mov	r1, r9
   d5070:	f000 ff1a 	bl	d5ea8 <_ZN8SPIClass8transferEh>
   d5074:	e7f5      	b.n	d5062 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5076:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5078:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d507c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5080:	ea09 0108 	and.w	r1, r9, r8
   d5084:	b280      	uxth	r0, r0
   d5086:	f002 fdd6 	bl	d7c36 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d508a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d508e:	2101      	movs	r1, #1
   d5090:	b280      	uxth	r0, r0
   d5092:	f002 fdd0 	bl	d7c36 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5096:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d509a:	2100      	movs	r1, #0
   d509c:	b280      	uxth	r0, r0
   d509e:	f002 fdca 	bl	d7c36 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d50a2:	3e01      	subs	r6, #1
   d50a4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d50a8:	d1e8      	bne.n	d507c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d50aa:	e7da      	b.n	d5062 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d50ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d50b0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d50b0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d50b4:	1dda      	adds	r2, r3, #7
   d50b6:	bf48      	it	mi
   d50b8:	f103 020e 	addmi.w	r2, r3, #14
   d50bc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d50c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d50c2:	10d2      	asrs	r2, r2, #3
   d50c4:	435a      	muls	r2, r3
   d50c6:	2100      	movs	r1, #0
   d50c8:	f002 bf84 	b.w	d7fd4 <memset>

000d50cc <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d50cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d50d0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d50d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d50d4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d50d8:	4604      	mov	r4, r0
   d50da:	460f      	mov	r7, r1
   d50dc:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d50de:	b1b3      	cbz	r3, d510e <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d50e0:	4620      	mov	r0, r4
   d50e2:	f7ff ffe5 	bl	d50b0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d50e6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d50ea:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d50ee:	2820      	cmp	r0, #32
   d50f0:	dc1f      	bgt.n	d5132 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d50f2:	2320      	movs	r3, #32
   d50f4:	2201      	movs	r2, #1
   d50f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d50fa:	3820      	subs	r0, #32
   d50fc:	2373      	movs	r3, #115	; 0x73
   d50fe:	3973      	subs	r1, #115	; 0x73
   d5100:	9300      	str	r3, [sp, #0]
   d5102:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5106:	4b89      	ldr	r3, [pc, #548]	; (d532c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5108:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d510c:	e01f      	b.n	d514e <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d510e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5112:	1dd8      	adds	r0, r3, #7
   d5114:	bf48      	it	mi
   d5116:	f103 000e 	addmi.w	r0, r3, #14
   d511a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d511e:	10c0      	asrs	r0, r0, #3
   d5120:	4358      	muls	r0, r3
   d5122:	f000 fdab 	bl	d5c7c <malloc>
   d5126:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5128:	2800      	cmp	r0, #0
   d512a:	d1d9      	bne.n	d50e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d512c:	b004      	add	sp, #16
   d512e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5132:	2340      	movs	r3, #64	; 0x40
   d5134:	f04f 0c01 	mov.w	ip, #1
   d5138:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d513c:	2352      	movs	r3, #82	; 0x52
   d513e:	3840      	subs	r0, #64	; 0x40
   d5140:	3952      	subs	r1, #82	; 0x52
   d5142:	9300      	str	r3, [sp, #0]
   d5144:	4b7a      	ldr	r3, [pc, #488]	; (d5330 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5146:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d514a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d514e:	f340 024f 	sbfx	r2, r0, #1, #16
   d5152:	f341 014f 	sbfx	r1, r1, #1, #16
   d5156:	4620      	mov	r0, r4
   d5158:	f7ff fb0c 	bl	d4774 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d515c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d515e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5162:	2800      	cmp	r0, #0
   d5164:	d078      	beq.n	d5258 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5166:	2d00      	cmp	r5, #0
   d5168:	d174      	bne.n	d5254 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d516a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d516e:	2b20      	cmp	r3, #32
   d5170:	bf0c      	ite	eq
   d5172:	253c      	moveq	r5, #60	; 0x3c
   d5174:	253d      	movne	r5, #61	; 0x3d
   d5176:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d517a:	f1b8 0f00 	cmp.w	r8, #0
   d517e:	d001      	beq.n	d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5180:	f002 fc08 	bl	d7994 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5184:	b1fe      	cbz	r6, d51c6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5186:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d518a:	2800      	cmp	r0, #0
   d518c:	db1b      	blt.n	d51c6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d518e:	2101      	movs	r1, #1
   d5190:	b280      	uxth	r0, r0
   d5192:	f002 fd3f 	bl	d7c14 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5196:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d519a:	2101      	movs	r1, #1
   d519c:	b280      	uxth	r0, r0
   d519e:	f002 fd4a 	bl	d7c36 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d51a2:	2001      	movs	r0, #1
   d51a4:	f002 f962 	bl	d746c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d51a8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d51ac:	2100      	movs	r1, #0
   d51ae:	b280      	uxth	r0, r0
   d51b0:	f002 fd41 	bl	d7c36 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d51b4:	200a      	movs	r0, #10
   d51b6:	f002 f959 	bl	d746c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d51ba:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d51be:	2101      	movs	r1, #1
   d51c0:	b280      	uxth	r0, r0
   d51c2:	f002 fd38 	bl	d7c36 <digitalWrite>
  TRANSACTION_START
   d51c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51c8:	2800      	cmp	r0, #0
   d51ca:	d074      	beq.n	d52b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d51cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d51ce:	f002 fbdd 	bl	d798c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d51d2:	2204      	movs	r2, #4
   d51d4:	4957      	ldr	r1, [pc, #348]	; (d5334 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d51d6:	4620      	mov	r0, r4
   d51d8:	f7ff ff0d 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d51dc:	7aa1      	ldrb	r1, [r4, #10]
   d51de:	3901      	subs	r1, #1
   d51e0:	b2c9      	uxtb	r1, r1
   d51e2:	4620      	mov	r0, r4
   d51e4:	f7ff fea0 	bl	d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d51e8:	4953      	ldr	r1, [pc, #332]	; (d5338 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d51ea:	2204      	movs	r2, #4
   d51ec:	4620      	mov	r0, r4
   d51ee:	f7ff ff02 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d51f2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d51f6:	2b01      	cmp	r3, #1
   d51f8:	bf0c      	ite	eq
   d51fa:	2110      	moveq	r1, #16
   d51fc:	2114      	movne	r1, #20
   d51fe:	4620      	mov	r0, r4
   d5200:	f7ff fe92 	bl	d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5204:	2204      	movs	r2, #4
   d5206:	494d      	ldr	r1, [pc, #308]	; (d533c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5208:	4620      	mov	r0, r4
   d520a:	f7ff fef4 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d520e:	68a3      	ldr	r3, [r4, #8]
   d5210:	4a4b      	ldr	r2, [pc, #300]	; (d5340 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d5212:	4293      	cmp	r3, r2
   d5214:	d15c      	bne.n	d52d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5216:	494b      	ldr	r1, [pc, #300]	; (d5344 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5218:	2204      	movs	r2, #4
   d521a:	4620      	mov	r0, r4
   d521c:	f7ff feeb 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5220:	21d9      	movs	r1, #217	; 0xd9
   d5222:	4620      	mov	r0, r4
   d5224:	f7ff fe80 	bl	d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5228:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d522c:	2b01      	cmp	r3, #1
   d522e:	bf0c      	ite	eq
   d5230:	2122      	moveq	r1, #34	; 0x22
   d5232:	21f1      	movne	r1, #241	; 0xf1
   d5234:	4620      	mov	r0, r4
   d5236:	f7ff fe77 	bl	d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d523a:	4620      	mov	r0, r4
   d523c:	4942      	ldr	r1, [pc, #264]	; (d5348 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d523e:	2206      	movs	r2, #6
   d5240:	f7ff fed9 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5244:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5246:	2800      	cmp	r0, #0
   d5248:	d063      	beq.n	d5312 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d524a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d524c:	f002 fb9e 	bl	d798c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5250:	2001      	movs	r0, #1
   d5252:	e76b      	b.n	d512c <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5254:	b26d      	sxtb	r5, r5
   d5256:	e78e      	b.n	d5176 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5258:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d525c:	2101      	movs	r1, #1
   d525e:	b280      	uxth	r0, r0
   d5260:	f002 fcd8 	bl	d7c14 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5264:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5268:	2101      	movs	r1, #1
   d526a:	b280      	uxth	r0, r0
   d526c:	f002 fcd2 	bl	d7c14 <pinMode>
    SSD1306_DESELECT
   d5270:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5274:	2101      	movs	r1, #1
   d5276:	b280      	uxth	r0, r0
   d5278:	f002 fcdd 	bl	d7c36 <digitalWrite>
    if(spi) { // Hardware SPI
   d527c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d527e:	b13d      	cbz	r5, d5290 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5280:	f1b8 0f00 	cmp.w	r8, #0
   d5284:	f43f af7e 	beq.w	d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5288:	4628      	mov	r0, r5
   d528a:	f000 fd75 	bl	d5d78 <_ZN8SPIClass5beginEv>
   d528e:	e779      	b.n	d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5290:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5294:	2101      	movs	r1, #1
   d5296:	b280      	uxth	r0, r0
   d5298:	f002 fcbc 	bl	d7c14 <pinMode>
      pinMode(clkPin , OUTPUT);
   d529c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d52a0:	2101      	movs	r1, #1
   d52a2:	b280      	uxth	r0, r0
   d52a4:	f002 fcb6 	bl	d7c14 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d52a8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d52ac:	4629      	mov	r1, r5
   d52ae:	b280      	uxth	r0, r0
   d52b0:	f002 fcc1 	bl	d7c36 <digitalWrite>
   d52b4:	e766      	b.n	d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d52b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d52b8:	b118      	cbz	r0, d52c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d52ba:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d52be:	f000 fd85 	bl	d5dcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d52c2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d52c6:	2100      	movs	r1, #0
   d52c8:	b280      	uxth	r0, r0
   d52ca:	f002 fcb4 	bl	d7c36 <digitalWrite>
   d52ce:	e780      	b.n	d51d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d52d0:	4a1e      	ldr	r2, [pc, #120]	; (d534c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d52d2:	4293      	cmp	r3, r2
   d52d4:	d10e      	bne.n	d52f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d52d6:	491e      	ldr	r1, [pc, #120]	; (d5350 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d52d8:	2203      	movs	r2, #3
   d52da:	4620      	mov	r0, r4
   d52dc:	f7ff fe8b 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d52e0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d52e4:	2b01      	cmp	r3, #1
   d52e6:	bf0c      	ite	eq
   d52e8:	219f      	moveq	r1, #159	; 0x9f
   d52ea:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d52ec:	4620      	mov	r0, r4
   d52ee:	f7ff fe1b 	bl	d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d52f2:	e795      	b.n	d5220 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d52f4:	4a17      	ldr	r2, [pc, #92]	; (d5354 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d52f6:	4293      	cmp	r3, r2
   d52f8:	d192      	bne.n	d5220 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d52fa:	4917      	ldr	r1, [pc, #92]	; (d5358 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d52fc:	2203      	movs	r2, #3
   d52fe:	4620      	mov	r0, r4
   d5300:	f7ff fe79 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5304:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5308:	2b01      	cmp	r3, #1
   d530a:	bf0c      	ite	eq
   d530c:	2110      	moveq	r1, #16
   d530e:	21af      	movne	r1, #175	; 0xaf
   d5310:	e7ec      	b.n	d52ec <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5312:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5316:	2101      	movs	r1, #1
   d5318:	b280      	uxth	r0, r0
   d531a:	f002 fc8c 	bl	d7c36 <digitalWrite>
   d531e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5320:	2800      	cmp	r0, #0
   d5322:	d095      	beq.n	d5250 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5324:	f000 fd39 	bl	d5d9a <_ZN8SPIClass14endTransactionEv>
   d5328:	e792      	b.n	d5250 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d532a:	bf00      	nop
   d532c:	000d8a20 	.word	0x000d8a20
   d5330:	000d8760 	.word	0x000d8760
   d5334:	000d8c68 	.word	0x000d8c68
   d5338:	000d8c6c 	.word	0x000d8c6c
   d533c:	000d8c70 	.word	0x000d8c70
   d5340:	00200080 	.word	0x00200080
   d5344:	000d8c7a 	.word	0x000d8c7a
   d5348:	000d8c74 	.word	0x000d8c74
   d534c:	00400080 	.word	0x00400080
   d5350:	000d8c7e 	.word	0x000d8c7e
   d5354:	00100060 	.word	0x00100060
   d5358:	000d8c81 	.word	0x000d8c81

000d535c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d535c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d535e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5360:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5364:	db3d      	blt.n	d53e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5366:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d536a:	4294      	cmp	r4, r2
   d536c:	dd39      	ble.n	d53e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d536e:	2900      	cmp	r1, #0
      w += x;
   d5370:	bfbe      	ittt	lt
   d5372:	185b      	addlt	r3, r3, r1
   d5374:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5376:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5378:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d537c:	18ce      	adds	r6, r1, r3
   d537e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5380:	bfc4      	itt	gt
   d5382:	1a63      	subgt	r3, r4, r1
   d5384:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5386:	2b00      	cmp	r3, #0
   d5388:	dd2b      	ble.n	d53e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d538a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d538c:	10d6      	asrs	r6, r2, #3
   d538e:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5392:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5394:	f002 0007 	and.w	r0, r2, #7
   d5398:	2201      	movs	r2, #1
   d539a:	4082      	lsls	r2, r0
      switch(color) {
   d539c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d539e:	b2d2      	uxtb	r2, r2
      switch(color) {
   d53a0:	d016      	beq.n	d53d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d53a2:	2d02      	cmp	r5, #2
   d53a4:	d00b      	beq.n	d53be <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d53a6:	b9e5      	cbnz	r5, d53e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d53a8:	43d2      	mvns	r2, r2
   d53aa:	b2d2      	uxtb	r2, r2
   d53ac:	440b      	add	r3, r1
   d53ae:	4299      	cmp	r1, r3
   d53b0:	d017      	beq.n	d53e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d53b2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d53b6:	4010      	ands	r0, r2
   d53b8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d53bc:	e7f7      	b.n	d53ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d53be:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d53c0:	4299      	cmp	r1, r3
   d53c2:	d00e      	beq.n	d53e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d53c4:	f811 0b01 	ldrb.w	r0, [r1], #1
   d53c8:	4050      	eors	r0, r2
   d53ca:	f801 0c01 	strb.w	r0, [r1, #-1]
   d53ce:	e7f7      	b.n	d53c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d53d0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d53d2:	4299      	cmp	r1, r3
   d53d4:	d005      	beq.n	d53e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d53d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   d53da:	4310      	orrs	r0, r2
   d53dc:	f801 0c01 	strb.w	r0, [r1, #-1]
   d53e0:	e7f7      	b.n	d53d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d53e2:	bd70      	pop	{r4, r5, r6, pc}

000d53e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d53e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d53e6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d53e8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d53ec:	db76      	blt.n	d54dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d53ee:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d53f2:	42a9      	cmp	r1, r5
   d53f4:	da72      	bge.n	d54dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d53f6:	2a00      	cmp	r2, #0
      __h += __y;
   d53f8:	bfbc      	itt	lt
   d53fa:	18d2      	addlt	r2, r2, r3
   d53fc:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d53fe:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5402:	bfb8      	it	lt
   d5404:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5406:	18d7      	adds	r7, r2, r3
   d5408:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d540a:	bfc4      	itt	gt
   d540c:	1aa3      	subgt	r3, r4, r2
   d540e:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5410:	2b00      	cmp	r3, #0
   d5412:	dd63      	ble.n	d54dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5414:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5418:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d541a:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d541e:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5422:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5424:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5428:	d023      	beq.n	d5472 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d542a:	f1c2 0208 	rsb	r2, r2, #8
   d542e:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5430:	4d2c      	ldr	r5, [pc, #176]	; (d54e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5432:	4293      	cmp	r3, r2
   d5434:	bf3c      	itt	cc
   d5436:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d543a:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d543e:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5440:	bf3c      	itt	cc
   d5442:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5446:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d544a:	2e01      	cmp	r6, #1
   d544c:	d007      	beq.n	d545e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d544e:	2e02      	cmp	r6, #2
   d5450:	d02e      	beq.n	d54b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5452:	b94e      	cbnz	r6, d5468 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5454:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5458:	ea2c 0505 	bic.w	r5, ip, r5
   d545c:	e003      	b.n	d5466 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d545e:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5462:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5466:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5468:	4293      	cmp	r3, r2
   d546a:	d337      	bcc.n	d54dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d546c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5470:	440c      	add	r4, r1
        h -= mod;
   d5472:	1a9a      	subs	r2, r3, r2
   d5474:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5476:	2a07      	cmp	r2, #7
   d5478:	d90e      	bls.n	d5498 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d547a:	2e02      	cmp	r6, #2
   d547c:	d11d      	bne.n	d54ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d547e:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5480:	7821      	ldrb	r1, [r4, #0]
   d5482:	43c9      	mvns	r1, r1
   d5484:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5486:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5488:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d548c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d548e:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5490:	440c      	add	r4, r1
            } while(h >= 8);
   d5492:	d8f5      	bhi.n	d5480 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5494:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5498:	b302      	cbz	r2, d54dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d549a:	4b13      	ldr	r3, [pc, #76]	; (d54e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d549c:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d549e:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d54a0:	d019      	beq.n	d54d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d54a2:	2e02      	cmp	r6, #2
   d54a4:	d01b      	beq.n	d54de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d54a6:	b9ce      	cbnz	r6, d54dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d54a8:	7822      	ldrb	r2, [r4, #0]
   d54aa:	ea22 0303 	bic.w	r3, r2, r3
   d54ae:	e014      	b.n	d54da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d54b0:	f817 c001 	ldrb.w	ip, [r7, r1]
   d54b4:	ea85 050c 	eor.w	r5, r5, ip
   d54b8:	e7d5      	b.n	d5466 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d54ba:	2e00      	cmp	r6, #0
   d54bc:	bf14      	ite	ne
   d54be:	25ff      	movne	r5, #255	; 0xff
   d54c0:	2500      	moveq	r5, #0
   d54c2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d54c4:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d54c6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d54c8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d54cc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d54ce:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d54d0:	440c      	add	r4, r1
            } while(h >= 8);
   d54d2:	d8f7      	bhi.n	d54c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d54d4:	e7de      	b.n	d5494 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d54d6:	7822      	ldrb	r2, [r4, #0]
   d54d8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d54da:	7023      	strb	r3, [r4, #0]
}
   d54dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d54de:	7822      	ldrb	r2, [r4, #0]
   d54e0:	4053      	eors	r3, r2
   d54e2:	e7fa      	b.n	d54da <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d54e4:	000d8c58 	.word	0x000d8c58
   d54e8:	000d8c60 	.word	0x000d8c60

000d54ec <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d54ec:	b470      	push	{r4, r5, r6}
   d54ee:	4614      	mov	r4, r2
  switch(rotation) {
   d54f0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d54f2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d54f6:	2a02      	cmp	r2, #2
   d54f8:	d00d      	beq.n	d5516 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d54fa:	2a03      	cmp	r2, #3
   d54fc:	d018      	beq.n	d5530 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d54fe:	2a01      	cmp	r2, #1
   d5500:	d111      	bne.n	d5526 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5502:	8902      	ldrh	r2, [r0, #8]
   d5504:	43e4      	mvns	r4, r4
   d5506:	4414      	add	r4, r2
   d5508:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d550a:	9603      	str	r6, [sp, #12]
   d550c:	460a      	mov	r2, r1
   d550e:	4621      	mov	r1, r4
}
   d5510:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5512:	f7ff bf67 	b.w	d53e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5516:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5518:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d551a:	43e4      	mvns	r4, r4
    x -= (w-1);
   d551c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d551e:	4414      	add	r4, r2
    x -= (w-1);
   d5520:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5522:	b224      	sxth	r4, r4
    x -= (w-1);
   d5524:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5526:	9603      	str	r6, [sp, #12]
   d5528:	4622      	mov	r2, r4
}
   d552a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d552c:	f7ff bf16 	b.w	d535c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5530:	8945      	ldrh	r5, [r0, #10]
   d5532:	4419      	add	r1, r3
   d5534:	1a69      	subs	r1, r5, r1
   d5536:	b209      	sxth	r1, r1
    break;
   d5538:	e7e7      	b.n	d550a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d553a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d553a:	b430      	push	{r4, r5}
   d553c:	4614      	mov	r4, r2
  switch(rotation) {
   d553e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5540:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5544:	2a02      	cmp	r2, #2
   d5546:	d00d      	beq.n	d5564 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5548:	2a03      	cmp	r2, #3
   d554a:	d018      	beq.n	d557e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d554c:	2a01      	cmp	r2, #1
   d554e:	d111      	bne.n	d5574 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5550:	18e2      	adds	r2, r4, r3
   d5552:	8904      	ldrh	r4, [r0, #8]
   d5554:	1aa4      	subs	r4, r4, r2
   d5556:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5558:	9502      	str	r5, [sp, #8]
   d555a:	460a      	mov	r2, r1
   d555c:	4621      	mov	r1, r4
}
   d555e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5560:	f7ff befc 	b.w	d535c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5564:	8902      	ldrh	r2, [r0, #8]
   d5566:	43c9      	mvns	r1, r1
   d5568:	4411      	add	r1, r2
    y -= (h-1);
   d556a:	18e2      	adds	r2, r4, r3
   d556c:	8944      	ldrh	r4, [r0, #10]
   d556e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5570:	b209      	sxth	r1, r1
    y -= (h-1);
   d5572:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5574:	9502      	str	r5, [sp, #8]
   d5576:	4622      	mov	r2, r4
}
   d5578:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d557a:	f7ff bf33 	b.w	d53e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d557e:	8942      	ldrh	r2, [r0, #10]
   d5580:	43c9      	mvns	r1, r1
   d5582:	4411      	add	r1, r2
   d5584:	b209      	sxth	r1, r1
    break;
   d5586:	e7e7      	b.n	d5558 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5588 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d558c:	4604      	mov	r4, r0
  TRANSACTION_START
   d558e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5590:	2800      	cmp	r0, #0
   d5592:	d042      	beq.n	d561a <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5594:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5596:	f002 f9f9 	bl	d798c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d559a:	4947      	ldr	r1, [pc, #284]	; (d56b8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d559c:	2205      	movs	r2, #5
   d559e:	4620      	mov	r0, r4
   d55a0:	f7ff fd29 	bl	d4ff6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d55a4:	7a21      	ldrb	r1, [r4, #8]
   d55a6:	3901      	subs	r1, #1
   d55a8:	4620      	mov	r0, r4
   d55aa:	b2c9      	uxtb	r1, r1
   d55ac:	f7ff fcbc 	bl	d4f28 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d55b0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d55b4:	1dde      	adds	r6, r3, #7
   d55b6:	bf48      	it	mi
   d55b8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d55bc:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d55c0:	8923      	ldrh	r3, [r4, #8]
   d55c2:	10f6      	asrs	r6, r6, #3
   d55c4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d55c8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d55cc:	2800      	cmp	r0, #0
   d55ce:	d03a      	beq.n	d5646 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d55d0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d55d4:	f002 f9e8 	bl	d79a8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d55d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55da:	6803      	ldr	r3, [r0, #0]
   d55dc:	2140      	movs	r1, #64	; 0x40
   d55de:	689b      	ldr	r3, [r3, #8]
   d55e0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d55e2:	2701      	movs	r7, #1
    while(count--) {
   d55e4:	42b5      	cmp	r5, r6
   d55e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55e8:	d024      	beq.n	d5634 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d55ea:	2f1f      	cmp	r7, #31
   d55ec:	d90c      	bls.n	d5608 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d55ee:	f002 f9e2 	bl	d79b6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d55f2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d55f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55f8:	f002 f9d6 	bl	d79a8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d55fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55fe:	6803      	ldr	r3, [r0, #0]
   d5600:	2140      	movs	r1, #64	; 0x40
   d5602:	689b      	ldr	r3, [r3, #8]
   d5604:	4798      	blx	r3
        bytesOut = 1;
   d5606:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5608:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d560a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d560e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5610:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5612:	689b      	ldr	r3, [r3, #8]
   d5614:	4798      	blx	r3
      bytesOut++;
   d5616:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5618:	e7e4      	b.n	d55e4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d561a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d561c:	b118      	cbz	r0, d5626 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d561e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5622:	f000 fbd3 	bl	d5dcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5626:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d562a:	2100      	movs	r1, #0
   d562c:	b280      	uxth	r0, r0
   d562e:	f002 fb02 	bl	d7c36 <digitalWrite>
   d5632:	e7b2      	b.n	d559a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5634:	f002 f9bf 	bl	d79b6 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5638:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d563a:	b378      	cbz	r0, d569c <_ZN16Adafruit_SSD13067displayEv+0x114>
   d563c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d563e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5642:	f002 b9a3 	b.w	d798c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5646:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d564a:	2101      	movs	r1, #1
   d564c:	b280      	uxth	r0, r0
   d564e:	f002 faf2 	bl	d7c36 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5652:	42b5      	cmp	r5, r6
   d5654:	d0f0      	beq.n	d5638 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5656:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5658:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d565c:	b118      	cbz	r0, d5666 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d565e:	4649      	mov	r1, r9
   d5660:	f000 fc22 	bl	d5ea8 <_ZN8SPIClass8transferEh>
   d5664:	e7f5      	b.n	d5652 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5666:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5668:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d566c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5670:	ea09 0108 	and.w	r1, r9, r8
   d5674:	b280      	uxth	r0, r0
   d5676:	f002 fade 	bl	d7c36 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d567a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d567e:	2101      	movs	r1, #1
   d5680:	b280      	uxth	r0, r0
   d5682:	f002 fad8 	bl	d7c36 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5686:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d568a:	2100      	movs	r1, #0
   d568c:	b280      	uxth	r0, r0
   d568e:	f002 fad2 	bl	d7c36 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5692:	3f01      	subs	r7, #1
   d5694:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5698:	d1e8      	bne.n	d566c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d569a:	e7da      	b.n	d5652 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d569c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d56a0:	2101      	movs	r1, #1
   d56a2:	b280      	uxth	r0, r0
   d56a4:	f002 fac7 	bl	d7c36 <digitalWrite>
   d56a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d56aa:	b118      	cbz	r0, d56b4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d56ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d56b0:	f000 bb73 	b.w	d5d9a <_ZN8SPIClass14endTransactionEv>
}
   d56b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d56b8:	000d8c84 	.word	0x000d8c84

000d56bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <netdb_freeaddrinfo+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	689b      	ldr	r3, [r3, #8]
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	00030268 	.word	0x00030268

000d56cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <netdb_getaddrinfo+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	68db      	ldr	r3, [r3, #12]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030268 	.word	0x00030268

000d56dc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <HAL_Pin_Mode+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	689b      	ldr	r3, [r3, #8]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	0003022c 	.word	0x0003022c

000d56ec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <HAL_Get_Pin_Mode+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	68db      	ldr	r3, [r3, #12]
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	0003022c 	.word	0x0003022c

000d56fc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <HAL_GPIO_Write+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	691b      	ldr	r3, [r3, #16]
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	0003022c 	.word	0x0003022c

000d570c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <HAL_GPIO_Read+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	695b      	ldr	r3, [r3, #20]
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	0003022c 	.word	0x0003022c

000d571c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <HAL_RNG_GetRandomNumber+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	685b      	ldr	r3, [r3, #4]
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030218 	.word	0x00030218

000d572c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <HAL_Delay_Microseconds+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	68db      	ldr	r3, [r3, #12]
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030218 	.word	0x00030218

000d573c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	695b      	ldr	r3, [r3, #20]
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	00030218 	.word	0x00030218

000d574c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <hal_ble_stack_init+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	689b      	ldr	r3, [r3, #8]
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	00030278 	.word	0x00030278

000d575c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <hal_ble_gap_set_advertising_data+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	00030278 	.word	0x00030278

000d576c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <hal_ble_gap_set_scan_response_data+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030278 	.word	0x00030278

000d577c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <hal_ble_gap_start_advertising+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	00030278 	.word	0x00030278

000d578c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b03      	ldr	r3, [pc, #12]	; (d579c <hal_ble_gap_disconnect+0x10>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5796:	9301      	str	r3, [sp, #4]
   d5798:	bd08      	pop	{r3, pc}
   d579a:	0000      	.short	0x0000
   d579c:	00030278 	.word	0x00030278

000d57a0 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b03      	ldr	r3, [pc, #12]	; (d57b0 <hal_ble_gatt_server_add_service+0x10>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d57aa:	9301      	str	r3, [sp, #4]
   d57ac:	bd08      	pop	{r3, pc}
   d57ae:	0000      	.short	0x0000
   d57b0:	00030278 	.word	0x00030278

000d57b4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b03      	ldr	r3, [pc, #12]	; (d57c4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d57be:	9301      	str	r3, [sp, #4]
   d57c0:	bd08      	pop	{r3, pc}
   d57c2:	0000      	.short	0x0000
   d57c4:	00030278 	.word	0x00030278

000d57c8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b03      	ldr	r3, [pc, #12]	; (d57d8 <hal_ble_gatt_client_write_with_response+0x10>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d57d2:	9301      	str	r3, [sp, #4]
   d57d4:	bd08      	pop	{r3, pc}
   d57d6:	0000      	.short	0x0000
   d57d8:	00030278 	.word	0x00030278

000d57dc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b03      	ldr	r3, [pc, #12]	; (d57ec <hal_ble_gatt_client_write_without_response+0x10>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d57e6:	9301      	str	r3, [sp, #4]
   d57e8:	bd08      	pop	{r3, pc}
   d57ea:	0000      	.short	0x0000
   d57ec:	00030278 	.word	0x00030278

000d57f0 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b03      	ldr	r3, [pc, #12]	; (d5800 <hal_ble_gap_get_connection_info+0x10>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d57fa:	9301      	str	r3, [sp, #4]
   d57fc:	bd08      	pop	{r3, pc}
   d57fe:	0000      	.short	0x0000
   d5800:	00030278 	.word	0x00030278

000d5804 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b03      	ldr	r3, [pc, #12]	; (d5814 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d580e:	9301      	str	r3, [sp, #4]
   d5810:	bd08      	pop	{r3, pc}
   d5812:	0000      	.short	0x0000
   d5814:	00030278 	.word	0x00030278

000d5818 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b03      	ldr	r3, [pc, #12]	; (d5828 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5822:	9301      	str	r3, [sp, #4]
   d5824:	bd08      	pop	{r3, pc}
   d5826:	0000      	.short	0x0000
   d5828:	00030278 	.word	0x00030278

000d582c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b03      	ldr	r3, [pc, #12]	; (d583c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5836:	9301      	str	r3, [sp, #4]
   d5838:	bd08      	pop	{r3, pc}
   d583a:	0000      	.short	0x0000
   d583c:	00030278 	.word	0x00030278

000d5840 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b03      	ldr	r3, [pc, #12]	; (d5850 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d584a:	9301      	str	r3, [sp, #4]
   d584c:	bd08      	pop	{r3, pc}
   d584e:	0000      	.short	0x0000
   d5850:	00030278 	.word	0x00030278

000d5854 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <os_mutex_create+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030248 	.word	0x00030248

000d5864 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <os_mutex_destroy+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	00030248 	.word	0x00030248

000d5874 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <os_mutex_recursive_create+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	00030248 	.word	0x00030248

000d5884 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <os_mutex_recursive_destroy+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	00030248 	.word	0x00030248

000d5894 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <os_mutex_recursive_lock+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	00030248 	.word	0x00030248

000d58a4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <os_mutex_recursive_unlock+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	00030248 	.word	0x00030248

000d58b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <inet_inet_ntop+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	695b      	ldr	r3, [r3, #20]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	00030264 	.word	0x00030264

000d58c4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <hal_usart_init+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	681b      	ldr	r3, [r3, #0]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	0003023c 	.word	0x0003023c

000d58d4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <hal_usart_write+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	68db      	ldr	r3, [r3, #12]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	0003023c 	.word	0x0003023c

000d58e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <hal_usart_available+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	691b      	ldr	r3, [r3, #16]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	0003023c 	.word	0x0003023c

000d58f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <hal_usart_read+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	695b      	ldr	r3, [r3, #20]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	0003023c 	.word	0x0003023c

000d5904 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <hal_usart_peek+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	699b      	ldr	r3, [r3, #24]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	0003023c 	.word	0x0003023c

000d5914 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <hal_usart_flush+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	69db      	ldr	r3, [r3, #28]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	0003023c 	.word	0x0003023c

000d5924 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <hal_usart_is_enabled+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	6a1b      	ldr	r3, [r3, #32]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	0003023c 	.word	0x0003023c

000d5934 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <hal_usart_available_data_for_write+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	0003023c 	.word	0x0003023c

000d5944 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <hal_i2c_set_speed+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	681b      	ldr	r3, [r3, #0]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030228 	.word	0x00030228

000d5954 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <hal_i2c_begin+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	68db      	ldr	r3, [r3, #12]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030228 	.word	0x00030228

000d5964 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <hal_i2c_begin_transmission+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	699b      	ldr	r3, [r3, #24]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030228 	.word	0x00030228

000d5974 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <hal_i2c_end_transmission+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	69db      	ldr	r3, [r3, #28]
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030228 	.word	0x00030228

000d5984 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <hal_i2c_write+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6a1b      	ldr	r3, [r3, #32]
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030228 	.word	0x00030228

000d5994 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <hal_i2c_available+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030228 	.word	0x00030228

000d59a4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <hal_i2c_read+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030228 	.word	0x00030228

000d59b4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <hal_i2c_peek+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030228 	.word	0x00030228

000d59c4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <hal_i2c_flush+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	00030228 	.word	0x00030228

000d59d4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <hal_i2c_is_enabled+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	00030228 	.word	0x00030228

000d59e4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <hal_i2c_init+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	00030228 	.word	0x00030228

000d59f4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <hal_spi_begin+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	681b      	ldr	r3, [r3, #0]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030230 	.word	0x00030230

000d5a04 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <hal_spi_transfer+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	695b      	ldr	r3, [r3, #20]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030230 	.word	0x00030230

000d5a14 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <hal_spi_init+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	69db      	ldr	r3, [r3, #28]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	00030230 	.word	0x00030230

000d5a24 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <hal_spi_is_enabled+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	6a1b      	ldr	r3, [r3, #32]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	00030230 	.word	0x00030230

000d5a34 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <hal_spi_info+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030230 	.word	0x00030230

000d5a44 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <hal_spi_set_settings+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030230 	.word	0x00030230

000d5a54 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <hal_spi_acquire+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030230 	.word	0x00030230

000d5a64 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <hal_spi_release+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030230 	.word	0x00030230

000d5a74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <HAL_USB_USART_Init+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	681b      	ldr	r3, [r3, #0]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	0003024c 	.word	0x0003024c

000d5a84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <HAL_USB_USART_Available_Data+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	691b      	ldr	r3, [r3, #16]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	0003024c 	.word	0x0003024c

000d5a94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	695b      	ldr	r3, [r3, #20]
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	0003024c 	.word	0x0003024c

000d5aa4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <HAL_USB_USART_Receive_Data+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	699b      	ldr	r3, [r3, #24]
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	0003024c 	.word	0x0003024c

000d5ab4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <HAL_USB_USART_Send_Data+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	69db      	ldr	r3, [r3, #28]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	0003024c 	.word	0x0003024c

000d5ac4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <HAL_USB_USART_Flush_Data+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	6a1b      	ldr	r3, [r3, #32]
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	0003024c 	.word	0x0003024c

000d5ad4 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <LED_SetSignalingColor+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	685b      	ldr	r3, [r3, #4]
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030260 	.word	0x00030260

000d5ae4 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <LED_Signaling_Start+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	689b      	ldr	r3, [r3, #8]
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030260 	.word	0x00030260

000d5af4 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <LED_Signaling_Stop+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	68db      	ldr	r3, [r3, #12]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030260 	.word	0x00030260

000d5b04 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <LED_SetBrightness+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	691b      	ldr	r3, [r3, #16]
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030260 	.word	0x00030260

000d5b14 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <LED_RGB_IsOverRidden+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	699b      	ldr	r3, [r3, #24]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030260 	.word	0x00030260

000d5b24 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <LED_On+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	69db      	ldr	r3, [r3, #28]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030260 	.word	0x00030260

000d5b34 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <panic_+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030260 	.word	0x00030260

000d5b44 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <log_message+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	00030260 	.word	0x00030260

000d5b54 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <set_system_mode+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	685b      	ldr	r3, [r3, #4]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	00030220 	.word	0x00030220

000d5b64 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <system_delay_ms+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	695b      	ldr	r3, [r3, #20]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	00030220 	.word	0x00030220

000d5b74 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <system_thread_set_state+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	00030220 	.word	0x00030220

000d5b84 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b03      	ldr	r3, [pc, #12]	; (d5b94 <system_ctrl_set_app_request_handler+0x10>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5b8e:	9301      	str	r3, [sp, #4]
   d5b90:	bd08      	pop	{r3, pc}
   d5b92:	0000      	.short	0x0000
   d5b94:	00030220 	.word	0x00030220

000d5b98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b03      	ldr	r3, [pc, #12]	; (d5ba8 <system_ctrl_set_result+0x10>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5ba2:	9301      	str	r3, [sp, #4]
   d5ba4:	bd08      	pop	{r3, pc}
   d5ba6:	0000      	.short	0x0000
   d5ba8:	00030220 	.word	0x00030220

000d5bac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <network_connect+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	685b      	ldr	r3, [r3, #4]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	00030240 	.word	0x00030240

000d5bbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <network_connecting+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	689b      	ldr	r3, [r3, #8]
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	00030240 	.word	0x00030240

000d5bcc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <network_disconnect+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	68db      	ldr	r3, [r3, #12]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030240 	.word	0x00030240

000d5bdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <network_ready+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	691b      	ldr	r3, [r3, #16]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030240 	.word	0x00030240

000d5bec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <network_on+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	695b      	ldr	r3, [r3, #20]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030240 	.word	0x00030240

000d5bfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <network_off+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	699b      	ldr	r3, [r3, #24]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030240 	.word	0x00030240

000d5c0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <network_listen+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	69db      	ldr	r3, [r3, #28]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	00030240 	.word	0x00030240

000d5c1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <network_listening+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	6a1b      	ldr	r3, [r3, #32]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	00030240 	.word	0x00030240

000d5c2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <network_set_listen_timeout+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	00030240 	.word	0x00030240

000d5c3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <network_get_listen_timeout+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030240 	.word	0x00030240

000d5c4c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <network_is_on+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030240 	.word	0x00030240

000d5c5c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <network_is_off+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030240 	.word	0x00030240

000d5c6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030244 	.word	0x00030244

000d5c7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <malloc+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	681b      	ldr	r3, [r3, #0]
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	0003021c 	.word	0x0003021c

000d5c8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <free+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	685b      	ldr	r3, [r3, #4]
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	0003021c 	.word	0x0003021c

000d5c9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <realloc+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	689b      	ldr	r3, [r3, #8]
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	0003021c 	.word	0x0003021c

000d5cac <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <vsnprintf+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	0003021c 	.word	0x0003021c

000d5cbc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <abort+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	0003021c 	.word	0x0003021c

000d5ccc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <newlib_impure_ptr_callback+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	0003021c 	.word	0x0003021c

000d5cdc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cdc:	2200      	movs	r2, #0
   d5cde:	6840      	ldr	r0, [r0, #4]
   d5ce0:	4611      	mov	r1, r2
   d5ce2:	f7ff bf9b 	b.w	d5c1c <network_listening>

000d5ce6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5ce6:	2200      	movs	r2, #0
   d5ce8:	6840      	ldr	r0, [r0, #4]
   d5cea:	4611      	mov	r1, r2
   d5cec:	f7ff bfa6 	b.w	d5c3c <network_get_listen_timeout>

000d5cf0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5cf0:	6840      	ldr	r0, [r0, #4]
   d5cf2:	2200      	movs	r2, #0
   d5cf4:	f7ff bf9a 	b.w	d5c2c <network_set_listen_timeout>

000d5cf8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cf8:	6840      	ldr	r0, [r0, #4]
   d5cfa:	2200      	movs	r2, #0
   d5cfc:	f081 0101 	eor.w	r1, r1, #1
   d5d00:	f7ff bf84 	b.w	d5c0c <network_listen>

000d5d04 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d04:	2300      	movs	r3, #0
   d5d06:	6840      	ldr	r0, [r0, #4]
   d5d08:	461a      	mov	r2, r3
   d5d0a:	4619      	mov	r1, r3
   d5d0c:	f7ff bf76 	b.w	d5bfc <network_off>

000d5d10 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d10:	2300      	movs	r3, #0
   d5d12:	6840      	ldr	r0, [r0, #4]
   d5d14:	461a      	mov	r2, r3
   d5d16:	4619      	mov	r1, r3
   d5d18:	f7ff bf68 	b.w	d5bec <network_on>

000d5d1c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d1c:	2200      	movs	r2, #0
   d5d1e:	6840      	ldr	r0, [r0, #4]
   d5d20:	4611      	mov	r1, r2
   d5d22:	f7ff bf5b 	b.w	d5bdc <network_ready>

000d5d26 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d26:	2200      	movs	r2, #0
   d5d28:	6840      	ldr	r0, [r0, #4]
   d5d2a:	4611      	mov	r1, r2
   d5d2c:	f7ff bf46 	b.w	d5bbc <network_connecting>

000d5d30 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d30:	6840      	ldr	r0, [r0, #4]
   d5d32:	2200      	movs	r2, #0
   d5d34:	2102      	movs	r1, #2
   d5d36:	f7ff bf49 	b.w	d5bcc <network_disconnect>

000d5d3a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d3a:	2300      	movs	r3, #0
   d5d3c:	6840      	ldr	r0, [r0, #4]
   d5d3e:	461a      	mov	r2, r3
   d5d40:	f7ff bf34 	b.w	d5bac <network_connect>

000d5d44 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d44:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d46:	2203      	movs	r2, #3
   d5d48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d4a:	4a02      	ldr	r2, [pc, #8]	; (d5d54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5d4c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5d4e:	4770      	bx	lr
   d5d50:	2003e644 	.word	0x2003e644
   d5d54:	000d8c94 	.word	0x000d8c94

000d5d58 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5d58:	2100      	movs	r1, #0
   d5d5a:	f7ff be7b 	b.w	d5a54 <hal_spi_acquire>

000d5d5e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5d5e:	2100      	movs	r1, #0
   d5d60:	f7ff be80 	b.w	d5a64 <hal_spi_release>

000d5d64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5d64:	b510      	push	{r4, lr}
   d5d66:	4604      	mov	r4, r0
   d5d68:	4608      	mov	r0, r1
{
    _spi = spi;
   d5d6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5d6c:	f7ff fe52 	bl	d5a14 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5d70:	2300      	movs	r3, #0
   d5d72:	6063      	str	r3, [r4, #4]
}
   d5d74:	4620      	mov	r0, r4
   d5d76:	bd10      	pop	{r4, pc}

000d5d78 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5d78:	b510      	push	{r4, lr}
   d5d7a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5d7c:	7800      	ldrb	r0, [r0, #0]
   d5d7e:	f7ff ffeb 	bl	d5d58 <_ZN8SPIClass4lockEv.isra.0>
   d5d82:	b948      	cbnz	r0, d5d98 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5d84:	7820      	ldrb	r0, [r4, #0]
   d5d86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5d8a:	f7ff fe33 	bl	d59f4 <hal_spi_begin>
        unlock();
   d5d8e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5d94:	f7ff bfe3 	b.w	d5d5e <_ZN8SPIClass6unlockEv.isra.0>
}
   d5d98:	bd10      	pop	{r4, pc}

000d5d9a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5d9a:	7800      	ldrb	r0, [r0, #0]
   d5d9c:	f7ff bfdf 	b.w	d5d5e <_ZN8SPIClass6unlockEv.isra.0>

000d5da0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5da0:	0840      	lsrs	r0, r0, #1
{
   d5da2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5da4:	6018      	str	r0, [r3, #0]
   d5da6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5da8:	6818      	ldr	r0, [r3, #0]
   d5daa:	4288      	cmp	r0, r1
   d5dac:	b2e5      	uxtb	r5, r4
   d5dae:	d906      	bls.n	d5dbe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5db0:	3401      	adds	r4, #1
   d5db2:	2c08      	cmp	r4, #8
   d5db4:	d002      	beq.n	d5dbc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5db6:	0840      	lsrs	r0, r0, #1
   d5db8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5dba:	e7f5      	b.n	d5da8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5dbc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5dc0:	5d5b      	ldrb	r3, [r3, r5]
   d5dc2:	7013      	strb	r3, [r2, #0]
}
   d5dc4:	bd30      	pop	{r4, r5, pc}
   d5dc6:	bf00      	nop
   d5dc8:	000d8cc8 	.word	0x000d8cc8

000d5dcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5dd0:	4606      	mov	r6, r0
   d5dd2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5dd4:	7800      	ldrb	r0, [r0, #0]
{
   d5dd6:	460c      	mov	r4, r1
    CHECK(lock());
   d5dd8:	f7ff ffbe 	bl	d5d58 <_ZN8SPIClass4lockEv.isra.0>
   d5ddc:	2800      	cmp	r0, #0
   d5dde:	db1b      	blt.n	d5e18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5de0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5de2:	2214      	movs	r2, #20
   d5de4:	2100      	movs	r1, #0
   d5de6:	a809      	add	r0, sp, #36	; 0x24
   d5de8:	f002 f8f4 	bl	d7fd4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5dec:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5dee:	2200      	movs	r2, #0
   d5df0:	a909      	add	r1, sp, #36	; 0x24
   d5df2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5df4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5df8:	f7ff fe1c 	bl	d5a34 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5dfc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5e00:	b113      	cbz	r3, d5e08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5e02:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5e06:	b155      	cbz	r5, d5e1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5e08:	2700      	movs	r7, #0
   d5e0a:	46b9      	mov	r9, r7
   d5e0c:	46b8      	mov	r8, r7
   d5e0e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5e10:	7923      	ldrb	r3, [r4, #4]
   d5e12:	b15d      	cbz	r5, d5e2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5e14:	b1c3      	cbz	r3, d5e48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5e16:	2000      	movs	r0, #0
}
   d5e18:	b00f      	add	sp, #60	; 0x3c
   d5e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5e1e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5e22:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5e26:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5e2a:	e7f1      	b.n	d5e10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5e2c:	2b00      	cmp	r3, #0
   d5e2e:	d135      	bne.n	d5e9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5e30:	68a3      	ldr	r3, [r4, #8]
   d5e32:	4543      	cmp	r3, r8
   d5e34:	d108      	bne.n	d5e48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5e36:	f88d 9020 	strb.w	r9, [sp, #32]
   d5e3a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5e3e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5e42:	89a3      	ldrh	r3, [r4, #12]
   d5e44:	429a      	cmp	r2, r3
   d5e46:	d0e6      	beq.n	d5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5e48:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5e4a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5e4c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5e50:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5e52:	ab04      	add	r3, sp, #16
   d5e54:	f10d 020f 	add.w	r2, sp, #15
   d5e58:	f7ff ffa2 	bl	d5da0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5e5c:	7921      	ldrb	r1, [r4, #4]
   d5e5e:	b985      	cbnz	r5, d5e82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5e60:	b989      	cbnz	r1, d5e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5e62:	68a3      	ldr	r3, [r4, #8]
   d5e64:	4543      	cmp	r3, r8
   d5e66:	d30e      	bcc.n	d5e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5e68:	f88d 9020 	strb.w	r9, [sp, #32]
   d5e6c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5e70:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5e74:	89a3      	ldrh	r3, [r4, #12]
   d5e76:	429a      	cmp	r2, r3
   d5e78:	d105      	bne.n	d5e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5e7a:	9b04      	ldr	r3, [sp, #16]
   d5e7c:	4543      	cmp	r3, r8
   d5e7e:	d102      	bne.n	d5e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5e80:	e7c9      	b.n	d5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5e82:	2900      	cmp	r1, #0
   d5e84:	d1f9      	bne.n	d5e7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5e86:	2300      	movs	r3, #0
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	7b63      	ldrb	r3, [r4, #13]
   d5e8c:	9300      	str	r3, [sp, #0]
   d5e8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5e92:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5e94:	7830      	ldrb	r0, [r6, #0]
   d5e96:	f7ff fdd5 	bl	d5a44 <hal_spi_set_settings>
   d5e9a:	e7bc      	b.n	d5e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5e9c:	e9cd 5500 	strd	r5, r5, [sp]
   d5ea0:	462b      	mov	r3, r5
   d5ea2:	462a      	mov	r2, r5
   d5ea4:	2101      	movs	r1, #1
   d5ea6:	e7f5      	b.n	d5e94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5ea8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5ea8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5eaa:	7800      	ldrb	r0, [r0, #0]
   d5eac:	f7ff fdaa 	bl	d5a04 <hal_spi_transfer>
}
   d5eb0:	b2c0      	uxtb	r0, r0
   d5eb2:	bd08      	pop	{r3, pc}

000d5eb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5eb4:	b510      	push	{r4, lr}
   d5eb6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5eb8:	6800      	ldr	r0, [r0, #0]
   d5eba:	b118      	cbz	r0, d5ec4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5ebc:	f7ff fee6 	bl	d5c8c <free>
            wakeupSource_ = nullptr;
   d5ec0:	2300      	movs	r3, #0
   d5ec2:	6023      	str	r3, [r4, #0]
        }
    }
   d5ec4:	bd10      	pop	{r4, pc}

000d5ec6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5ec6:	b510      	push	{r4, lr}
   d5ec8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5eca:	f7ff fff3 	bl	d5eb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5ece:	4620      	mov	r0, r4
   d5ed0:	bd10      	pop	{r4, pc}
	...

000d5ed4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5ed4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5ed6:	4b09      	ldr	r3, [pc, #36]	; (d5efc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5ed8:	4c09      	ldr	r4, [pc, #36]	; (d5f00 <_GLOBAL__sub_I_System+0x2c>)
   d5eda:	2202      	movs	r2, #2
   d5edc:	2000      	movs	r0, #0
   d5ede:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5ee0:	4b08      	ldr	r3, [pc, #32]	; (d5f04 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5ee2:	6020      	str	r0, [r4, #0]
   d5ee4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5ee6:	71a0      	strb	r0, [r4, #6]
   d5ee8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5eea:	f7ff fe33 	bl	d5b54 <set_system_mode>
SystemClass System;
   d5eee:	4620      	mov	r0, r4
   d5ef0:	4a05      	ldr	r2, [pc, #20]	; (d5f08 <_GLOBAL__sub_I_System+0x34>)
   d5ef2:	4906      	ldr	r1, [pc, #24]	; (d5f0c <_GLOBAL__sub_I_System+0x38>)
   d5ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5ef8:	f001 bf0a 	b.w	d7d10 <__aeabi_atexit>
   d5efc:	2003e658 	.word	0x2003e658
   d5f00:	2003e64c 	.word	0x2003e64c
   d5f04:	ffff0000 	.word	0xffff0000
   d5f08:	2003e578 	.word	0x2003e578
   d5f0c:	000d5ec7 	.word	0x000d5ec7

000d5f10 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5f10:	b510      	push	{r4, lr}
   d5f12:	4604      	mov	r4, r0
{
	free(buffer);
   d5f14:	6800      	ldr	r0, [r0, #0]
   d5f16:	f7ff feb9 	bl	d5c8c <free>
}
   d5f1a:	4620      	mov	r0, r4
   d5f1c:	bd10      	pop	{r4, pc}

000d5f1e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5f1e:	b510      	push	{r4, lr}
   d5f20:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5f22:	6800      	ldr	r0, [r0, #0]
   d5f24:	b108      	cbz	r0, d5f2a <_ZN6String10invalidateEv+0xc>
   d5f26:	f7ff feb1 	bl	d5c8c <free>
	buffer = NULL;
   d5f2a:	2300      	movs	r3, #0
	capacity = len = 0;
   d5f2c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5f30:	6023      	str	r3, [r4, #0]
}
   d5f32:	bd10      	pop	{r4, pc}

000d5f34 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f34:	b538      	push	{r3, r4, r5, lr}
   d5f36:	4604      	mov	r4, r0
   d5f38:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f3a:	6800      	ldr	r0, [r0, #0]
   d5f3c:	3101      	adds	r1, #1
   d5f3e:	f7ff fead 	bl	d5c9c <realloc>
	if (newbuffer) {
   d5f42:	b110      	cbz	r0, d5f4a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f44:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5f48:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f4a:	bd38      	pop	{r3, r4, r5, pc}

000d5f4c <_ZN6String7reserveEj>:
{
   d5f4c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f4e:	6803      	ldr	r3, [r0, #0]
{
   d5f50:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f52:	b123      	cbz	r3, d5f5e <_ZN6String7reserveEj+0x12>
   d5f54:	6843      	ldr	r3, [r0, #4]
   d5f56:	428b      	cmp	r3, r1
   d5f58:	d301      	bcc.n	d5f5e <_ZN6String7reserveEj+0x12>
   d5f5a:	2001      	movs	r0, #1
}
   d5f5c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f5e:	4620      	mov	r0, r4
   d5f60:	f7ff ffe8 	bl	d5f34 <_ZN6String12changeBufferEj>
   d5f64:	2800      	cmp	r0, #0
   d5f66:	d0f9      	beq.n	d5f5c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f68:	68a3      	ldr	r3, [r4, #8]
   d5f6a:	2b00      	cmp	r3, #0
   d5f6c:	d1f5      	bne.n	d5f5a <_ZN6String7reserveEj+0xe>
   d5f6e:	6822      	ldr	r2, [r4, #0]
   d5f70:	7013      	strb	r3, [r2, #0]
   d5f72:	e7f2      	b.n	d5f5a <_ZN6String7reserveEj+0xe>

000d5f74 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f76:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f78:	4611      	mov	r1, r2
   d5f7a:	9201      	str	r2, [sp, #4]
{
   d5f7c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5f7e:	f7ff ffe5 	bl	d5f4c <_ZN6String7reserveEj>
   d5f82:	9a01      	ldr	r2, [sp, #4]
   d5f84:	b928      	cbnz	r0, d5f92 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5f86:	4620      	mov	r0, r4
   d5f88:	f7ff ffc9 	bl	d5f1e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	b003      	add	sp, #12
   d5f90:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5f92:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f94:	4629      	mov	r1, r5
   d5f96:	6820      	ldr	r0, [r4, #0]
   d5f98:	f001 fff4 	bl	d7f84 <memcpy>
	buffer[len] = 0;
   d5f9c:	6822      	ldr	r2, [r4, #0]
   d5f9e:	68a3      	ldr	r3, [r4, #8]
   d5fa0:	2100      	movs	r1, #0
   d5fa2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5fa4:	e7f2      	b.n	d5f8c <_ZN6String4copyEPKcj+0x18>

000d5fa6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5fa6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5fa8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5faa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5fae:	4604      	mov	r4, r0
	len = 0;
   d5fb0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fb2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5fb4:	b141      	cbz	r1, d5fc8 <_ZN6StringC1EPKc+0x22>
   d5fb6:	4608      	mov	r0, r1
   d5fb8:	9101      	str	r1, [sp, #4]
   d5fba:	f002 f841 	bl	d8040 <strlen>
   d5fbe:	9901      	ldr	r1, [sp, #4]
   d5fc0:	4602      	mov	r2, r0
   d5fc2:	4620      	mov	r0, r4
   d5fc4:	f7ff ffd6 	bl	d5f74 <_ZN6String4copyEPKcj>
}
   d5fc8:	4620      	mov	r0, r4
   d5fca:	b002      	add	sp, #8
   d5fcc:	bd10      	pop	{r4, pc}

000d5fce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5fce:	b513      	push	{r0, r1, r4, lr}
   d5fd0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5fd2:	b159      	cbz	r1, d5fec <_ZN6StringaSEPKc+0x1e>
   d5fd4:	4608      	mov	r0, r1
   d5fd6:	9101      	str	r1, [sp, #4]
   d5fd8:	f002 f832 	bl	d8040 <strlen>
   d5fdc:	9901      	ldr	r1, [sp, #4]
   d5fde:	4602      	mov	r2, r0
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	f7ff ffc7 	bl	d5f74 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	b002      	add	sp, #8
   d5fea:	bd10      	pop	{r4, pc}
	else invalidate();
   d5fec:	f7ff ff97 	bl	d5f1e <_ZN6String10invalidateEv>
   d5ff0:	e7f9      	b.n	d5fe6 <_ZN6StringaSEPKc+0x18>

000d5ff2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5ff2:	b558      	push	{r3, r4, r6, lr}
   d5ff4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d5ff6:	b12a      	cbz	r2, d6004 <_ZNK6String8getBytesEPhjj+0x12>
   d5ff8:	b121      	cbz	r1, d6004 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d5ffa:	6884      	ldr	r4, [r0, #8]
   d5ffc:	42a3      	cmp	r3, r4
   d5ffe:	d302      	bcc.n	d6006 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d6000:	2300      	movs	r3, #0
   d6002:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d6004:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d6006:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d6008:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d600a:	6801      	ldr	r1, [r0, #0]
   d600c:	4294      	cmp	r4, r2
   d600e:	bf28      	it	cs
   d6010:	4614      	movcs	r4, r2
   d6012:	4419      	add	r1, r3
   d6014:	4622      	mov	r2, r4
   d6016:	4630      	mov	r0, r6
   d6018:	f002 f81a 	bl	d8050 <strncpy>
	buf[n] = 0;
   d601c:	2300      	movs	r3, #0
   d601e:	5533      	strb	r3, [r6, r4]
   d6020:	e7f0      	b.n	d6004 <_ZNK6String8getBytesEPhjj+0x12>

000d6022 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6022:	4770      	bx	lr

000d6024 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6024:	4770      	bx	lr

000d6026 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d6026:	4770      	bx	lr

000d6028 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6028:	4770      	bx	lr
	...

000d602c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d602c:	4b06      	ldr	r3, [pc, #24]	; (d6048 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d602e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6030:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6032:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6036:	d005      	beq.n	d6044 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6038:	4608      	mov	r0, r1
   d603a:	f001 fe75 	bl	d7d28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d603e:	2800      	cmp	r0, #0
	return nullptr;
   d6040:	bf08      	it	eq
   d6042:	2400      	moveq	r4, #0
      }
   d6044:	4620      	mov	r0, r4
   d6046:	bd10      	pop	{r4, pc}
   d6048:	000d8e18 	.word	0x000d8e18

000d604c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d604c:	4b06      	ldr	r3, [pc, #24]	; (d6068 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d604e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6050:	b510      	push	{r4, lr}
   d6052:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6056:	d005      	beq.n	d6064 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6058:	4608      	mov	r0, r1
   d605a:	f001 fe65 	bl	d7d28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d605e:	2800      	cmp	r0, #0
	return nullptr;
   d6060:	bf08      	it	eq
   d6062:	2400      	moveq	r4, #0
      }
   d6064:	4620      	mov	r0, r4
   d6066:	bd10      	pop	{r4, pc}
   d6068:	000d8e18 	.word	0x000d8e18

000d606c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d606c:	4b06      	ldr	r3, [pc, #24]	; (d6088 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d606e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6070:	b510      	push	{r4, lr}
   d6072:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6076:	d005      	beq.n	d6084 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6078:	4608      	mov	r0, r1
   d607a:	f001 fe55 	bl	d7d28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d607e:	2800      	cmp	r0, #0
	return nullptr;
   d6080:	bf08      	it	eq
   d6082:	2400      	moveq	r4, #0
      }
   d6084:	4620      	mov	r0, r4
   d6086:	bd10      	pop	{r4, pc}
   d6088:	000d8e18 	.word	0x000d8e18

000d608c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d608c:	b510      	push	{r4, lr}
   d608e:	2168      	movs	r1, #104	; 0x68
   d6090:	4604      	mov	r4, r0
   d6092:	f001 fe42 	bl	d7d1a <_ZdlPvj>
   d6096:	4620      	mov	r0, r4
   d6098:	bd10      	pop	{r4, pc}

000d609a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d609a:	b510      	push	{r4, lr}
   d609c:	2128      	movs	r1, #40	; 0x28
   d609e:	4604      	mov	r4, r0
   d60a0:	f001 fe3b 	bl	d7d1a <_ZdlPvj>
   d60a4:	4620      	mov	r0, r4
   d60a6:	bd10      	pop	{r4, pc}

000d60a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d60a8:	b510      	push	{r4, lr}
   d60aa:	2130      	movs	r1, #48	; 0x30
   d60ac:	4604      	mov	r4, r0
   d60ae:	f001 fe34 	bl	d7d1a <_ZdlPvj>
   d60b2:	4620      	mov	r0, r4
   d60b4:	bd10      	pop	{r4, pc}

000d60b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d60b6:	f7fd bff0 	b.w	d409a <_ZdlPv>

000d60ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d60ba:	f7fd bfee 	b.w	d409a <_ZdlPv>

000d60be <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d60be:	f7fd bfec 	b.w	d409a <_ZdlPv>

000d60c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60c2:	b510      	push	{r4, lr}
          _M_dispose();
   d60c4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60c6:	4604      	mov	r4, r0
          _M_dispose();
   d60c8:	689b      	ldr	r3, [r3, #8]
   d60ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60cc:	68a3      	ldr	r3, [r4, #8]
   d60ce:	3b01      	subs	r3, #1
   d60d0:	60a3      	str	r3, [r4, #8]
   d60d2:	b92b      	cbnz	r3, d60e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d60d4:	6823      	ldr	r3, [r4, #0]
   d60d6:	4620      	mov	r0, r4
   d60d8:	68db      	ldr	r3, [r3, #12]
    }
   d60da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d60de:	4718      	bx	r3
    }
   d60e0:	bd10      	pop	{r4, pc}

000d60e2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d60e2:	b510      	push	{r4, lr}
   d60e4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d60e6:	6800      	ldr	r0, [r0, #0]
   d60e8:	b108      	cbz	r0, d60ee <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d60ea:	f7ff fbcb 	bl	d5884 <os_mutex_recursive_destroy>
    }
   d60ee:	4620      	mov	r0, r4
   d60f0:	bd10      	pop	{r4, pc}
	...

000d60f4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d60f4:	b510      	push	{r4, lr}
        mutex_.lock();
   d60f6:	4b04      	ldr	r3, [pc, #16]	; (d6108 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d60f8:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d60fa:	6818      	ldr	r0, [r3, #0]
   d60fc:	f7ff fbca 	bl	d5894 <os_mutex_recursive_lock>
        locked_ = true;
   d6100:	2301      	movs	r3, #1
   d6102:	7023      	strb	r3, [r4, #0]
    }
   d6104:	bd10      	pop	{r4, pc}
   d6106:	bf00      	nop
   d6108:	2003e664 	.word	0x2003e664

000d610c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d610c:	b510      	push	{r4, lr}
        mutex_.unlock();
   d610e:	4b04      	ldr	r3, [pc, #16]	; (d6120 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6110:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6112:	6818      	ldr	r0, [r3, #0]
   d6114:	f7ff fbc6 	bl	d58a4 <os_mutex_recursive_unlock>
        locked_ = false;
   d6118:	2300      	movs	r3, #0
   d611a:	7023      	strb	r3, [r4, #0]
    }
   d611c:	bd10      	pop	{r4, pc}
   d611e:	bf00      	nop
   d6120:	2003e664 	.word	0x2003e664

000d6124 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6124:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6126:	2500      	movs	r5, #0
   d6128:	1cec      	adds	r4, r5, #3
   d612a:	428c      	cmp	r4, r1
   d612c:	d80d      	bhi.n	d614a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d612e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d6130:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d6132:	5d87      	ldrb	r7, [r0, r6]
   d6134:	4297      	cmp	r7, r2
   d6136:	d105      	bne.n	d6144 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6138:	4426      	add	r6, r4
   d613a:	42b1      	cmp	r1, r6
   d613c:	d305      	bcc.n	d614a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d613e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d6140:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6142:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6144:	3401      	adds	r4, #1
   d6146:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6148:	e7ee      	b.n	d6128 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d614a:	2000      	movs	r0, #0
   d614c:	e7f9      	b.n	d6142 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d614e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d614e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6152:	4604      	mov	r4, r0
   d6154:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6158:	461e      	mov	r6, r3
   d615a:	4689      	mov	r9, r1
   d615c:	ab01      	add	r3, sp, #4
   d615e:	4690      	mov	r8, r2
   d6160:	460a      	mov	r2, r1
   d6162:	6a01      	ldr	r1, [r0, #32]
   d6164:	f7ff ffde 	bl	d6124 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6168:	6a25      	ldr	r5, [r4, #32]
   d616a:	1cb3      	adds	r3, r6, #2
   d616c:	bb17      	cbnz	r7, d61b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d616e:	b308      	cbz	r0, d61b4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6170:	195f      	adds	r7, r3, r5
   d6172:	1a3f      	subs	r7, r7, r0
   d6174:	2f1f      	cmp	r7, #31
   d6176:	d819      	bhi.n	d61ac <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6178:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d617c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6180:	eba5 0209 	sub.w	r2, r5, r9
   d6184:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6186:	eb00 0109 	add.w	r1, r0, r9
   d618a:	eb06 000a 	add.w	r0, r6, sl
   d618e:	b292      	uxth	r2, r2
   d6190:	4421      	add	r1, r4
   d6192:	4420      	add	r0, r4
   d6194:	f001 ff04 	bl	d7fa0 <memmove>
            selfData_[offset] = len + 1;
   d6198:	1c73      	adds	r3, r6, #1
   d619a:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d619e:	4632      	mov	r2, r6
   d61a0:	4641      	mov	r1, r8
   d61a2:	eb04 000a 	add.w	r0, r4, sl
   d61a6:	f001 feed 	bl	d7f84 <memcpy>
            selfLen_ = staLen + len + 2;
   d61aa:	6227      	str	r7, [r4, #32]
}
   d61ac:	6a20      	ldr	r0, [r4, #32]
   d61ae:	b002      	add	sp, #8
   d61b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d61b4:	442b      	add	r3, r5
   d61b6:	2b1f      	cmp	r3, #31
   d61b8:	d8f8      	bhi.n	d61ac <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d61ba:	1c73      	adds	r3, r6, #1
   d61bc:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d61be:	1ca8      	adds	r0, r5, #2
   d61c0:	4425      	add	r5, r4
   d61c2:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d61c4:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d61c6:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d61ca:	4641      	mov	r1, r8
   d61cc:	4420      	add	r0, r4
   d61ce:	f001 fed9 	bl	d7f84 <memcpy>
        selfLen_ += len;
   d61d2:	6a23      	ldr	r3, [r4, #32]
   d61d4:	4433      	add	r3, r6
   d61d6:	6223      	str	r3, [r4, #32]
   d61d8:	e7e8      	b.n	d61ac <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d61dc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d61dc:	4a02      	ldr	r2, [pc, #8]	; (d61e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d61de:	2100      	movs	r1, #0
   d61e0:	200a      	movs	r0, #10
   d61e2:	f7ff bca7 	b.w	d5b34 <panic_>
   d61e6:	bf00      	nop
   d61e8:	000d572d 	.word	0x000d572d

000d61ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d61ec:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d61ee:	b538      	push	{r3, r4, r5, lr}
   d61f0:	4604      	mov	r4, r0
	  switch (__op)
   d61f2:	d007      	beq.n	d6204 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d61f4:	2a03      	cmp	r2, #3
   d61f6:	d011      	beq.n	d621c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d61f8:	2a01      	cmp	r2, #1
   d61fa:	d101      	bne.n	d6200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d61fc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d61fe:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6200:	2000      	movs	r0, #0
   d6202:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6204:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6206:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6208:	f7fd ff43 	bl	d4092 <_Znwj>
   d620c:	4603      	mov	r3, r0
   d620e:	2800      	cmp	r0, #0
   d6210:	d0f5      	beq.n	d61fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d6212:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6216:	e883 0003 	stmia.w	r3, {r0, r1}
   d621a:	e7f0      	b.n	d61fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d621c:	6800      	ldr	r0, [r0, #0]
   d621e:	2800      	cmp	r0, #0
   d6220:	d0ee      	beq.n	d6200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d6222:	2108      	movs	r1, #8
   d6224:	f001 fd79 	bl	d7d1a <_ZdlPvj>
   d6228:	e7ea      	b.n	d6200 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d622a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d622a:	b430      	push	{r4, r5}
   d622c:	460d      	mov	r5, r1
   d622e:	4611      	mov	r1, r2
   d6230:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d6232:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6234:	6809      	ldr	r1, [r1, #0]
   d6236:	6828      	ldr	r0, [r5, #0]
   d6238:	e9d3 4300 	ldrd	r4, r3, [r3]
   d623c:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d623e:	bc30      	pop	{r4, r5}
   d6240:	4760      	bx	ip

000d6242 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6242:	b510      	push	{r4, lr}
      if (_M_manager)
   d6244:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6246:	4604      	mov	r4, r0
      if (_M_manager)
   d6248:	b113      	cbz	r3, d6250 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d624a:	2203      	movs	r2, #3
   d624c:	4601      	mov	r1, r0
   d624e:	4798      	blx	r3
    }
   d6250:	4620      	mov	r0, r4
   d6252:	bd10      	pop	{r4, pc}

000d6254 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6254:	b510      	push	{r4, lr}
   d6256:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6258:	3058      	adds	r0, #88	; 0x58
   d625a:	f7ff fff2 	bl	d6242 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d625e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d6262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6266:	f7ff be53 	b.w	d5f10 <_ZN6StringD1Ev>

000d626a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d626a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d626e:	b2da      	uxtb	r2, r3
   d6270:	2a09      	cmp	r2, #9
   d6272:	d801      	bhi.n	d6278 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6274:	4618      	mov	r0, r3
   d6276:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6278:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d627c:	2b05      	cmp	r3, #5
   d627e:	d801      	bhi.n	d6284 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6280:	3857      	subs	r0, #87	; 0x57
   d6282:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6284:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6288:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d628a:	bf94      	ite	ls
   d628c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d628e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6292:	4770      	bx	lr

000d6294 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6294:	b510      	push	{r4, lr}
            locked_(false) {
   d6296:	2300      	movs	r3, #0
    WiringBleLock() :
   d6298:	4604      	mov	r4, r0
            locked_(false) {
   d629a:	7003      	strb	r3, [r0, #0]
        lock();
   d629c:	f7ff ff2a 	bl	d60f4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d62a0:	4620      	mov	r0, r4
   d62a2:	bd10      	pop	{r4, pc}

000d62a4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d62a4:	b510      	push	{r4, lr}
        if (locked_) {
   d62a6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d62a8:	4604      	mov	r4, r0
        if (locked_) {
   d62aa:	b10b      	cbz	r3, d62b0 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d62ac:	f7ff ff2e 	bl	d610c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d62b0:	4620      	mov	r0, r4
   d62b2:	bd10      	pop	{r4, pc}

000d62b4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d62b4:	b082      	sub	sp, #8
   d62b6:	4603      	mov	r3, r0
    address_ = addr;
   d62b8:	6808      	ldr	r0, [r1, #0]
   d62ba:	6849      	ldr	r1, [r1, #4]
   d62bc:	466a      	mov	r2, sp
   d62be:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d62c0:	466a      	mov	r2, sp
   d62c2:	ca03      	ldmia	r2!, {r0, r1}
   d62c4:	6018      	str	r0, [r3, #0]
}
   d62c6:	4618      	mov	r0, r3
    address_ = addr.address_;
   d62c8:	6059      	str	r1, [r3, #4]
}
   d62ca:	b002      	add	sp, #8
   d62cc:	4770      	bx	lr

000d62ce <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d62ce:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d62d0:	7982      	ldrb	r2, [r0, #6]
   d62d2:	798b      	ldrb	r3, [r1, #6]
   d62d4:	429a      	cmp	r2, r3
   d62d6:	d106      	bne.n	d62e6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d62d8:	2206      	movs	r2, #6
   d62da:	f001 fe45 	bl	d7f68 <memcmp>
   d62de:	fab0 f080 	clz	r0, r0
   d62e2:	0940      	lsrs	r0, r0, #5
}
   d62e4:	bd08      	pop	{r3, pc}
    return false;
   d62e6:	2000      	movs	r0, #0
   d62e8:	e7fc      	b.n	d62e4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d62ea <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d62ea:	f04f 33ff 	mov.w	r3, #4294967295
   d62ee:	6003      	str	r3, [r0, #0]
   d62f0:	8083      	strh	r3, [r0, #4]
}
   d62f2:	2000      	movs	r0, #0
   d62f4:	4770      	bx	lr

000d62f6 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d62f6:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d62f8:	b508      	push	{r3, lr}
        : address_{} {
   d62fa:	6001      	str	r1, [r0, #0]
   d62fc:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d62fe:	4602      	mov	r2, r0
    clear();
   d6300:	f7ff fff3 	bl	d62ea <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6304:	7191      	strb	r1, [r2, #6]
}
   d6306:	4610      	mov	r0, r2
   d6308:	bd08      	pop	{r3, pc}
	...

000d630c <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d630c:	2201      	movs	r2, #1
   d630e:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6310:	4a06      	ldr	r2, [pc, #24]	; (d632c <_ZN8particle7BleUuidC1Ev+0x20>)
   d6312:	6811      	ldr	r1, [r2, #0]
   d6314:	6001      	str	r1, [r0, #0]
   d6316:	6851      	ldr	r1, [r2, #4]
   d6318:	6041      	str	r1, [r0, #4]
   d631a:	8911      	ldrh	r1, [r2, #8]
   d631c:	7a92      	ldrb	r2, [r2, #10]
   d631e:	7282      	strb	r2, [r0, #10]
   d6320:	2200      	movs	r2, #0
   d6322:	8101      	strh	r1, [r0, #8]
   d6324:	f8c0 200b 	str.w	r2, [r0, #11]
   d6328:	73c2      	strb	r2, [r0, #15]
}
   d632a:	4770      	bx	lr
   d632c:	000d8e20 	.word	0x000d8e20

000d6330 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d6330:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6332:	690b      	ldr	r3, [r1, #16]
   d6334:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6336:	f101 0210 	add.w	r2, r1, #16
   d633a:	4603      	mov	r3, r0
   d633c:	f851 4b04 	ldr.w	r4, [r1], #4
   d6340:	f843 4b04 	str.w	r4, [r3], #4
   d6344:	4291      	cmp	r1, r2
   d6346:	d1f9      	bne.n	d633c <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6348:	bd10      	pop	{r4, pc}

000d634a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d634a:	b510      	push	{r4, lr}
    if (uuid128) {
   d634c:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d634e:	4604      	mov	r4, r0
    if (uuid128) {
   d6350:	b1b1      	cbz	r1, d6380 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6352:	2a01      	cmp	r2, #1
   d6354:	f101 0210 	add.w	r2, r1, #16
   d6358:	d10a      	bne.n	d6370 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d635a:	4601      	mov	r1, r0
   d635c:	f853 0b04 	ldr.w	r0, [r3], #4
   d6360:	f841 0b04 	str.w	r0, [r1], #4
   d6364:	4293      	cmp	r3, r2
   d6366:	d1f9      	bne.n	d635c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d6368:	2301      	movs	r3, #1
   d636a:	6123      	str	r3, [r4, #16]
}
   d636c:	4620      	mov	r0, r4
   d636e:	bd10      	pop	{r4, pc}
   d6370:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d6372:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d6376:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d637a:	429a      	cmp	r2, r3
   d637c:	d1f9      	bne.n	d6372 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d637e:	e7f3      	b.n	d6368 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6380:	2210      	movs	r2, #16
   d6382:	f001 fe27 	bl	d7fd4 <memset>
   d6386:	e7f1      	b.n	d636c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d6388 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6388:	b538      	push	{r3, r4, r5, lr}
   d638a:	4604      	mov	r4, r0
   d638c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d638e:	461a      	mov	r2, r3
   d6390:	f7ff ffdb 	bl	d634a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6394:	81a5      	strh	r5, [r4, #12]
}
   d6396:	4620      	mov	r0, r4
   d6398:	bd38      	pop	{r3, r4, r5, pc}
	...

000d639c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d639c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d639e:	6902      	ldr	r2, [r0, #16]
   d63a0:	b922      	cbnz	r2, d63ac <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d63a2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d63a4:	3800      	subs	r0, #0
   d63a6:	bf18      	it	ne
   d63a8:	2001      	movne	r0, #1
}
   d63aa:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d63ac:	4902      	ldr	r1, [pc, #8]	; (d63b8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d63ae:	2210      	movs	r2, #16
   d63b0:	f001 fdda 	bl	d7f68 <memcmp>
   d63b4:	e7f6      	b.n	d63a4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d63b6:	bf00      	nop
   d63b8:	000d8e40 	.word	0x000d8e40

000d63bc <_ZNK8particle7BleUuid4typeEv>:
}
   d63bc:	6900      	ldr	r0, [r0, #16]
   d63be:	4770      	bx	lr

000d63c0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d63c0:	b538      	push	{r3, r4, r5, lr}
   d63c2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d63c4:	2214      	movs	r2, #20
   d63c6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d63c8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d63ca:	f001 fe03 	bl	d7fd4 <memset>
    if (type_ == BleUuidType::SHORT) {
   d63ce:	6923      	ldr	r3, [r4, #16]
   d63d0:	b93b      	cbnz	r3, d63e2 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d63d2:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d63d4:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d63d6:	7b23      	ldrb	r3, [r4, #12]
   d63d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d63dc:	802b      	strh	r3, [r5, #0]
}
   d63de:	4628      	mov	r0, r5
   d63e0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d63e2:	2301      	movs	r3, #1
   d63e4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d63e6:	f104 0210 	add.w	r2, r4, #16
   d63ea:	462b      	mov	r3, r5
   d63ec:	f854 1b04 	ldr.w	r1, [r4], #4
   d63f0:	f843 1b04 	str.w	r1, [r3], #4
   d63f4:	4294      	cmp	r4, r2
   d63f6:	d1f9      	bne.n	d63ec <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d63f8:	e7f1      	b.n	d63de <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d63fa <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d63fa:	7b42      	ldrb	r2, [r0, #13]
   d63fc:	7b00      	ldrb	r0, [r0, #12]
}
   d63fe:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6402:	4770      	bx	lr

000d6404 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6404:	4770      	bx	lr

000d6406 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6406:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6408:	6902      	ldr	r2, [r0, #16]
   d640a:	690b      	ldr	r3, [r1, #16]
   d640c:	429a      	cmp	r2, r3
   d640e:	d106      	bne.n	d641e <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6410:	2210      	movs	r2, #16
   d6412:	f001 fda9 	bl	d7f68 <memcmp>
   d6416:	fab0 f080 	clz	r0, r0
   d641a:	0940      	lsrs	r0, r0, #5
}
   d641c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d641e:	2000      	movs	r0, #0
   d6420:	e7fc      	b.n	d641c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6424 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6424:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6426:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d642a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d642c:	4b32      	ldr	r3, [pc, #200]	; (d64f8 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	6002      	str	r2, [r0, #0]
   d6432:	685a      	ldr	r2, [r3, #4]
   d6434:	6042      	str	r2, [r0, #4]
   d6436:	2500      	movs	r5, #0
   d6438:	891a      	ldrh	r2, [r3, #8]
   d643a:	7a9b      	ldrb	r3, [r3, #10]
   d643c:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d643e:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6440:	7283      	strb	r3, [r0, #10]
   d6442:	f8c0 500b 	str.w	r5, [r0, #11]
   d6446:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6448:	460e      	mov	r6, r1
   d644a:	b321      	cbz	r1, d6496 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d644c:	2124      	movs	r1, #36	; 0x24
   d644e:	4630      	mov	r0, r6
   d6450:	f001 fe11 	bl	d8076 <strnlen>
   d6454:	2804      	cmp	r0, #4
   d6456:	d121      	bne.n	d649c <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6458:	f8ad 5004 	strh.w	r5, [sp, #4]
   d645c:	af01      	add	r7, sp, #4
   d645e:	1cb5      	adds	r5, r6, #2
   d6460:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6462:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d6466:	f7ff ff00 	bl	d626a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d646a:	f1b0 0800 	subs.w	r8, r0, #0
   d646e:	db10      	blt.n	d6492 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6470:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d6474:	f7ff fef9 	bl	d626a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6478:	2800      	cmp	r0, #0
   d647a:	db0a      	blt.n	d6492 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d647c:	3502      	adds	r5, #2
   d647e:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d6482:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6484:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6488:	d1eb      	bne.n	d6462 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d648a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d648e:	ba5b      	rev16	r3, r3
   d6490:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6492:	2300      	movs	r3, #0
   d6494:	6123      	str	r3, [r4, #16]
}
   d6496:	b002      	add	sp, #8
   d6498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d649c:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d649e:	2124      	movs	r1, #36	; 0x24
   d64a0:	4630      	mov	r0, r6
   d64a2:	f001 fde8 	bl	d8076 <strnlen>
   d64a6:	42a8      	cmp	r0, r5
   d64a8:	d806      	bhi.n	d64b8 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d64aa:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d64ac:	2300      	movs	r3, #0
    while (len > 0) {
   d64ae:	42bc      	cmp	r4, r7
   d64b0:	d0f1      	beq.n	d6496 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d64b2:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d64b6:	e7fa      	b.n	d64ae <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d64b8:	2f00      	cmp	r7, #0
   d64ba:	d0ec      	beq.n	d6496 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d64bc:	5d70      	ldrb	r0, [r6, r5]
   d64be:	f7ff fed4 	bl	d626a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d64c2:	0603      	lsls	r3, r0, #24
   d64c4:	d415      	bmi.n	d64f2 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d64c6:	0100      	lsls	r0, r0, #4
   d64c8:	3f01      	subs	r7, #1
   d64ca:	fa5f f880 	uxtb.w	r8, r0
   d64ce:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d64d2:	2124      	movs	r1, #36	; 0x24
   d64d4:	4630      	mov	r0, r6
   d64d6:	f001 fdce 	bl	d8076 <strnlen>
   d64da:	3501      	adds	r5, #1
   d64dc:	42a8      	cmp	r0, r5
   d64de:	d908      	bls.n	d64f2 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d64e0:	5d70      	ldrb	r0, [r6, r5]
   d64e2:	f7ff fec2 	bl	d626a <_ZN8particle11hexToNibbleEc>
   d64e6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d64e8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d64ea:	bfa4      	itt	ge
   d64ec:	ea40 0008 	orrge.w	r0, r0, r8
   d64f0:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d64f2:	3501      	adds	r5, #1
   d64f4:	e7d3      	b.n	d649e <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d64f6:	bf00      	nop
   d64f8:	000d8e20 	.word	0x000d8e20

000d64fc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d64fc:	b513      	push	{r0, r1, r4, lr}
   d64fe:	4604      	mov	r4, r0
   d6500:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6502:	f7ff ff03 	bl	d630c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6506:	4620      	mov	r0, r4
   d6508:	9901      	ldr	r1, [sp, #4]
   d650a:	f7ff ff8b 	bl	d6424 <_ZN8particle7BleUuid9constructEPKc>
}
   d650e:	4620      	mov	r0, r4
   d6510:	b002      	add	sp, #8
   d6512:	bd10      	pop	{r4, pc}

000d6514 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6514:	b430      	push	{r4, r5}
   d6516:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d651a:	b912      	cbnz	r2, d6522 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d651c:	6a00      	ldr	r0, [r0, #32]
}
   d651e:	bc30      	pop	{r4, r5}
   d6520:	4770      	bx	lr
   d6522:	9502      	str	r5, [sp, #8]
   d6524:	bc30      	pop	{r4, r5}
   d6526:	f7ff be12 	b.w	d614e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d652a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d652a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d652c:	4604      	mov	r4, r0
          selfLen_(0) {
   d652e:	4602      	mov	r2, r0
   d6530:	f100 011f 	add.w	r1, r0, #31
   d6534:	2300      	movs	r3, #0
   d6536:	f802 3b01 	strb.w	r3, [r2], #1
   d653a:	4291      	cmp	r1, r2
   d653c:	d1fb      	bne.n	d6536 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d653e:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6540:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6542:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6544:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6546:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d654a:	4619      	mov	r1, r3
   d654c:	f10d 020f 	add.w	r2, sp, #15
   d6550:	4620      	mov	r0, r4
   d6552:	f7ff ffdf 	bl	d6514 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6556:	4620      	mov	r0, r4
   d6558:	b004      	add	sp, #16
   d655a:	bd10      	pop	{r4, pc}

000d655c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d655c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d655e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6560:	460e      	mov	r6, r1
   d6562:	ab01      	add	r3, sp, #4
   d6564:	6a01      	ldr	r1, [r0, #32]
   d6566:	4604      	mov	r4, r0
   d6568:	f7ff fddc 	bl	d6124 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d656c:	4605      	mov	r5, r0
   d656e:	b178      	cbz	r0, d6590 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6570:	9801      	ldr	r0, [sp, #4]
   d6572:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6574:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d6576:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6578:	4421      	add	r1, r4
   d657a:	1b52      	subs	r2, r2, r5
   d657c:	4420      	add	r0, r4
   d657e:	f001 fd01 	bl	d7f84 <memcpy>
        selfLen_ -= len;
   d6582:	6a20      	ldr	r0, [r4, #32]
   d6584:	1b40      	subs	r0, r0, r5
   d6586:	6220      	str	r0, [r4, #32]
        remove(type);
   d6588:	4631      	mov	r1, r6
   d658a:	4620      	mov	r0, r4
   d658c:	f7ff ffe6 	bl	d655c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6590:	b002      	add	sp, #8
   d6592:	bd70      	pop	{r4, r5, r6, pc}

000d6594 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d6594:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d6596:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d659a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d659c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d659e:	8043      	strh	r3, [r0, #2]
   d65a0:	220e      	movs	r2, #14
   d65a2:	4629      	mov	r1, r5
   d65a4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d65a6:	7105      	strb	r5, [r0, #4]
   d65a8:	3006      	adds	r0, #6
   d65aa:	f001 fd13 	bl	d7fd4 <memset>
   d65ae:	f104 0014 	add.w	r0, r4, #20
   d65b2:	f7ff feab 	bl	d630c <_ZN8particle7BleUuidC1Ev>
   d65b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d65ba:	f7ff fea7 	bl	d630c <_ZN8particle7BleUuidC1Ev>
   d65be:	4904      	ldr	r1, [pc, #16]	; (d65d0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d65c0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d65c4:	f7ff fcef 	bl	d5fa6 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d65c8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d65ca:	4620      	mov	r0, r4
   d65cc:	bd38      	pop	{r3, r4, r5, pc}
   d65ce:	bf00      	nop
   d65d0:	000d80e0 	.word	0x000d80e0

000d65d4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d65d4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d65d6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d65da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d65de:	4293      	cmp	r3, r2
   d65e0:	4618      	mov	r0, r3
   d65e2:	d006      	beq.n	d65f2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d65e4:	6804      	ldr	r4, [r0, #0]
   d65e6:	8824      	ldrh	r4, [r4, #0]
   d65e8:	428c      	cmp	r4, r1
   d65ea:	f103 0308 	add.w	r3, r3, #8
   d65ee:	d1f6      	bne.n	d65de <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d65f0:	bd10      	pop	{r4, pc}
        return nullptr;
   d65f2:	2000      	movs	r0, #0
   d65f4:	e7fc      	b.n	d65f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d65f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d65f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65fa:	4606      	mov	r6, r0
   d65fc:	b085      	sub	sp, #20
   d65fe:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6600:	460d      	mov	r5, r1
   d6602:	2900      	cmp	r1, #0
   d6604:	d050      	beq.n	d66a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d6606:	2a00      	cmp	r2, #0
   d6608:	d04e      	beq.n	d66a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d660a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d660c:	7823      	ldrb	r3, [r4, #0]
   d660e:	2af4      	cmp	r2, #244	; 0xf4
   d6610:	bf28      	it	cs
   d6612:	22f4      	movcs	r2, #244	; 0xf4
   d6614:	b343      	cbz	r3, d6668 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d6616:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6618:	0798      	lsls	r0, r3, #30
   d661a:	d509      	bpl.n	d6630 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d661c:	89a0      	ldrh	r0, [r4, #12]
   d661e:	9203      	str	r2, [sp, #12]
   d6620:	2300      	movs	r3, #0
   d6622:	f7ff f8c7 	bl	d57b4 <hal_ble_gatt_server_set_characteristic_value>
   d6626:	2800      	cmp	r0, #0
   d6628:	9a03      	ldr	r2, [sp, #12]
   d662a:	da03      	bge.n	d6634 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d662c:	b005      	add	sp, #20
   d662e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6630:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6634:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d6636:	7923      	ldrb	r3, [r4, #4]
   d6638:	06d9      	lsls	r1, r3, #27
   d663a:	d509      	bpl.n	d6650 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d663c:	2f01      	cmp	r7, #1
   d663e:	d007      	beq.n	d6650 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6640:	89a0      	ldrh	r0, [r4, #12]
   d6642:	2300      	movs	r3, #0
   d6644:	4629      	mov	r1, r5
}
   d6646:	b005      	add	sp, #20
   d6648:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d664c:	f7ff b8ee 	b.w	d582c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6650:	069b      	lsls	r3, r3, #26
   d6652:	d5eb      	bpl.n	d662c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6654:	2f02      	cmp	r7, #2
   d6656:	d0e9      	beq.n	d662c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6658:	89a0      	ldrh	r0, [r4, #12]
   d665a:	2300      	movs	r3, #0
   d665c:	4629      	mov	r1, r5
}
   d665e:	b005      	add	sp, #20
   d6660:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6664:	f7ff b8ec 	b.w	d5840 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d6668:	8860      	ldrh	r0, [r4, #2]
   d666a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d666e:	4288      	cmp	r0, r1
   d6670:	d01c      	beq.n	d66ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d6672:	7921      	ldrb	r1, [r4, #4]
   d6674:	074e      	lsls	r6, r1, #29
   d6676:	d501      	bpl.n	d667c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d6678:	2f01      	cmp	r7, #1
   d667a:	d104      	bne.n	d6686 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d667c:	070b      	lsls	r3, r1, #28
   d667e:	d409      	bmi.n	d6694 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d6680:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6684:	e7d2      	b.n	d662c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6686:	89a1      	ldrh	r1, [r4, #12]
   d6688:	9300      	str	r3, [sp, #0]
   d668a:	4613      	mov	r3, r2
   d668c:	462a      	mov	r2, r5
   d668e:	f7ff f8a5 	bl	d57dc <hal_ble_gatt_client_write_without_response>
   d6692:	e7cb      	b.n	d662c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6694:	2f02      	cmp	r7, #2
   d6696:	d0f3      	beq.n	d6680 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6698:	2300      	movs	r3, #0
   d669a:	89a1      	ldrh	r1, [r4, #12]
   d669c:	9300      	str	r3, [sp, #0]
   d669e:	4613      	mov	r3, r2
   d66a0:	462a      	mov	r2, r5
   d66a2:	f7ff f891 	bl	d57c8 <hal_ble_gatt_client_write_with_response>
   d66a6:	e7c1      	b.n	d662c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d66a8:	4802      	ldr	r0, [pc, #8]	; (d66b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d66aa:	e7bf      	b.n	d662c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d66ac:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d66b0:	e7bc      	b.n	d662c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d66b2:	bf00      	nop
   d66b4:	fffffef2 	.word	0xfffffef2

000d66b8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d66b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d66bc:	2600      	movs	r6, #0
   d66be:	6006      	str	r6, [r0, #0]
   d66c0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d66c2:	2028      	movs	r0, #40	; 0x28
   d66c4:	460c      	mov	r4, r1
   d66c6:	f7fd fce4 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d66ca:	1e05      	subs	r5, r0, #0
   d66cc:	f105 080c 	add.w	r8, r5, #12
   d66d0:	d00f      	beq.n	d66f2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d66d2:	2301      	movs	r3, #1
   d66d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d66d8:	4b08      	ldr	r3, [pc, #32]	; (d66fc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d66da:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d66dc:	4640      	mov	r0, r8
   d66de:	f7ff fe15 	bl	d630c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d66e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d66e4:	622e      	str	r6, [r5, #32]
   d66e6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d66ea:	4646      	mov	r6, r8
   d66ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d66ee:	6823      	ldr	r3, [r4, #0]
   d66f0:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d66f2:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d66f6:	4638      	mov	r0, r7
   d66f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66fc:	000d8de8 	.word	0x000d8de8

000d6700 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6700:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6702:	2500      	movs	r5, #0
   d6704:	6005      	str	r5, [r0, #0]
   d6706:	4606      	mov	r6, r0
   d6708:	2030      	movs	r0, #48	; 0x30
   d670a:	f7fd fcc2 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d670e:	4604      	mov	r4, r0
   d6710:	b188      	cbz	r0, d6736 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6712:	2301      	movs	r3, #1
   d6714:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6718:	4b09      	ldr	r3, [pc, #36]	; (d6740 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d671a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d671c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6720:	8183      	strh	r3, [r0, #12]
   d6722:	300e      	adds	r0, #14
   d6724:	f7ff fde7 	bl	d62f6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6728:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d672c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d6730:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d6734:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d6736:	6074      	str	r4, [r6, #4]
   d6738:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d673a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d673c:	4630      	mov	r0, r6
   d673e:	bd70      	pop	{r4, r5, r6, pc}
   d6740:	000d8e04 	.word	0x000d8e04

000d6744 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d6744:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6746:	460d      	mov	r5, r1
   d6748:	4604      	mov	r4, r0
    WiringBleLock lk;
   d674a:	a801      	add	r0, sp, #4
   d674c:	f7ff fda2 	bl	d6294 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d6750:	682a      	ldr	r2, [r5, #0]
   d6752:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6756:	6023      	str	r3, [r4, #0]
   d6758:	6853      	ldr	r3, [r2, #4]
   d675a:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d675c:	a801      	add	r0, sp, #4
   d675e:	f7ff fda1 	bl	d62a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d6762:	4620      	mov	r0, r4
   d6764:	b003      	add	sp, #12
   d6766:	bd30      	pop	{r4, r5, pc}

000d6768 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6768:	b530      	push	{r4, r5, lr}
   d676a:	4605      	mov	r5, r0
   d676c:	b087      	sub	sp, #28
   d676e:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6770:	a801      	add	r0, sp, #4
   d6772:	f7ff fd8f 	bl	d6294 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6776:	682a      	ldr	r2, [r5, #0]
   d6778:	6823      	ldr	r3, [r4, #0]
   d677a:	8812      	ldrh	r2, [r2, #0]
   d677c:	881b      	ldrh	r3, [r3, #0]
   d677e:	429a      	cmp	r2, r3
   d6780:	d10d      	bne.n	d679e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d6782:	4629      	mov	r1, r5
   d6784:	a802      	add	r0, sp, #8
   d6786:	f7ff ffdd 	bl	d6744 <_ZNK8particle13BlePeerDevice7addressEv>
   d678a:	4621      	mov	r1, r4
   d678c:	a804      	add	r0, sp, #16
   d678e:	f7ff ffd9 	bl	d6744 <_ZNK8particle13BlePeerDevice7addressEv>
   d6792:	a904      	add	r1, sp, #16
   d6794:	a802      	add	r0, sp, #8
   d6796:	f7ff fd9a 	bl	d62ce <_ZNK8particle10BleAddresseqERKS0_>
   d679a:	4604      	mov	r4, r0
   d679c:	b900      	cbnz	r0, d67a0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d679e:	2400      	movs	r4, #0
    WiringBleLock lk;
   d67a0:	a801      	add	r0, sp, #4
   d67a2:	f7ff fd7f 	bl	d62a4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d67a6:	4620      	mov	r0, r4
   d67a8:	b007      	add	sp, #28
   d67aa:	bd30      	pop	{r4, r5, pc}

000d67ac <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d67ac:	b510      	push	{r4, lr}
   d67ae:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d67b0:	2054      	movs	r0, #84	; 0x54
   d67b2:	f7fd fc6e 	bl	d4092 <_Znwj>
   d67b6:	4601      	mov	r1, r0
   d67b8:	b160      	cbz	r0, d67d4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d67ba:	2300      	movs	r3, #0
   d67bc:	e9c0 3300 	strd	r3, r3, [r0]
   d67c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d67c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d67c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d67cc:	6203      	str	r3, [r0, #32]
   d67ce:	62c3      	str	r3, [r0, #44]	; 0x2c
   d67d0:	63c3      	str	r3, [r0, #60]	; 0x3c
   d67d2:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d67d4:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d67d6:	b919      	cbnz	r1, d67e0 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d67d8:	4a09      	ldr	r2, [pc, #36]	; (d6800 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d67da:	200a      	movs	r0, #10
   d67dc:	f7ff f9aa 	bl	d5b34 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d67e0:	2000      	movs	r0, #0
   d67e2:	f7fe ffb3 	bl	d574c <hal_ble_stack_init>
   d67e6:	b120      	cbz	r0, d67f2 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d67e8:	4a05      	ldr	r2, [pc, #20]	; (d6800 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d67ea:	2100      	movs	r1, #0
   d67ec:	200a      	movs	r0, #10
   d67ee:	f7ff f9a1 	bl	d5b34 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d67f2:	6821      	ldr	r1, [r4, #0]
   d67f4:	4803      	ldr	r0, [pc, #12]	; (d6804 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d67f6:	2200      	movs	r2, #0
   d67f8:	f7ff f80e 	bl	d5818 <hal_ble_set_callback_on_periph_link_events>
}
   d67fc:	4620      	mov	r0, r4
   d67fe:	bd10      	pop	{r4, pc}
   d6800:	000d572d 	.word	0x000d572d
   d6804:	000d6c15 	.word	0x000d6c15

000d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6808:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d680a:	4c0b      	ldr	r4, [pc, #44]	; (d6838 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d680c:	7823      	ldrb	r3, [r4, #0]
   d680e:	f3bf 8f5b 	dmb	ish
   d6812:	07db      	lsls	r3, r3, #31
   d6814:	d40e      	bmi.n	d6834 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6816:	4620      	mov	r0, r4
   d6818:	f7fd fc4c 	bl	d40b4 <__cxa_guard_acquire>
   d681c:	b150      	cbz	r0, d6834 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d681e:	4807      	ldr	r0, [pc, #28]	; (d683c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6820:	f7ff ffc4 	bl	d67ac <_ZN8particle14BleLocalDeviceC1Ev>
   d6824:	4620      	mov	r0, r4
   d6826:	f7fd fc4a 	bl	d40be <__cxa_guard_release>
   d682a:	4a05      	ldr	r2, [pc, #20]	; (d6840 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d682c:	4905      	ldr	r1, [pc, #20]	; (d6844 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d682e:	4803      	ldr	r0, [pc, #12]	; (d683c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6830:	f001 fa6e 	bl	d7d10 <__aeabi_atexit>
    return instance;
}
   d6834:	4801      	ldr	r0, [pc, #4]	; (d683c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6836:	bd10      	pop	{r4, pc}
   d6838:	2003e65c 	.word	0x2003e65c
   d683c:	2003e668 	.word	0x2003e668
   d6840:	2003e578 	.word	0x2003e578
   d6844:	000d6a1d 	.word	0x000d6a1d

000d6848 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6848:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d684a:	6803      	ldr	r3, [r0, #0]
   d684c:	3b09      	subs	r3, #9
   d684e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6850:	b08d      	sub	sp, #52	; 0x34
   d6852:	4604      	mov	r4, r0
   d6854:	460d      	mov	r5, r1
    switch (event->type) {
   d6856:	d811      	bhi.n	d687c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6858:	f7ff ffd6 	bl	d6808 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d685c:	88a1      	ldrh	r1, [r4, #4]
   d685e:	6800      	ldr	r0, [r0, #0]
   d6860:	f7ff feb8 	bl	d65d4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6864:	4603      	mov	r3, r0
   d6866:	b958      	cbnz	r0, d6880 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6868:	2220      	movs	r2, #32
   d686a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d686e:	4a0b      	ldr	r2, [pc, #44]	; (d689c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d6870:	9200      	str	r2, [sp, #0]
   d6872:	490b      	ldr	r1, [pc, #44]	; (d68a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d6874:	aa04      	add	r2, sp, #16
   d6876:	2032      	movs	r0, #50	; 0x32
   d6878:	f7ff f964 	bl	d5b44 <log_message>
}
   d687c:	b00d      	add	sp, #52	; 0x34
   d687e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d6880:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d6882:	2a00      	cmp	r2, #0
   d6884:	d0fa      	beq.n	d687c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d6886:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d688a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d688e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6892:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6894:	aa04      	add	r2, sp, #16
   d6896:	a903      	add	r1, sp, #12
   d6898:	47a0      	blx	r4
}
   d689a:	e7ef      	b.n	d687c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d689c:	000d8cf7 	.word	0x000d8cf7
   d68a0:	000d8cd0 	.word	0x000d8cd0

000d68a4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d68a4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d68a6:	2000      	movs	r0, #0
   d68a8:	f7fe ff50 	bl	d574c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d68ac:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d68b0:	bd08      	pop	{r3, pc}

000d68b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d68b2:	4608      	mov	r0, r1
   d68b4:	b911      	cbnz	r1, d68bc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d68b6:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d68b8:	f7fe bf50 	b.w	d575c <hal_ble_gap_set_advertising_data>
   d68bc:	6a09      	ldr	r1, [r1, #32]
   d68be:	2200      	movs	r2, #0
   d68c0:	e7fa      	b.n	d68b8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d68c2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d68c2:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d68c4:	4608      	mov	r0, r1
   d68c6:	b929      	cbnz	r1, d68d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d68c8:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d68ca:	b003      	add	sp, #12
   d68cc:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d68d0:	f7fe bf4c 	b.w	d576c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d68d4:	2101      	movs	r1, #1
   d68d6:	9001      	str	r0, [sp, #4]
   d68d8:	f7ff fe40 	bl	d655c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d68dc:	9801      	ldr	r0, [sp, #4]
   d68de:	2200      	movs	r2, #0
   d68e0:	6a01      	ldr	r1, [r0, #32]
   d68e2:	e7f2      	b.n	d68ca <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d68e4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d68e4:	b538      	push	{r3, r4, r5, lr}
   d68e6:	4604      	mov	r4, r0
   d68e8:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d68ea:	f7ff ffe2 	bl	d68b2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d68ee:	2800      	cmp	r0, #0
   d68f0:	db0a      	blt.n	d6908 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d68f2:	4629      	mov	r1, r5
   d68f4:	4620      	mov	r0, r4
   d68f6:	f7ff ffe4 	bl	d68c2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d68fa:	2800      	cmp	r0, #0
   d68fc:	db04      	blt.n	d6908 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d68fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6902:	2000      	movs	r0, #0
   d6904:	f7fe bf3a 	b.w	d577c <hal_ble_gap_start_advertising>
}
   d6908:	bd38      	pop	{r3, r4, r5, pc}

000d690a <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d690a:	6803      	ldr	r3, [r0, #0]
   d690c:	69d8      	ldr	r0, [r3, #28]
}
   d690e:	2800      	cmp	r0, #0
   d6910:	bfd4      	ite	le
   d6912:	2000      	movle	r0, #0
   d6914:	2001      	movgt	r0, #1
   d6916:	4770      	bx	lr

000d6918 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6918:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d691a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d691c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d691e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6920:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6922:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6924:	f7fd fbb5 	bl	d4092 <_Znwj>
   d6928:	b118      	cbz	r0, d6932 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d692a:	682b      	ldr	r3, [r5, #0]
   d692c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d692e:	686b      	ldr	r3, [r5, #4]
   d6930:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6932:	4b03      	ldr	r3, [pc, #12]	; (d6940 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6934:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6936:	4b03      	ldr	r3, [pc, #12]	; (d6944 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6938:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d693a:	60a3      	str	r3, [r4, #8]
      }
   d693c:	4620      	mov	r0, r4
   d693e:	bd38      	pop	{r3, r4, r5, pc}
   d6940:	000d622b 	.word	0x000d622b
   d6944:	000d61ed 	.word	0x000d61ed

000d6948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6948:	680b      	ldr	r3, [r1, #0]
   d694a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d694c:	b113      	cbz	r3, d6954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d694e:	685a      	ldr	r2, [r3, #4]
   d6950:	3201      	adds	r2, #1
   d6952:	605a      	str	r2, [r3, #4]
      }
   d6954:	4770      	bx	lr

000d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6956:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6958:	f851 3b04 	ldr.w	r3, [r1], #4
   d695c:	4604      	mov	r4, r0
   d695e:	f840 3b04 	str.w	r3, [r0], #4
   d6962:	f7ff fff1 	bl	d6948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6966:	6823      	ldr	r3, [r4, #0]
   d6968:	b90b      	cbnz	r3, d696e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d696a:	f7ff fc37 	bl	d61dc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d696e:	4620      	mov	r0, r4
   d6970:	bd10      	pop	{r4, pc}

000d6972 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6972:	b510      	push	{r4, lr}
   d6974:	f851 3b04 	ldr.w	r3, [r1], #4
   d6978:	4604      	mov	r4, r0
   d697a:	f840 3b04 	str.w	r3, [r0], #4
   d697e:	f7ff ffe3 	bl	d6948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6982:	4620      	mov	r0, r4
   d6984:	bd10      	pop	{r4, pc}

000d6986 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6986:	b510      	push	{r4, lr}
   d6988:	f851 3b04 	ldr.w	r3, [r1], #4
   d698c:	4604      	mov	r4, r0
   d698e:	f840 3b04 	str.w	r3, [r0], #4
   d6992:	f7ff ffd9 	bl	d6948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6996:	4620      	mov	r0, r4
   d6998:	bd10      	pop	{r4, pc}

000d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d699a:	b510      	push	{r4, lr}
   d699c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d699e:	6800      	ldr	r0, [r0, #0]
   d69a0:	b128      	cbz	r0, d69ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d69a2:	6843      	ldr	r3, [r0, #4]
   d69a4:	3b01      	subs	r3, #1
   d69a6:	6043      	str	r3, [r0, #4]
   d69a8:	b90b      	cbnz	r3, d69ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d69aa:	f7ff fb8a 	bl	d60c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d69ae:	4620      	mov	r0, r4
   d69b0:	bd10      	pop	{r4, pc}

000d69b2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d69b2:	b510      	push	{r4, lr}
   d69b4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d69b6:	3004      	adds	r0, #4
   d69b8:	f7ff ffef 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d69bc:	4620      	mov	r0, r4
   d69be:	bd10      	pop	{r4, pc}

000d69c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69c0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d69c2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69c6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d69c8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d69cc:	42ae      	cmp	r6, r5
   d69ce:	d004      	beq.n	d69da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d69d0:	1d28      	adds	r0, r5, #4
   d69d2:	f7ff ffe2 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69d6:	3508      	adds	r5, #8
   d69d8:	e7f8      	b.n	d69cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d69da:	6820      	ldr	r0, [r4, #0]
   d69dc:	f7ff f956 	bl	d5c8c <free>
}
   d69e0:	4620      	mov	r0, r4
   d69e2:	bd70      	pop	{r4, r5, r6, pc}

000d69e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d69e6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69ea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d69ec:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d69f0:	42ae      	cmp	r6, r5
   d69f2:	d004      	beq.n	d69fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d69f4:	1d28      	adds	r0, r5, #4
   d69f6:	f7ff ffd0 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69fa:	3508      	adds	r5, #8
   d69fc:	e7f8      	b.n	d69f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d69fe:	6820      	ldr	r0, [r4, #0]
   d6a00:	f7ff f944 	bl	d5c8c <free>
}
   d6a04:	4620      	mov	r0, r4
   d6a06:	bd70      	pop	{r4, r5, r6, pc}

000d6a08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6a08:	b510      	push	{r4, lr}
   d6a0a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6a0c:	3024      	adds	r0, #36	; 0x24
   d6a0e:	f7ff ffe9 	bl	d69e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6a12:	f104 0018 	add.w	r0, r4, #24
   d6a16:	f7ff ffd3 	bl	d69c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6a1a:	bd10      	pop	{r4, pc}

000d6a1c <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6a1e:	6804      	ldr	r4, [r0, #0]
   d6a20:	4606      	mov	r6, r0
   d6a22:	b324      	cbz	r4, d6a6e <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6a24:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6a28:	f7ff fc0b 	bl	d6242 <_ZNSt14_Function_baseD1Ev>
   d6a2c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6a30:	f7ff fc07 	bl	d6242 <_ZNSt14_Function_baseD1Ev>
   d6a34:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6a38:	f7ff fc03 	bl	d6242 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6a3c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6a40:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6a44:	42af      	cmp	r7, r5
   d6a46:	d004      	beq.n	d6a52 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d6a48:	1d28      	adds	r0, r5, #4
   d6a4a:	f7ff ffa6 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a4e:	3508      	adds	r5, #8
   d6a50:	e7f8      	b.n	d6a44 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d6a52:	69a0      	ldr	r0, [r4, #24]
   d6a54:	f7ff f91a 	bl	d5c8c <free>
    ~BleLocalDeviceImpl() = default;
   d6a58:	f104 000c 	add.w	r0, r4, #12
   d6a5c:	f7ff ffc2 	bl	d69e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6a60:	4620      	mov	r0, r4
   d6a62:	f7ff ffad 	bl	d69c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6a66:	2154      	movs	r1, #84	; 0x54
   d6a68:	4620      	mov	r0, r4
   d6a6a:	f001 f956 	bl	d7d1a <_ZdlPvj>
   d6a6e:	4630      	mov	r0, r6
   d6a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a72 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d6a72:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6a74:	b510      	push	{r4, lr}
      if (_M_empty())
   d6a76:	b90a      	cbnz	r2, d6a7c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6a78:	f001 f953 	bl	d7d22 <_ZSt25__throw_bad_function_callv>
    }
   d6a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a80:	68c3      	ldr	r3, [r0, #12]
   d6a82:	4718      	bx	r3

000d6a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6a84:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a88:	4604      	mov	r4, r0
   d6a8a:	460d      	mov	r5, r1
   d6a8c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6a8e:	d914      	bls.n	d6aba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6a90:	4290      	cmp	r0, r2
   d6a92:	d213      	bcs.n	d6abc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6a94:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6a98:	1a75      	subs	r5, r6, r1
   d6a9a:	f1a1 0708 	sub.w	r7, r1, #8
   d6a9e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6aa0:	42b7      	cmp	r7, r6
   d6aa2:	d018      	beq.n	d6ad6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6aa4:	b11c      	cbz	r4, d6aae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6aa6:	4631      	mov	r1, r6
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	f7ff ff6c 	bl	d6986 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6aae:	1d30      	adds	r0, r6, #4
   d6ab0:	f7ff ff73 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6ab4:	3e08      	subs	r6, #8
   d6ab6:	3c08      	subs	r4, #8
   d6ab8:	e7f2      	b.n	d6aa0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6aba:	d00c      	beq.n	d6ad6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6abc:	42b5      	cmp	r5, r6
   d6abe:	d00a      	beq.n	d6ad6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6ac0:	b11c      	cbz	r4, d6aca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6ac2:	4629      	mov	r1, r5
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	f7ff ff5e 	bl	d6986 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6aca:	1d28      	adds	r0, r5, #4
   d6acc:	f7ff ff65 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6ad0:	3508      	adds	r5, #8
   d6ad2:	3408      	adds	r4, #8
   d6ad4:	e7f2      	b.n	d6abc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ad8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6adc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6ae0:	4605      	mov	r5, r0
   d6ae2:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6ae4:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6ae8:	42a7      	cmp	r7, r4
   d6aea:	d103      	bne.n	d6af4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6aec:	2600      	movs	r6, #0
}
   d6aee:	4630      	mov	r0, r6
   d6af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6af4:	4641      	mov	r1, r8
   d6af6:	4620      	mov	r0, r4
   d6af8:	f7ff fe36 	bl	d6768 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6afc:	4606      	mov	r6, r0
   d6afe:	b908      	cbnz	r0, d6b04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6b00:	3408      	adds	r4, #8
   d6b02:	e7f1      	b.n	d6ae8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6b04:	2c00      	cmp	r4, #0
   d6b06:	d0f1      	beq.n	d6aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6b08:	1d20      	adds	r0, r4, #4
   d6b0a:	f7ff ff46 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6b0e:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6b12:	f104 0108 	add.w	r1, r4, #8
   d6b16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6b1a:	4620      	mov	r0, r4
   d6b1c:	f7ff ffb2 	bl	d6a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6b20:	686b      	ldr	r3, [r5, #4]
   d6b22:	3b01      	subs	r3, #1
   d6b24:	606b      	str	r3, [r5, #4]
    return true;
   d6b26:	e7e2      	b.n	d6aee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6b28 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d6b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b2a:	4607      	mov	r7, r0
   d6b2c:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d6b2e:	4668      	mov	r0, sp
   d6b30:	f7ff fbb0 	bl	d6294 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6b34:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d6b36:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d6b3a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d6b3e:	42ac      	cmp	r4, r5
   d6b40:	d02b      	beq.n	d6b9a <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d6b42:	2224      	movs	r2, #36	; 0x24
   d6b44:	2100      	movs	r1, #0
   d6b46:	a801      	add	r0, sp, #4
   d6b48:	f001 fa44 	bl	d7fd4 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d6b4c:	6823      	ldr	r3, [r4, #0]
   d6b4e:	2200      	movs	r2, #0
   d6b50:	8818      	ldrh	r0, [r3, #0]
   d6b52:	a901      	add	r1, sp, #4
   d6b54:	f7fe fe4c 	bl	d57f0 <hal_ble_gap_get_connection_info>
   d6b58:	4606      	mov	r6, r0
   d6b5a:	b108      	cbz	r0, d6b60 <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d6b5c:	3408      	adds	r4, #8
   d6b5e:	e7ee      	b.n	d6b3e <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d6b60:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6b64:	2b01      	cmp	r3, #1
   d6b66:	d1f9      	bne.n	d6b5c <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d6b68:	4668      	mov	r0, sp
   d6b6a:	f7ff facf 	bl	d610c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d6b6e:	6823      	ldr	r3, [r4, #0]
   d6b70:	4631      	mov	r1, r6
   d6b72:	8818      	ldrh	r0, [r3, #0]
   d6b74:	f7fe fe0a 	bl	d578c <hal_ble_gap_disconnect>
   d6b78:	1e05      	subs	r5, r0, #0
   d6b7a:	db08      	blt.n	d6b8e <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d6b7c:	4668      	mov	r0, sp
   d6b7e:	f7ff fab9 	bl	d60f4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d6b82:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d6b84:	4621      	mov	r1, r4
   d6b86:	3018      	adds	r0, #24
   d6b88:	f7ff ffa6 	bl	d6ad8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d6b8c:	4635      	mov	r5, r6
    WiringBleLock lk;
   d6b8e:	4668      	mov	r0, sp
   d6b90:	f7ff fb88 	bl	d62a4 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d6b94:	4628      	mov	r0, r5
   d6b96:	b00b      	add	sp, #44	; 0x2c
   d6b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d6b9a:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d6b9e:	e7f6      	b.n	d6b8e <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d6ba0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6ba2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6ba4:	6846      	ldr	r6, [r0, #4]
   d6ba6:	4668      	mov	r0, sp
   d6ba8:	f7ff feed 	bl	d6986 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6bac:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6bb0:	429f      	cmp	r7, r3
   d6bb2:	db12      	blt.n	d6bda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6bb4:	3701      	adds	r7, #1
        if (n > 0) {
   d6bb6:	2f00      	cmp	r7, #0
   d6bb8:	dd29      	ble.n	d6c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d6bba:	00f8      	lsls	r0, r7, #3
   d6bbc:	f7ff f85e 	bl	d5c7c <malloc>
            if (!d) {
   d6bc0:	4605      	mov	r5, r0
   d6bc2:	b1f0      	cbz	r0, d6c02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6bc4:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6bc8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6bcc:	f7ff ff5a 	bl	d6a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6bd0:	6820      	ldr	r0, [r4, #0]
   d6bd2:	f7ff f85b 	bl	d5c8c <free>
        data_ = d;
   d6bd6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6bd8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d6bda:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6bdc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6bde:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6be2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6be6:	4631      	mov	r1, r6
   d6be8:	f106 0008 	add.w	r0, r6, #8
   d6bec:	f7ff ff4a 	bl	d6a84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6bf0:	b11e      	cbz	r6, d6bfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6bf2:	4669      	mov	r1, sp
   d6bf4:	4630      	mov	r0, r6
   d6bf6:	f7ff fec6 	bl	d6986 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6bfa:	6863      	ldr	r3, [r4, #4]
   d6bfc:	3301      	adds	r3, #1
   d6bfe:	6063      	str	r3, [r4, #4]
    return true;
   d6c00:	2501      	movs	r5, #1
   d6c02:	a801      	add	r0, sp, #4
   d6c04:	f7ff fec9 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6c08:	4628      	mov	r0, r5
   d6c0a:	b003      	add	sp, #12
   d6c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6c0e:	2500      	movs	r5, #0
   d6c10:	e7de      	b.n	d6bd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6c14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c18:	4605      	mov	r5, r0
   d6c1a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6c1c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6c1e:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6c20:	f7ff fb38 	bl	d6294 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6c24:	682e      	ldr	r6, [r5, #0]
   d6c26:	2e04      	cmp	r6, #4
   d6c28:	d06b      	beq.n	d6d02 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d6c2a:	d807      	bhi.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6c2c:	2e03      	cmp	r6, #3
   d6c2e:	d028      	beq.n	d6c82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6c30:	a803      	add	r0, sp, #12
   d6c32:	f7ff fb37 	bl	d62a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6c36:	b00e      	add	sp, #56	; 0x38
   d6c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6c3c:	f1a6 030c 	sub.w	r3, r6, #12
   d6c40:	2b03      	cmp	r3, #3
   d6c42:	d8f5      	bhi.n	d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6c44:	89a9      	ldrh	r1, [r5, #12]
   d6c46:	4620      	mov	r0, r4
   d6c48:	f7ff fcc4 	bl	d65d4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6c4c:	4607      	mov	r7, r0
   d6c4e:	2800      	cmp	r0, #0
   d6c50:	d0ee      	beq.n	d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6c52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6c54:	2b00      	cmp	r3, #0
   d6c56:	d0eb      	beq.n	d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6c58:	2210      	movs	r2, #16
   d6c5a:	2100      	movs	r1, #0
   d6c5c:	a807      	add	r0, sp, #28
   d6c5e:	f001 f9b9 	bl	d7fd4 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6c62:	2e0d      	cmp	r6, #13
                        };
   d6c64:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6c66:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6c6a:	f040 8092 	bne.w	d6d92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6c6e:	686b      	ldr	r3, [r5, #4]
   d6c70:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6c72:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6c74:	9308      	str	r3, [sp, #32]
   d6c76:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6c78:	a906      	add	r1, sp, #24
   d6c7a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6c7e:	4798      	blx	r3
   d6c80:	e7d6      	b.n	d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6c82:	a804      	add	r0, sp, #16
   d6c84:	f7ff fd3c 	bl	d6700 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6c88:	9b04      	ldr	r3, [sp, #16]
   d6c8a:	89aa      	ldrh	r2, [r5, #12]
   d6c8c:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6c8e:	6869      	ldr	r1, [r5, #4]
   d6c90:	9804      	ldr	r0, [sp, #16]
   d6c92:	3108      	adds	r1, #8
   d6c94:	3002      	adds	r0, #2
   d6c96:	f7ff fb0d 	bl	d62b4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d6c9a:	a904      	add	r1, sp, #16
   d6c9c:	a806      	add	r0, sp, #24
   d6c9e:	f7ff fe72 	bl	d6986 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6ca2:	a906      	add	r1, sp, #24
   d6ca4:	f104 0018 	add.w	r0, r4, #24
   d6ca8:	f7ff ff7a 	bl	d6ba0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6cac:	4605      	mov	r5, r0
   d6cae:	a807      	add	r0, sp, #28
   d6cb0:	f7ff fe73 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cb4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6cb6:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6cb8:	b98d      	cbnz	r5, d6cde <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6cba:	4b3e      	ldr	r3, [pc, #248]	; (d6db4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6cbc:	493e      	ldr	r1, [pc, #248]	; (d6db8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6cbe:	9300      	str	r3, [sp, #0]
   d6cc0:	2032      	movs	r0, #50	; 0x32
   d6cc2:	462b      	mov	r3, r5
   d6cc4:	aa06      	add	r2, sp, #24
   d6cc6:	9507      	str	r5, [sp, #28]
   d6cc8:	f7fe ff3c 	bl	d5b44 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6ccc:	9b04      	ldr	r3, [sp, #16]
   d6cce:	4629      	mov	r1, r5
   d6cd0:	8818      	ldrh	r0, [r3, #0]
   d6cd2:	f7fe fd5b 	bl	d578c <hal_ble_gap_disconnect>
   d6cd6:	a805      	add	r0, sp, #20
   d6cd8:	f7ff fe5f 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cdc:	e7a8      	b.n	d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6cde:	4a37      	ldr	r2, [pc, #220]	; (d6dbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6ce0:	9200      	str	r2, [sp, #0]
   d6ce2:	2300      	movs	r3, #0
   d6ce4:	4934      	ldr	r1, [pc, #208]	; (d6db8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6ce6:	9307      	str	r3, [sp, #28]
   d6ce8:	aa06      	add	r2, sp, #24
   d6cea:	2001      	movs	r0, #1
   d6cec:	f7fe ff2a 	bl	d5b44 <log_message>
                if (impl->connectedCallback_) {
   d6cf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6cf2:	2b00      	cmp	r3, #0
   d6cf4:	d0ef      	beq.n	d6cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d6cf6:	a904      	add	r1, sp, #16
   d6cf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6cfc:	f7ff feb9 	bl	d6a72 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6d00:	e7e9      	b.n	d6cd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6d02:	89a9      	ldrh	r1, [r5, #12]
   d6d04:	4620      	mov	r0, r4
   d6d06:	f7ff fc65 	bl	d65d4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6d0a:	4606      	mov	r6, r0
   d6d0c:	2800      	cmp	r0, #0
   d6d0e:	d08f      	beq.n	d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6d10:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6d12:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6d1a:	802a      	strh	r2, [r5, #0]
   d6d1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6d20:	4299      	cmp	r1, r3
   d6d22:	d003      	beq.n	d6d2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6d24:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6d28:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d6d2a:	e7f9      	b.n	d6d20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6d2c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6d30:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6d34:	45b8      	cmp	r8, r7
   d6d36:	d004      	beq.n	d6d42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d6d38:	1d38      	adds	r0, r7, #4
   d6d3a:	f7ff fe2e 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d3e:	3708      	adds	r7, #8
   d6d40:	e7f8      	b.n	d6d34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6d42:	2300      	movs	r3, #0
   d6d44:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d6d46:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d6d4a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6d4e:	45b8      	cmp	r8, r7
   d6d50:	d004      	beq.n	d6d5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6d52:	1d38      	adds	r0, r7, #4
   d6d54:	f7ff fe21 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d58:	3708      	adds	r7, #8
   d6d5a:	e7f8      	b.n	d6d4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d6d5c:	2300      	movs	r3, #0
   d6d5e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d6d60:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d6d62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d64:	b123      	cbz	r3, d6d70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d6d66:	4631      	mov	r1, r6
   d6d68:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6d6c:	f7ff fe81 	bl	d6a72 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6d70:	2300      	movs	r3, #0
   d6d72:	2220      	movs	r2, #32
   d6d74:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6d78:	4a11      	ldr	r2, [pc, #68]	; (d6dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6d7a:	9200      	str	r2, [sp, #0]
   d6d7c:	490e      	ldr	r1, [pc, #56]	; (d6db8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6d7e:	aa06      	add	r2, sp, #24
   d6d80:	2001      	movs	r0, #1
   d6d82:	f7fe fedf 	bl	d5b44 <log_message>
                    impl->peers_.removeOne(*peer);
   d6d86:	4631      	mov	r1, r6
   d6d88:	f104 0018 	add.w	r0, r4, #24
   d6d8c:	f7ff fea4 	bl	d6ad8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6d90:	e74e      	b.n	d6c30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6d92:	2e0f      	cmp	r6, #15
   d6d94:	f47f af6f 	bne.w	d6c76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6d98:	686b      	ldr	r3, [r5, #4]
   d6d9a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6d9c:	7a2b      	ldrb	r3, [r5, #8]
   d6d9e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6da2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6daa:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6dae:	2308      	movs	r3, #8
   d6db0:	e760      	b.n	d6c74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6db2:	bf00      	nop
   d6db4:	000d8d0f 	.word	0x000d8d0f
   d6db8:	000d8cd0 	.word	0x000d8cd0
   d6dbc:	000d8d35 	.word	0x000d8d35
   d6dc0:	000d8d52 	.word	0x000d8d52

000d6dc4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6dc4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6dc6:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6dc8:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6dca:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6dce:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6dd2:	6823      	ldr	r3, [r4, #0]
   d6dd4:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dd6:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6dd8:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d6dda:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d6ddc:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d6dde:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d6de0:	f7ff fddb 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d6de4:	4620      	mov	r0, r4
   d6de6:	b002      	add	sp, #8
   d6de8:	bd10      	pop	{r4, pc}

000d6dea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6dea:	b513      	push	{r0, r1, r4, lr}
   d6dec:	460b      	mov	r3, r1
   d6dee:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6df0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6df4:	466c      	mov	r4, sp
   d6df6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6dfa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6dfe:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6e02:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6e06:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6e0a:	b002      	add	sp, #8
   d6e0c:	bd10      	pop	{r4, pc}

000d6e0e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d6e0e:	b538      	push	{r3, r4, r5, lr}
   d6e10:	4605      	mov	r5, r0
   d6e12:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d6e14:	f7ff ffe9 	bl	d6dea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e18:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6e1a:	68a2      	ldr	r2, [r4, #8]
   d6e1c:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e1e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e20:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6e22:	68e2      	ldr	r2, [r4, #12]
   d6e24:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e26:	60e3      	str	r3, [r4, #12]
      }
   d6e28:	bd38      	pop	{r3, r4, r5, pc}

000d6e2a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d6e2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6e2c:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d6e2e:	4604      	mov	r4, r0
   d6e30:	4608      	mov	r0, r1
	__x.swap(*this);
   d6e32:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d6e34:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d6e36:	f7ff ffea 	bl	d6e0e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d6e3a:	4621      	mov	r1, r4
   d6e3c:	4668      	mov	r0, sp
   d6e3e:	f7ff ffe6 	bl	d6e0e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d6e42:	4668      	mov	r0, sp
   d6e44:	f7ff f9fd 	bl	d6242 <_ZNSt14_Function_baseD1Ev>
      }
   d6e48:	4620      	mov	r0, r4
   d6e4a:	b004      	add	sp, #16
   d6e4c:	bd10      	pop	{r4, pc}

000d6e4e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d6e4e:	b570      	push	{r4, r5, r6, lr}
   d6e50:	460e      	mov	r6, r1
   d6e52:	b088      	sub	sp, #32
   d6e54:	4604      	mov	r4, r0
   d6e56:	9201      	str	r2, [sp, #4]
   d6e58:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d6e5a:	f7ff fb9b 	bl	d6594 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d6e5e:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d6e60:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d6e62:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d6e64:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6e68:	f7ff f8b1 	bl	d5fce <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d6e6c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d6e70:	b185      	cbz	r5, d6e94 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d6e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6e74:	9502      	str	r5, [sp, #8]
   d6e76:	a902      	add	r1, sp, #8
   d6e78:	a804      	add	r0, sp, #16
   d6e7a:	9303      	str	r3, [sp, #12]
   d6e7c:	f7ff fd4c 	bl	d6918 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d6e80:	a904      	add	r1, sp, #16
   d6e82:	4630      	mov	r0, r6
   d6e84:	f7ff ffd1 	bl	d6e2a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d6e88:	a804      	add	r0, sp, #16
   d6e8a:	f7ff f9da 	bl	d6242 <_ZNSt14_Function_baseD1Ev>
    }
   d6e8e:	4620      	mov	r0, r4
   d6e90:	b008      	add	sp, #32
   d6e92:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d6e94:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d6e96:	e7f3      	b.n	d6e80 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d6e98 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e9c:	b086      	sub	sp, #24
   d6e9e:	4607      	mov	r7, r0
   d6ea0:	461d      	mov	r5, r3
   d6ea2:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6ea4:	2300      	movs	r3, #0
   d6ea6:	4689      	mov	r9, r1
   d6ea8:	4692      	mov	sl, r2
   d6eaa:	9304      	str	r3, [sp, #16]
   d6eac:	f7fd f8f1 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6eb0:	1e06      	subs	r6, r0, #0
   d6eb2:	f106 080c 	add.w	r8, r6, #12
   d6eb6:	d01d      	beq.n	d6ef4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d6eb8:	2301      	movs	r3, #1
	: _M_impl(__a)
   d6eba:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d6ebc:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d6ec0:	4b15      	ldr	r3, [pc, #84]	; (d6f18 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d6ec2:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d6ec6:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d6eca:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d6ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6ed0:	9300      	str	r3, [sp, #0]
   d6ed2:	464a      	mov	r2, r9
   d6ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6ed6:	a903      	add	r1, sp, #12
   d6ed8:	4640      	mov	r0, r8
   d6eda:	f7ff ffb8 	bl	d6e4e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d6ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ee2:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d6ee4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d6ee6:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d6ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6eea:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d6eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ef0:	682b      	ldr	r3, [r5, #0]
   d6ef2:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d6ef4:	a904      	add	r1, sp, #16
   d6ef6:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d6ef8:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d6efc:	f7ff ff62 	bl	d6dc4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d6f00:	a805      	add	r0, sp, #20
   d6f02:	f7ff fd4a 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d6f06:	6839      	ldr	r1, [r7, #0]
   d6f08:	b919      	cbnz	r1, d6f12 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d6f0a:	4a04      	ldr	r2, [pc, #16]	; (d6f1c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d6f0c:	200a      	movs	r0, #10
   d6f0e:	f7fe fe11 	bl	d5b34 <panic_>
}
   d6f12:	b006      	add	sp, #24
   d6f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f18:	000d8dcc 	.word	0x000d8dcc
   d6f1c:	000d572d 	.word	0x000d572d

000d6f20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6f20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f24:	4604      	mov	r4, r0
   d6f26:	460d      	mov	r5, r1
   d6f28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6f2a:	d914      	bls.n	d6f56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6f2c:	4290      	cmp	r0, r2
   d6f2e:	d213      	bcs.n	d6f58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6f30:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6f34:	1a75      	subs	r5, r6, r1
   d6f36:	f1a1 0708 	sub.w	r7, r1, #8
   d6f3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6f3c:	42b7      	cmp	r7, r6
   d6f3e:	d018      	beq.n	d6f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6f40:	b11c      	cbz	r4, d6f4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d6f42:	4631      	mov	r1, r6
   d6f44:	4620      	mov	r0, r4
   d6f46:	f7ff fd14 	bl	d6972 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6f4a:	1d30      	adds	r0, r6, #4
   d6f4c:	f7ff fd25 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6f50:	3e08      	subs	r6, #8
   d6f52:	3c08      	subs	r4, #8
   d6f54:	e7f2      	b.n	d6f3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6f56:	d00c      	beq.n	d6f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6f58:	42b5      	cmp	r5, r6
   d6f5a:	d00a      	beq.n	d6f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6f5c:	b11c      	cbz	r4, d6f66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6f5e:	4629      	mov	r1, r5
   d6f60:	4620      	mov	r0, r4
   d6f62:	f7ff fd06 	bl	d6972 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6f66:	1d28      	adds	r0, r5, #4
   d6f68:	f7ff fd17 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6f6c:	3508      	adds	r5, #8
   d6f6e:	3408      	adds	r4, #8
   d6f70:	e7f2      	b.n	d6f58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6f74:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6f76:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6f78:	4605      	mov	r5, r0
        if (n > 0) {
   d6f7a:	dd11      	ble.n	d6fa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6f7c:	00f0      	lsls	r0, r6, #3
   d6f7e:	f7fe fe7d 	bl	d5c7c <malloc>
            if (!d) {
   d6f82:	4604      	mov	r4, r0
   d6f84:	b158      	cbz	r0, d6f9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6f86:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6f8a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6f8e:	f7ff ffc7 	bl	d6f20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6f92:	6828      	ldr	r0, [r5, #0]
   d6f94:	f7fe fe7a 	bl	d5c8c <free>
        data_ = d;
   d6f98:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6f9a:	60ae      	str	r6, [r5, #8]
        return true;
   d6f9c:	2001      	movs	r0, #1
    }
   d6f9e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6fa0:	2400      	movs	r4, #0
   d6fa2:	e7f6      	b.n	d6f92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6fa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6fa6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6fa8:	6845      	ldr	r5, [r0, #4]
   d6faa:	4668      	mov	r0, sp
   d6fac:	f7ff fce1 	bl	d6972 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6fb0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6fb4:	4299      	cmp	r1, r3
   d6fb6:	da10      	bge.n	d6fda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6fb8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6fba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6fbc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6fc0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6fc4:	4629      	mov	r1, r5
   d6fc6:	f105 0008 	add.w	r0, r5, #8
   d6fca:	f7ff ffa9 	bl	d6f20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6fce:	b98d      	cbnz	r5, d6ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6fd0:	6863      	ldr	r3, [r4, #4]
   d6fd2:	3301      	adds	r3, #1
   d6fd4:	6063      	str	r3, [r4, #4]
    return true;
   d6fd6:	2601      	movs	r6, #1
   d6fd8:	e006      	b.n	d6fe8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6fda:	3101      	adds	r1, #1
   d6fdc:	4620      	mov	r0, r4
   d6fde:	f7ff ffc9 	bl	d6f74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6fe2:	4606      	mov	r6, r0
   d6fe4:	2800      	cmp	r0, #0
   d6fe6:	d1e7      	bne.n	d6fb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6fe8:	a801      	add	r0, sp, #4
   d6fea:	f7ff fcd6 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6fee:	4630      	mov	r0, r6
   d6ff0:	b002      	add	sp, #8
   d6ff2:	bd70      	pop	{r4, r5, r6, pc}
   d6ff4:	4669      	mov	r1, sp
   d6ff6:	4628      	mov	r0, r5
   d6ff8:	f7ff fcbb 	bl	d6972 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6ffc:	e7e8      	b.n	d6fd0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6ffe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6ffe:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7002:	4604      	mov	r4, r0
   d7004:	460d      	mov	r5, r1
   d7006:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7008:	d914      	bls.n	d7034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d700a:	4290      	cmp	r0, r2
   d700c:	d213      	bcs.n	d7036 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d700e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7012:	1a75      	subs	r5, r6, r1
   d7014:	f1a1 0708 	sub.w	r7, r1, #8
   d7018:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d701a:	42b7      	cmp	r7, r6
   d701c:	d018      	beq.n	d7050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d701e:	b11c      	cbz	r4, d7028 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7020:	4631      	mov	r1, r6
   d7022:	4620      	mov	r0, r4
   d7024:	f7ff fc97 	bl	d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7028:	1d30      	adds	r0, r6, #4
   d702a:	f7ff fcb6 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d702e:	3e08      	subs	r6, #8
   d7030:	3c08      	subs	r4, #8
   d7032:	e7f2      	b.n	d701a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7034:	d00c      	beq.n	d7050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7036:	42b5      	cmp	r5, r6
   d7038:	d00a      	beq.n	d7050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d703a:	b11c      	cbz	r4, d7044 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d703c:	4629      	mov	r1, r5
   d703e:	4620      	mov	r0, r4
   d7040:	f7ff fc89 	bl	d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7044:	1d28      	adds	r0, r5, #4
   d7046:	f7ff fca8 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d704a:	3508      	adds	r5, #8
   d704c:	3408      	adds	r4, #8
   d704e:	e7f2      	b.n	d7036 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7052 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7052:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7054:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7056:	4605      	mov	r5, r0
        if (n > 0) {
   d7058:	dd11      	ble.n	d707e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d705a:	00f0      	lsls	r0, r6, #3
   d705c:	f7fe fe0e 	bl	d5c7c <malloc>
            if (!d) {
   d7060:	4604      	mov	r4, r0
   d7062:	b158      	cbz	r0, d707c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7064:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7068:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d706c:	f7ff ffc7 	bl	d6ffe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7070:	6828      	ldr	r0, [r5, #0]
   d7072:	f7fe fe0b 	bl	d5c8c <free>
        data_ = d;
   d7076:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7078:	60ae      	str	r6, [r5, #8]
        return true;
   d707a:	2001      	movs	r0, #1
    }
   d707c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d707e:	2400      	movs	r4, #0
   d7080:	e7f6      	b.n	d7070 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7082 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7082:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7084:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7086:	6845      	ldr	r5, [r0, #4]
   d7088:	4668      	mov	r0, sp
   d708a:	f7ff fc64 	bl	d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d708e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7092:	4299      	cmp	r1, r3
   d7094:	da10      	bge.n	d70b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7096:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7098:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d709a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d709e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d70a2:	4629      	mov	r1, r5
   d70a4:	f105 0008 	add.w	r0, r5, #8
   d70a8:	f7ff ffa9 	bl	d6ffe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d70ac:	b98d      	cbnz	r5, d70d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d70ae:	6863      	ldr	r3, [r4, #4]
   d70b0:	3301      	adds	r3, #1
   d70b2:	6063      	str	r3, [r4, #4]
    return true;
   d70b4:	2601      	movs	r6, #1
   d70b6:	e006      	b.n	d70c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d70b8:	3101      	adds	r1, #1
   d70ba:	4620      	mov	r0, r4
   d70bc:	f7ff ffc9 	bl	d7052 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d70c0:	4606      	mov	r6, r0
   d70c2:	2800      	cmp	r0, #0
   d70c4:	d1e7      	bne.n	d7096 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d70c6:	a801      	add	r0, sp, #4
   d70c8:	f7ff fc67 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70cc:	4630      	mov	r0, r6
   d70ce:	b002      	add	sp, #8
   d70d0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d70d2:	4669      	mov	r1, sp
   d70d4:	4628      	mov	r0, r5
   d70d6:	f7ff fc3e 	bl	d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d70da:	e7e8      	b.n	d70ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d70dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d70dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d70e0:	4617      	mov	r7, r2
   d70e2:	b0a1      	sub	sp, #132	; 0x84
   d70e4:	4680      	mov	r8, r0
    WiringBleLock lk;
   d70e6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d70e8:	460e      	mov	r6, r1
    WiringBleLock lk;
   d70ea:	f7ff f8d3 	bl	d6294 <_ZN8particle3ble13WiringBleLockC1Ev>
   d70ee:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d70f0:	7923      	ldrb	r3, [r4, #4]
   d70f2:	b953      	cbnz	r3, d710a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d70f4:	4639      	mov	r1, r7
   d70f6:	4640      	mov	r0, r8
   d70f8:	f7ff fc2d 	bl	d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d70fc:	a80a      	add	r0, sp, #40	; 0x28
   d70fe:	f7ff f8d1 	bl	d62a4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7102:	4640      	mov	r0, r8
   d7104:	b021      	add	sp, #132	; 0x84
   d7106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d710a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d710c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7110:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7114:	9303      	str	r3, [sp, #12]
   d7116:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d711a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d711e:	9b03      	ldr	r3, [sp, #12]
   d7120:	429d      	cmp	r5, r3
   d7122:	d021      	beq.n	d7168 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7124:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d7128:	4658      	mov	r0, fp
   d712a:	f109 0114 	add.w	r1, r9, #20
   d712e:	f7ff f96a 	bl	d6406 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d7132:	b1b8      	cbz	r0, d7164 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d7134:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d7138:	4650      	mov	r0, sl
   d713a:	f7ff f964 	bl	d6406 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d713e:	b188      	cbz	r0, d7164 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d7140:	6823      	ldr	r3, [r4, #0]
   d7142:	f8d9 2000 	ldr.w	r2, [r9]
   d7146:	4053      	eors	r3, r2
   d7148:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d714c:	d10a      	bne.n	d7164 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d714e:	2220      	movs	r2, #32
   d7150:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7154:	4a5e      	ldr	r2, [pc, #376]	; (d72d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d7156:	9200      	str	r2, [sp, #0]
   d7158:	aa15      	add	r2, sp, #84	; 0x54
   d715a:	495e      	ldr	r1, [pc, #376]	; (d72d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d715c:	2032      	movs	r0, #50	; 0x32
   d715e:	f7fe fcf1 	bl	d5b44 <log_message>
   d7162:	e7c7      	b.n	d70f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7164:	3508      	adds	r5, #8
   d7166:	e7da      	b.n	d711e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d7168:	4650      	mov	r0, sl
   d716a:	f7ff f917 	bl	d639c <_ZNK8particle7BleUuid7isValidEv>
   d716e:	b960      	cbnz	r0, d718a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d7170:	4959      	ldr	r1, [pc, #356]	; (d72d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d7172:	2201      	movs	r2, #1
   d7174:	a815      	add	r0, sp, #84	; 0x54
   d7176:	ad15      	add	r5, sp, #84	; 0x54
   d7178:	f7ff f8e7 	bl	d634a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d717c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d717e:	46d4      	mov	ip, sl
   d7180:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7184:	682b      	ldr	r3, [r5, #0]
   d7186:	f8cc 3000 	str.w	r3, [ip]
   d718a:	6833      	ldr	r3, [r6, #0]
   d718c:	e9d3 5300 	ldrd	r5, r3, [r3]
   d7190:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d7194:	455d      	cmp	r5, fp
   d7196:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d7198:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d719a:	d06e      	beq.n	d727a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d719c:	f855 0b08 	ldr.w	r0, [r5], #8
   d71a0:	f7ff f931 	bl	d6406 <_ZNK8particle7BleUuideqERKS0_>
   d71a4:	2800      	cmp	r0, #0
   d71a6:	d0f5      	beq.n	d7194 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d71a8:	f104 0a14 	add.w	sl, r4, #20
   d71ac:	4650      	mov	r0, sl
   d71ae:	f7ff f8f5 	bl	d639c <_ZNK8particle7BleUuid7isValidEv>
   d71b2:	b988      	cbnz	r0, d71d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d71b4:	4b49      	ldr	r3, [pc, #292]	; (d72dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d71b6:	4948      	ldr	r1, [pc, #288]	; (d72d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d71b8:	881a      	ldrh	r2, [r3, #0]
   d71ba:	3201      	adds	r2, #1
   d71bc:	b292      	uxth	r2, r2
   d71be:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d71c0:	a815      	add	r0, sp, #84	; 0x54
   d71c2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d71c4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d71c6:	f7ff f8df 	bl	d6388 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d71ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71cc:	46d4      	mov	ip, sl
   d71ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d71d2:	682b      	ldr	r3, [r5, #0]
   d71d4:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d71d8:	2228      	movs	r2, #40	; 0x28
   d71da:	2100      	movs	r1, #0
   d71dc:	a816      	add	r0, sp, #88	; 0x58
   d71de:	f000 fef9 	bl	d7fd4 <memset>
    charInit.version = BLE_API_VERSION;
   d71e2:	4b3f      	ldr	r3, [pc, #252]	; (d72e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d71e4:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d71e6:	4651      	mov	r1, sl
   d71e8:	a804      	add	r0, sp, #16
   d71ea:	f7ff f8e9 	bl	d63c0 <_ZN8particle7BleUuid7halUUIDEv>
   d71ee:	ab04      	add	r3, sp, #16
   d71f0:	aa18      	add	r2, sp, #96	; 0x60
   d71f2:	f10d 0c20 	add.w	ip, sp, #32
   d71f6:	6818      	ldr	r0, [r3, #0]
   d71f8:	6859      	ldr	r1, [r3, #4]
   d71fa:	4615      	mov	r5, r2
   d71fc:	c503      	stmia	r5!, {r0, r1}
   d71fe:	3308      	adds	r3, #8
   d7200:	4563      	cmp	r3, ip
   d7202:	462a      	mov	r2, r5
   d7204:	d1f7      	bne.n	d71f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d7206:	6818      	ldr	r0, [r3, #0]
   d7208:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d720a:	7923      	ldrb	r3, [r4, #4]
   d720c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7210:	f8d9 3000 	ldr.w	r3, [r9]
   d7214:	8a9b      	ldrh	r3, [r3, #20]
   d7216:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d721a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d721c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d721e:	4b31      	ldr	r3, [pc, #196]	; (d72e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7220:	2200      	movs	r2, #0
   d7222:	1da1      	adds	r1, r4, #6
   d7224:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d7226:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d722a:	f7fe faeb 	bl	d5804 <hal_ble_gatt_server_add_characteristic>
   d722e:	2800      	cmp	r0, #0
   d7230:	f47f af60 	bne.w	d70f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d7234:	2301      	movs	r3, #1
   d7236:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d7238:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d723a:	4639      	mov	r1, r7
        return characteristics_;
   d723c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d723e:	a80d      	add	r0, sp, #52	; 0x34
   d7240:	f7ff fb89 	bl	d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7244:	4620      	mov	r0, r4
   d7246:	a90d      	add	r1, sp, #52	; 0x34
   d7248:	f7ff ff1b 	bl	d7082 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d724c:	4604      	mov	r4, r0
   d724e:	a80e      	add	r0, sp, #56	; 0x38
   d7250:	f7ff fba3 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7254:	2c00      	cmp	r4, #0
   d7256:	f47f af4d 	bne.w	d70f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d725a:	2320      	movs	r3, #32
   d725c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d7260:	4b21      	ldr	r3, [pc, #132]	; (d72e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d7262:	9300      	str	r3, [sp, #0]
   d7264:	aa0d      	add	r2, sp, #52	; 0x34
   d7266:	4623      	mov	r3, r4
   d7268:	e777      	b.n	d715a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d726a:	4639      	mov	r1, r7
   d726c:	4640      	mov	r0, r8
   d726e:	f7ff fb72 	bl	d6956 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7272:	a80c      	add	r0, sp, #48	; 0x30
   d7274:	f7ff fb91 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7278:	e740      	b.n	d70fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d727a:	a80b      	add	r0, sp, #44	; 0x2c
   d727c:	f7ff fa1c 	bl	d66b8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d7280:	4651      	mov	r1, sl
   d7282:	a815      	add	r0, sp, #84	; 0x54
   d7284:	f7ff f89c 	bl	d63c0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d7288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d728a:	2300      	movs	r3, #0
   d728c:	3214      	adds	r2, #20
   d728e:	a915      	add	r1, sp, #84	; 0x54
   d7290:	2001      	movs	r0, #1
   d7292:	f7fe fa85 	bl	d57a0 <hal_ble_gatt_server_add_service>
   d7296:	2800      	cmp	r0, #0
   d7298:	d1e7      	bne.n	d726a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d729a:	6835      	ldr	r5, [r6, #0]
   d729c:	a90b      	add	r1, sp, #44	; 0x2c
   d729e:	a80d      	add	r0, sp, #52	; 0x34
   d72a0:	f7ff fb67 	bl	d6972 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d72a4:	4628      	mov	r0, r5
   d72a6:	a90d      	add	r1, sp, #52	; 0x34
   d72a8:	f7ff fe7c 	bl	d6fa4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d72ac:	4605      	mov	r5, r0
   d72ae:	a80e      	add	r0, sp, #56	; 0x38
   d72b0:	f7ff fb73 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d72b4:	2d00      	cmp	r5, #0
   d72b6:	d0d8      	beq.n	d726a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d72b8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d72ba:	6853      	ldr	r3, [r2, #4]
   d72bc:	6812      	ldr	r2, [r2, #0]
   d72be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d72c2:	3b01      	subs	r3, #1
   d72c4:	a80c      	add	r0, sp, #48	; 0x30
   d72c6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d72ca:	f7ff fb66 	bl	d699a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d72ce:	e76b      	b.n	d71a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d72d0:	000d8d71 	.word	0x000d8d71
   d72d4:	000d8cd0 	.word	0x000d8cd0
   d72d8:	000d8e30 	.word	0x000d8e30
   d72dc:	2003e660 	.word	0x2003e660
   d72e0:	002c0001 	.word	0x002c0001
   d72e4:	000d6849 	.word	0x000d6849
   d72e8:	000d8d9c 	.word	0x000d8d9c

000d72ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d72ec:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d72ee:	4c06      	ldr	r4, [pc, #24]	; (d7308 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d72f0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d72f2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d72f4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d72f6:	f7fe fabd 	bl	d5874 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d72fa:	4620      	mov	r0, r4
   d72fc:	4a03      	ldr	r2, [pc, #12]	; (d730c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d72fe:	4904      	ldr	r1, [pc, #16]	; (d7310 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7304:	f000 bd04 	b.w	d7d10 <__aeabi_atexit>
   d7308:	2003e664 	.word	0x2003e664
   d730c:	2003e578 	.word	0x2003e578
   d7310:	000d60e3 	.word	0x000d60e3

000d7314 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7316:	4606      	mov	r6, r0
   d7318:	460d      	mov	r5, r1
  size_t n = 0;
   d731a:	188f      	adds	r7, r1, r2
   d731c:	2400      	movs	r4, #0
  while (size--) {
   d731e:	42bd      	cmp	r5, r7
   d7320:	d00c      	beq.n	d733c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7322:	6833      	ldr	r3, [r6, #0]
   d7324:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7328:	689b      	ldr	r3, [r3, #8]
   d732a:	4630      	mov	r0, r6
   d732c:	4798      	blx	r3
     if (chunk>=0)
   d732e:	1e03      	subs	r3, r0, #0
   d7330:	db01      	blt.n	d7336 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7332:	441c      	add	r4, r3
  while (size--) {
   d7334:	e7f3      	b.n	d731e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7336:	2c00      	cmp	r4, #0
   d7338:	bf08      	it	eq
   d733a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d733c:	4620      	mov	r0, r4
   d733e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7340 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7340:	b513      	push	{r0, r1, r4, lr}
   d7342:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7344:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7346:	b159      	cbz	r1, d7360 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7348:	9101      	str	r1, [sp, #4]
   d734a:	f000 fe79 	bl	d8040 <strlen>
   d734e:	6823      	ldr	r3, [r4, #0]
   d7350:	9901      	ldr	r1, [sp, #4]
   d7352:	68db      	ldr	r3, [r3, #12]
   d7354:	4602      	mov	r2, r0
   d7356:	4620      	mov	r0, r4
    }
   d7358:	b002      	add	sp, #8
   d735a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d735e:	4718      	bx	r3
    }
   d7360:	b002      	add	sp, #8
   d7362:	bd10      	pop	{r4, pc}

000d7364 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7364:	b508      	push	{r3, lr}
  return write(str);
   d7366:	f7ff ffeb 	bl	d7340 <_ZN5Print5writeEPKc>
}
   d736a:	bd08      	pop	{r3, pc}

000d736c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d736c:	6803      	ldr	r3, [r0, #0]
   d736e:	689b      	ldr	r3, [r3, #8]
   d7370:	4718      	bx	r3

000d7372 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7372:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7374:	210d      	movs	r1, #13
{
   d7376:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7378:	f7ff fff8 	bl	d736c <_ZN5Print5printEc>
  n += print('\n');
   d737c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d737e:	4604      	mov	r4, r0
  n += print('\n');
   d7380:	4628      	mov	r0, r5
   d7382:	f7ff fff3 	bl	d736c <_ZN5Print5printEc>
  return n;
}
   d7386:	4420      	add	r0, r4
   d7388:	bd38      	pop	{r3, r4, r5, pc}

000d738a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d738a:	b538      	push	{r3, r4, r5, lr}
   d738c:	4605      	mov	r5, r0
  return write(str);
   d738e:	f7ff ffd7 	bl	d7340 <_ZN5Print5writeEPKc>
   d7392:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7394:	4628      	mov	r0, r5
   d7396:	f7ff ffec 	bl	d7372 <_ZN5Print7printlnEv>
  return n;
}
   d739a:	4420      	add	r0, r4
   d739c:	bd38      	pop	{r3, r4, r5, pc}

000d739e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d739e:	b530      	push	{r4, r5, lr}
   d73a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d73a2:	2300      	movs	r3, #0
   d73a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d73a8:	2a01      	cmp	r2, #1
   d73aa:	bf98      	it	ls
   d73ac:	220a      	movls	r2, #10
   d73ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d73b0:	460d      	mov	r5, r1
   d73b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d73b6:	fb01 5312 	mls	r3, r1, r2, r5
   d73ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d73be:	2b09      	cmp	r3, #9
   d73c0:	bf94      	ite	ls
   d73c2:	3330      	addls	r3, #48	; 0x30
   d73c4:	3337      	addhi	r3, #55	; 0x37
   d73c6:	b2db      	uxtb	r3, r3
  } while(n);
   d73c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d73ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d73ce:	d9ef      	bls.n	d73b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d73d0:	4621      	mov	r1, r4
   d73d2:	f7ff ffb5 	bl	d7340 <_ZN5Print5writeEPKc>
}
   d73d6:	b00b      	add	sp, #44	; 0x2c
   d73d8:	bd30      	pop	{r4, r5, pc}

000d73da <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d73da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73de:	b086      	sub	sp, #24
   d73e0:	af00      	add	r7, sp, #0
   d73e2:	4605      	mov	r5, r0
   d73e4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d73e6:	1d38      	adds	r0, r7, #4
   d73e8:	2114      	movs	r1, #20
{
   d73ea:	4614      	mov	r4, r2
    va_copy(args2, args);
   d73ec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d73ee:	f7fe fc5d 	bl	d5cac <vsnprintf>

    if (n<bufsize)
   d73f2:	2813      	cmp	r0, #19
   d73f4:	d80e      	bhi.n	d7414 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d73f6:	1d39      	adds	r1, r7, #4
   d73f8:	4628      	mov	r0, r5
   d73fa:	f7ff ffa1 	bl	d7340 <_ZN5Print5writeEPKc>
   d73fe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7400:	b11e      	cbz	r6, d740a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7402:	4628      	mov	r0, r5
   d7404:	f7ff ffb5 	bl	d7372 <_ZN5Print7printlnEv>
   d7408:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d740a:	4620      	mov	r0, r4
   d740c:	3718      	adds	r7, #24
   d740e:	46bd      	mov	sp, r7
   d7410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7414:	f100 0308 	add.w	r3, r0, #8
   d7418:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d741c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d741e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7422:	4622      	mov	r2, r4
   d7424:	1c41      	adds	r1, r0, #1
   d7426:	683b      	ldr	r3, [r7, #0]
   d7428:	4668      	mov	r0, sp
   d742a:	f7fe fc3f 	bl	d5cac <vsnprintf>
  return write(str);
   d742e:	4669      	mov	r1, sp
   d7430:	4628      	mov	r0, r5
   d7432:	f7ff ff85 	bl	d7340 <_ZN5Print5writeEPKc>
   d7436:	4604      	mov	r4, r0
   d7438:	46c5      	mov	sp, r8
   d743a:	e7e1      	b.n	d7400 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d743c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d743c:	2300      	movs	r3, #0
   d743e:	6840      	ldr	r0, [r0, #4]
   d7440:	461a      	mov	r2, r3
   d7442:	4619      	mov	r1, r3
   d7444:	f7fe bbd2 	b.w	d5bec <network_on>

000d7448 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7448:	4b01      	ldr	r3, [pc, #4]	; (d7450 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d744a:	4a02      	ldr	r2, [pc, #8]	; (d7454 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d744c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d744e:	4770      	bx	lr
   d7450:	2003e66c 	.word	0x2003e66c
   d7454:	000d8e50 	.word	0x000d8e50

000d7458 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7458:	4b02      	ldr	r3, [pc, #8]	; (d7464 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d745a:	681a      	ldr	r2, [r3, #0]
   d745c:	4b02      	ldr	r3, [pc, #8]	; (d7468 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d745e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7460:	4770      	bx	lr
   d7462:	bf00      	nop
   d7464:	2003e510 	.word	0x2003e510
   d7468:	2003e670 	.word	0x2003e670

000d746c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d746c:	2100      	movs	r1, #0
   d746e:	f7fe bb79 	b.w	d5b64 <system_delay_ms>

000d7472 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7472:	b510      	push	{r4, lr}
   d7474:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d7476:	f7fe fee4 	bl	d6242 <_ZNSt14_Function_baseD1Ev>
   d747a:	4620      	mov	r0, r4
   d747c:	bd10      	pop	{r4, pc}

000d747e <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d747e:	b510      	push	{r4, lr}
   d7480:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d7482:	f7fe fb47 	bl	d5b14 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d7486:	4284      	cmp	r4, r0
   d7488:	d008      	beq.n	d749c <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d748a:	b11c      	cbz	r4, d7494 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d748c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d7490:	f7fe bb28 	b.w	d5ae4 <LED_Signaling_Start>
}
   d7494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d7498:	f7fe bb2c 	b.w	d5af4 <LED_Signaling_Stop>
}
   d749c:	bd10      	pop	{r4, pc}

000d749e <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d749e:	b570      	push	{r4, r5, r6, lr}
   d74a0:	4605      	mov	r5, r0
   d74a2:	460e      	mov	r6, r1
   d74a4:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d74a6:	f7fe fb35 	bl	d5b14 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d74aa:	b150      	cbz	r0, d74c2 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d74ac:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d74b0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d74b4:	f7fe fb0e 	bl	d5ad4 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   d74b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   d74bc:	20e7      	movs	r0, #231	; 0xe7
   d74be:	f7fe bb31 	b.w	d5b24 <LED_On>
}
   d74c2:	bd70      	pop	{r4, r5, r6, pc}

000d74c4 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d74c4:	b510      	push	{r4, lr}
   d74c6:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d74c8:	f7fe fb1c 	bl	d5b04 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d74cc:	f7fe fb22 	bl	d5b14 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d74d0:	b128      	cbz	r0, d74de <_ZN8RGBClass10brightnessEhb+0x1a>
   d74d2:	b124      	cbz	r4, d74de <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   d74d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   d74d8:	20e7      	movs	r0, #231	; 0xe7
   d74da:	f7fe bb23 	b.w	d5b24 <LED_On>
}
   d74de:	bd10      	pop	{r4, pc}

000d74e0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d74e0:	4803      	ldr	r0, [pc, #12]	; (d74f0 <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
   d74e2:	4a04      	ldr	r2, [pc, #16]	; (d74f4 <_GLOBAL__sub_I_RGB+0x14>)
   d74e4:	4904      	ldr	r1, [pc, #16]	; (d74f8 <_GLOBAL__sub_I_RGB+0x18>)
   d74e6:	2300      	movs	r3, #0
   d74e8:	6083      	str	r3, [r0, #8]
   d74ea:	f000 bc11 	b.w	d7d10 <__aeabi_atexit>
   d74ee:	bf00      	nop
   d74f0:	2003e674 	.word	0x2003e674
   d74f4:	2003e578 	.word	0x2003e578
   d74f8:	000d7473 	.word	0x000d7473

000d74fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d74fc:	4b01      	ldr	r3, [pc, #4]	; (d7504 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d74fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7500:	4770      	bx	lr
   d7502:	bf00      	nop
   d7504:	2003e514 	.word	0x2003e514

000d7508 <serialEventRun>:
{
   d7508:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d750a:	4b0b      	ldr	r3, [pc, #44]	; (d7538 <serialEventRun+0x30>)
   d750c:	b143      	cbz	r3, d7520 <serialEventRun+0x18>
   d750e:	f000 f957 	bl	d77c0 <_Z16_fetch_usbserialv>
   d7512:	6803      	ldr	r3, [r0, #0]
   d7514:	691b      	ldr	r3, [r3, #16]
   d7516:	4798      	blx	r3
   d7518:	2800      	cmp	r0, #0
   d751a:	dd01      	ble.n	d7520 <serialEventRun+0x18>
        serialEvent();
   d751c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7520:	4b06      	ldr	r3, [pc, #24]	; (d753c <serialEventRun+0x34>)
   d7522:	b143      	cbz	r3, d7536 <serialEventRun+0x2e>
   d7524:	f000 f9ca 	bl	d78bc <_Z22__fetch_global_Serial1v>
   d7528:	6803      	ldr	r3, [r0, #0]
   d752a:	691b      	ldr	r3, [r3, #16]
   d752c:	4798      	blx	r3
   d752e:	2800      	cmp	r0, #0
   d7530:	dd01      	ble.n	d7536 <serialEventRun+0x2e>
        serialEvent1();
   d7532:	f3af 8000 	nop.w
}
   d7536:	bd08      	pop	{r3, pc}
	...

000d7540 <_post_loop>:
{
   d7540:	b508      	push	{r3, lr}
	serialEventRun();
   d7542:	f7ff ffe1 	bl	d7508 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7546:	f7fe f8f9 	bl	d573c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d754a:	4b01      	ldr	r3, [pc, #4]	; (d7550 <_post_loop+0x10>)
   d754c:	6018      	str	r0, [r3, #0]
}
   d754e:	bd08      	pop	{r3, pc}
   d7550:	2003e7d4 	.word	0x2003e7d4

000d7554 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7554:	4802      	ldr	r0, [pc, #8]	; (d7560 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7556:	4a03      	ldr	r2, [pc, #12]	; (d7564 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7558:	4903      	ldr	r1, [pc, #12]	; (d7568 <_Z33system_initialize_user_backup_ramv+0x14>)
   d755a:	1a12      	subs	r2, r2, r0
   d755c:	f000 bd12 	b.w	d7f84 <memcpy>
   d7560:	2003f400 	.word	0x2003f400
   d7564:	2003f404 	.word	0x2003f404
   d7568:	000d90a0 	.word	0x000d90a0

000d756c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d756c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d756e:	2300      	movs	r3, #0
   d7570:	9300      	str	r3, [sp, #0]
   d7572:	461a      	mov	r2, r3
   d7574:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7578:	f7fe fb0e 	bl	d5b98 <system_ctrl_set_result>
}
   d757c:	b003      	add	sp, #12
   d757e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7584 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7584:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7586:	8843      	ldrh	r3, [r0, #2]
   d7588:	2b0a      	cmp	r3, #10
   d758a:	d008      	beq.n	d759e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d758c:	2b50      	cmp	r3, #80	; 0x50
   d758e:	d10b      	bne.n	d75a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7590:	4b09      	ldr	r3, [pc, #36]	; (d75b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7592:	681b      	ldr	r3, [r3, #0]
   d7594:	b14b      	cbz	r3, d75aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7596:	b003      	add	sp, #12
   d7598:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d759c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d759e:	f7ff ffe5 	bl	d756c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d75a2:	b003      	add	sp, #12
   d75a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d75a8:	2300      	movs	r3, #0
   d75aa:	9300      	str	r3, [sp, #0]
   d75ac:	461a      	mov	r2, r3
   d75ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d75b2:	f7fe faf1 	bl	d5b98 <system_ctrl_set_result>
}
   d75b6:	e7f4      	b.n	d75a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d75b8:	2003e688 	.word	0x2003e688

000d75bc <module_user_init_hook>:
{
   d75bc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d75be:	4c12      	ldr	r4, [pc, #72]	; (d7608 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d75c0:	4812      	ldr	r0, [pc, #72]	; (d760c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d75c2:	4d13      	ldr	r5, [pc, #76]	; (d7610 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d75c4:	2100      	movs	r1, #0
   d75c6:	f7fe fb81 	bl	d5ccc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d75ca:	6823      	ldr	r3, [r4, #0]
   d75cc:	42ab      	cmp	r3, r5
   d75ce:	4b11      	ldr	r3, [pc, #68]	; (d7614 <module_user_init_hook+0x58>)
   d75d0:	bf0c      	ite	eq
   d75d2:	2201      	moveq	r2, #1
   d75d4:	2200      	movne	r2, #0
   d75d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d75d8:	d002      	beq.n	d75e0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d75da:	f7ff ffbb 	bl	d7554 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d75de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d75e0:	f7fe f89c 	bl	d571c <HAL_RNG_GetRandomNumber>
   d75e4:	4604      	mov	r4, r0
    srand(seed);
   d75e6:	f000 fcfd 	bl	d7fe4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d75ea:	4b0b      	ldr	r3, [pc, #44]	; (d7618 <module_user_init_hook+0x5c>)
   d75ec:	b113      	cbz	r3, d75f4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d75ee:	4620      	mov	r0, r4
   d75f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d75f4:	2100      	movs	r1, #0
   d75f6:	4808      	ldr	r0, [pc, #32]	; (d7618 <module_user_init_hook+0x5c>)
   d75f8:	f7fe fb38 	bl	d5c6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d75fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7600:	4806      	ldr	r0, [pc, #24]	; (d761c <module_user_init_hook+0x60>)
   d7602:	2100      	movs	r1, #0
   d7604:	f7fe babe 	b.w	d5b84 <system_ctrl_set_app_request_handler>
   d7608:	2003f400 	.word	0x2003f400
   d760c:	000d74fd 	.word	0x000d74fd
   d7610:	9a271c1e 	.word	0x9a271c1e
   d7614:	2003e684 	.word	0x2003e684
   d7618:	00000000 	.word	0x00000000
   d761c:	000d7585 	.word	0x000d7585

000d7620 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7620:	4770      	bx	lr

000d7622 <_ZN9IPAddressD0Ev>:
   d7622:	b510      	push	{r4, lr}
   d7624:	2118      	movs	r1, #24
   d7626:	4604      	mov	r4, r0
   d7628:	f000 fb77 	bl	d7d1a <_ZdlPvj>
   d762c:	4620      	mov	r0, r4
   d762e:	bd10      	pop	{r4, pc}

000d7630 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7630:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7632:	7d03      	ldrb	r3, [r0, #20]
   d7634:	2b06      	cmp	r3, #6
{
   d7636:	b08d      	sub	sp, #52	; 0x34
   d7638:	460e      	mov	r6, r1
   d763a:	f100 0704 	add.w	r7, r0, #4
   d763e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7642:	d012      	beq.n	d766a <_ZNK9IPAddress7printToER5Print+0x3a>
   d7644:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7648:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d764c:	220a      	movs	r2, #10
   d764e:	4630      	mov	r0, r6
   d7650:	f7ff fea5 	bl	d739e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7654:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7656:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7658:	d019      	beq.n	d768e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d765a:	2c00      	cmp	r4, #0
   d765c:	d0f4      	beq.n	d7648 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d765e:	212e      	movs	r1, #46	; 0x2e
   d7660:	4630      	mov	r0, r6
   d7662:	f7ff fe83 	bl	d736c <_ZN5Print5printEc>
   d7666:	4404      	add	r4, r0
   d7668:	e7ee      	b.n	d7648 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d766a:	232f      	movs	r3, #47	; 0x2f
   d766c:	466a      	mov	r2, sp
   d766e:	4639      	mov	r1, r7
   d7670:	200a      	movs	r0, #10
		buf[0] = 0;
   d7672:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7676:	f7fe f91d 	bl	d58b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d767a:	4668      	mov	r0, sp
   d767c:	f000 fce0 	bl	d8040 <strlen>
   d7680:	6833      	ldr	r3, [r6, #0]
   d7682:	4602      	mov	r2, r0
   d7684:	68db      	ldr	r3, [r3, #12]
   d7686:	4669      	mov	r1, sp
   d7688:	4630      	mov	r0, r6
   d768a:	4798      	blx	r3
   d768c:	4604      	mov	r4, r0
    }
    return n;
}
   d768e:	4620      	mov	r0, r4
   d7690:	b00d      	add	sp, #52	; 0x34
   d7692:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7694 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7694:	b510      	push	{r4, lr}
   d7696:	4b05      	ldr	r3, [pc, #20]	; (d76ac <_ZN9IPAddressC1Ev+0x18>)
   d7698:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d769a:	2211      	movs	r2, #17
   d769c:	f840 3b04 	str.w	r3, [r0], #4
   d76a0:	2100      	movs	r1, #0
   d76a2:	f000 fc97 	bl	d7fd4 <memset>
}
   d76a6:	4620      	mov	r0, r4
   d76a8:	bd10      	pop	{r4, pc}
   d76aa:	bf00      	nop
   d76ac:	000d8e78 	.word	0x000d8e78

000d76b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d76b0:	4603      	mov	r3, r0
   d76b2:	4a07      	ldr	r2, [pc, #28]	; (d76d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d76b4:	b510      	push	{r4, lr}
   d76b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d76ba:	f101 0210 	add.w	r2, r1, #16
   d76be:	f851 4b04 	ldr.w	r4, [r1], #4
   d76c2:	f843 4b04 	str.w	r4, [r3], #4
   d76c6:	4291      	cmp	r1, r2
   d76c8:	d1f9      	bne.n	d76be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d76ca:	780a      	ldrb	r2, [r1, #0]
   d76cc:	701a      	strb	r2, [r3, #0]
}
   d76ce:	bd10      	pop	{r4, pc}
   d76d0:	000d8e78 	.word	0x000d8e78

000d76d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d76d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d76d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d76da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d76de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d76e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d76e6:	2304      	movs	r3, #4
   d76e8:	6041      	str	r1, [r0, #4]
   d76ea:	7503      	strb	r3, [r0, #20]
}
   d76ec:	bd10      	pop	{r4, pc}
	...

000d76f0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d76f0:	b513      	push	{r0, r1, r4, lr}
   d76f2:	4b05      	ldr	r3, [pc, #20]	; (d7708 <_ZN9IPAddressC1EPKh+0x18>)
   d76f4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d76f6:	78cb      	ldrb	r3, [r1, #3]
   d76f8:	9300      	str	r3, [sp, #0]
   d76fa:	788b      	ldrb	r3, [r1, #2]
   d76fc:	784a      	ldrb	r2, [r1, #1]
   d76fe:	7809      	ldrb	r1, [r1, #0]
   d7700:	f7ff ffe8 	bl	d76d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7704:	b002      	add	sp, #8
   d7706:	bd10      	pop	{r4, pc}
   d7708:	000d8e78 	.word	0x000d8e78

000d770c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d770c:	7441      	strb	r1, [r0, #17]
}
   d770e:	4770      	bx	lr

000d7710 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7710:	4770      	bx	lr

000d7712 <_ZN9USBSerial4readEv>:
{
   d7712:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7714:	2100      	movs	r1, #0
   d7716:	7c00      	ldrb	r0, [r0, #16]
   d7718:	f7fe f9c4 	bl	d5aa4 <HAL_USB_USART_Receive_Data>
}
   d771c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7720:	bd08      	pop	{r3, pc}

000d7722 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7722:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7724:	2101      	movs	r1, #1
   d7726:	7c00      	ldrb	r0, [r0, #16]
   d7728:	f7fe f9bc 	bl	d5aa4 <HAL_USB_USART_Receive_Data>
}
   d772c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7730:	bd08      	pop	{r3, pc}

000d7732 <_ZN9USBSerial17availableForWriteEv>:
{
   d7732:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7734:	7c00      	ldrb	r0, [r0, #16]
   d7736:	f7fe f9ad 	bl	d5a94 <HAL_USB_USART_Available_Data_For_Write>
}
   d773a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d773e:	bd08      	pop	{r3, pc}

000d7740 <_ZN9USBSerial9availableEv>:
{
   d7740:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7742:	7c00      	ldrb	r0, [r0, #16]
   d7744:	f7fe f99e 	bl	d5a84 <HAL_USB_USART_Available_Data>
}
   d7748:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d774c:	bd08      	pop	{r3, pc}

000d774e <_ZN9USBSerial5writeEh>:
{
   d774e:	b513      	push	{r0, r1, r4, lr}
   d7750:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7752:	7c00      	ldrb	r0, [r0, #16]
{
   d7754:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7756:	f7fe f99d 	bl	d5a94 <HAL_USB_USART_Available_Data_For_Write>
   d775a:	2800      	cmp	r0, #0
   d775c:	9901      	ldr	r1, [sp, #4]
   d775e:	dc01      	bgt.n	d7764 <_ZN9USBSerial5writeEh+0x16>
   d7760:	7c60      	ldrb	r0, [r4, #17]
   d7762:	b120      	cbz	r0, d776e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7764:	7c20      	ldrb	r0, [r4, #16]
   d7766:	f7fe f9a5 	bl	d5ab4 <HAL_USB_USART_Send_Data>
   d776a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d776e:	b002      	add	sp, #8
   d7770:	bd10      	pop	{r4, pc}

000d7772 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7772:	7c00      	ldrb	r0, [r0, #16]
   d7774:	f7fe b9a6 	b.w	d5ac4 <HAL_USB_USART_Flush_Data>

000d7778 <_ZN9USBSerialD0Ev>:
   d7778:	b510      	push	{r4, lr}
   d777a:	2114      	movs	r1, #20
   d777c:	4604      	mov	r4, r0
   d777e:	f000 facc 	bl	d7d1a <_ZdlPvj>
   d7782:	4620      	mov	r0, r4
   d7784:	bd10      	pop	{r4, pc}
	...

000d7788 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7788:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d778a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d778e:	4604      	mov	r4, r0
   d7790:	4608      	mov	r0, r1
   d7792:	2100      	movs	r1, #0
   d7794:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7798:	4b04      	ldr	r3, [pc, #16]	; (d77ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d779a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d779c:	2301      	movs	r3, #1
  _serial = serial;
   d779e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d77a0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d77a2:	4611      	mov	r1, r2
   d77a4:	f7fe f966 	bl	d5a74 <HAL_USB_USART_Init>
}
   d77a8:	4620      	mov	r0, r4
   d77aa:	bd10      	pop	{r4, pc}
   d77ac:	000d8e8c 	.word	0x000d8e8c

000d77b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d77b2:	2214      	movs	r2, #20
{
   d77b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d77b6:	2100      	movs	r1, #0
   d77b8:	f000 fc0c 	bl	d7fd4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d77bc:	4620      	mov	r0, r4
   d77be:	bd10      	pop	{r4, pc}

000d77c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d77c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77c2:	4c10      	ldr	r4, [pc, #64]	; (d7804 <_Z16_fetch_usbserialv+0x44>)
{
   d77c4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d77c6:	a803      	add	r0, sp, #12
   d77c8:	f7ff fff2 	bl	d77b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77cc:	7821      	ldrb	r1, [r4, #0]
   d77ce:	f3bf 8f5b 	dmb	ish
   d77d2:	f011 0101 	ands.w	r1, r1, #1
   d77d6:	d111      	bne.n	d77fc <_Z16_fetch_usbserialv+0x3c>
   d77d8:	4620      	mov	r0, r4
   d77da:	9101      	str	r1, [sp, #4]
   d77dc:	f7fc fc6a 	bl	d40b4 <__cxa_guard_acquire>
   d77e0:	9901      	ldr	r1, [sp, #4]
   d77e2:	b158      	cbz	r0, d77fc <_Z16_fetch_usbserialv+0x3c>
   d77e4:	aa03      	add	r2, sp, #12
   d77e6:	4808      	ldr	r0, [pc, #32]	; (d7808 <_Z16_fetch_usbserialv+0x48>)
   d77e8:	f7ff ffce 	bl	d7788 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d77ec:	4620      	mov	r0, r4
   d77ee:	f7fc fc66 	bl	d40be <__cxa_guard_release>
   d77f2:	4a06      	ldr	r2, [pc, #24]	; (d780c <_Z16_fetch_usbserialv+0x4c>)
   d77f4:	4906      	ldr	r1, [pc, #24]	; (d7810 <_Z16_fetch_usbserialv+0x50>)
   d77f6:	4804      	ldr	r0, [pc, #16]	; (d7808 <_Z16_fetch_usbserialv+0x48>)
   d77f8:	f000 fa8a 	bl	d7d10 <__aeabi_atexit>
	return _usbserial;
}
   d77fc:	4802      	ldr	r0, [pc, #8]	; (d7808 <_Z16_fetch_usbserialv+0x48>)
   d77fe:	b008      	add	sp, #32
   d7800:	bd10      	pop	{r4, pc}
   d7802:	bf00      	nop
   d7804:	2003e68c 	.word	0x2003e68c
   d7808:	2003e690 	.word	0x2003e690
   d780c:	2003e578 	.word	0x2003e578
   d7810:	000d7711 	.word	0x000d7711

000d7814 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7814:	4770      	bx	lr

000d7816 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7816:	7441      	strb	r1, [r0, #17]
}
   d7818:	4770      	bx	lr

000d781a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d781a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d781c:	7c00      	ldrb	r0, [r0, #16]
   d781e:	f7fe f889 	bl	d5934 <hal_usart_available_data_for_write>
}
   d7822:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7826:	bd08      	pop	{r3, pc}

000d7828 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7828:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d782a:	7c00      	ldrb	r0, [r0, #16]
   d782c:	f7fe f85a 	bl	d58e4 <hal_usart_available>
}
   d7830:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7834:	bd08      	pop	{r3, pc}

000d7836 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7836:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7838:	7c00      	ldrb	r0, [r0, #16]
   d783a:	f7fe f863 	bl	d5904 <hal_usart_peek>
}
   d783e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7842:	bd08      	pop	{r3, pc}

000d7844 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7844:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7846:	7c00      	ldrb	r0, [r0, #16]
   d7848:	f7fe f854 	bl	d58f4 <hal_usart_read>
}
   d784c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7850:	bd08      	pop	{r3, pc}

000d7852 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7852:	7c00      	ldrb	r0, [r0, #16]
   d7854:	f7fe b85e 	b.w	d5914 <hal_usart_flush>

000d7858 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7858:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d785a:	7c45      	ldrb	r5, [r0, #17]
{
   d785c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d785e:	b12d      	cbz	r5, d786c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7860:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7862:	b003      	add	sp, #12
   d7864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7868:	f7fe b834 	b.w	d58d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d786c:	7c00      	ldrb	r0, [r0, #16]
   d786e:	9101      	str	r1, [sp, #4]
   d7870:	f7fe f860 	bl	d5934 <hal_usart_available_data_for_write>
   d7874:	2800      	cmp	r0, #0
   d7876:	9901      	ldr	r1, [sp, #4]
   d7878:	dcf2      	bgt.n	d7860 <_ZN11USARTSerial5writeEh+0x8>
}
   d787a:	4628      	mov	r0, r5
   d787c:	b003      	add	sp, #12
   d787e:	bd30      	pop	{r4, r5, pc}

000d7880 <_ZN11USARTSerialD0Ev>:
   d7880:	b510      	push	{r4, lr}
   d7882:	2114      	movs	r1, #20
   d7884:	4604      	mov	r4, r0
   d7886:	f000 fa48 	bl	d7d1a <_ZdlPvj>
   d788a:	4620      	mov	r0, r4
   d788c:	bd10      	pop	{r4, pc}
	...

000d7890 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7890:	b510      	push	{r4, lr}
   d7892:	f04f 0c00 	mov.w	ip, #0
   d7896:	4604      	mov	r4, r0
   d7898:	4608      	mov	r0, r1
   d789a:	4611      	mov	r1, r2
   d789c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d78a0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d78a4:	4a04      	ldr	r2, [pc, #16]	; (d78b8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d78a6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d78a8:	2201      	movs	r2, #1
  _serial = serial;
   d78aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d78ac:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d78ae:	461a      	mov	r2, r3
   d78b0:	f7fe f808 	bl	d58c4 <hal_usart_init>
}
   d78b4:	4620      	mov	r0, r4
   d78b6:	bd10      	pop	{r4, pc}
   d78b8:	000d8ebc 	.word	0x000d8ebc

000d78bc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d78bc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d78be:	4c0e      	ldr	r4, [pc, #56]	; (d78f8 <_Z22__fetch_global_Serial1v+0x3c>)
   d78c0:	7821      	ldrb	r1, [r4, #0]
   d78c2:	f3bf 8f5b 	dmb	ish
   d78c6:	f011 0101 	ands.w	r1, r1, #1
   d78ca:	d112      	bne.n	d78f2 <_Z22__fetch_global_Serial1v+0x36>
   d78cc:	4620      	mov	r0, r4
   d78ce:	9101      	str	r1, [sp, #4]
   d78d0:	f7fc fbf0 	bl	d40b4 <__cxa_guard_acquire>
   d78d4:	9901      	ldr	r1, [sp, #4]
   d78d6:	b160      	cbz	r0, d78f2 <_Z22__fetch_global_Serial1v+0x36>
   d78d8:	4a08      	ldr	r2, [pc, #32]	; (d78fc <_Z22__fetch_global_Serial1v+0x40>)
   d78da:	4b09      	ldr	r3, [pc, #36]	; (d7900 <_Z22__fetch_global_Serial1v+0x44>)
   d78dc:	4809      	ldr	r0, [pc, #36]	; (d7904 <_Z22__fetch_global_Serial1v+0x48>)
   d78de:	f7ff ffd7 	bl	d7890 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d78e2:	4620      	mov	r0, r4
   d78e4:	f7fc fbeb 	bl	d40be <__cxa_guard_release>
   d78e8:	4a07      	ldr	r2, [pc, #28]	; (d7908 <_Z22__fetch_global_Serial1v+0x4c>)
   d78ea:	4908      	ldr	r1, [pc, #32]	; (d790c <_Z22__fetch_global_Serial1v+0x50>)
   d78ec:	4805      	ldr	r0, [pc, #20]	; (d7904 <_Z22__fetch_global_Serial1v+0x48>)
   d78ee:	f000 fa0f 	bl	d7d10 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78f2:	4804      	ldr	r0, [pc, #16]	; (d7904 <_Z22__fetch_global_Serial1v+0x48>)
   d78f4:	b002      	add	sp, #8
   d78f6:	bd10      	pop	{r4, pc}
   d78f8:	2003e6a4 	.word	0x2003e6a4
   d78fc:	2003e6a8 	.word	0x2003e6a8
   d7900:	2003e72c 	.word	0x2003e72c
   d7904:	2003e7b0 	.word	0x2003e7b0
   d7908:	2003e578 	.word	0x2003e578
   d790c:	000d7815 	.word	0x000d7815

000d7910 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7910:	4770      	bx	lr

000d7912 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7914:	4606      	mov	r6, r0
   d7916:	4615      	mov	r5, r2
   d7918:	460c      	mov	r4, r1
   d791a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d791c:	42bc      	cmp	r4, r7
   d791e:	d006      	beq.n	d792e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7920:	6833      	ldr	r3, [r6, #0]
   d7922:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7926:	689b      	ldr	r3, [r3, #8]
   d7928:	4630      	mov	r0, r6
   d792a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d792c:	e7f6      	b.n	d791c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d792e:	4628      	mov	r0, r5
   d7930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7932 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7932:	7c00      	ldrb	r0, [r0, #16]
   d7934:	2200      	movs	r2, #0
   d7936:	f7fe b825 	b.w	d5984 <hal_i2c_write>

000d793a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d793a:	7c00      	ldrb	r0, [r0, #16]
   d793c:	2100      	movs	r1, #0
   d793e:	f7fe b829 	b.w	d5994 <hal_i2c_available>

000d7942 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7942:	7c00      	ldrb	r0, [r0, #16]
   d7944:	2100      	movs	r1, #0
   d7946:	f7fe b82d 	b.w	d59a4 <hal_i2c_read>

000d794a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d794a:	7c00      	ldrb	r0, [r0, #16]
   d794c:	2100      	movs	r1, #0
   d794e:	f7fe b831 	b.w	d59b4 <hal_i2c_peek>

000d7952 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7952:	7c00      	ldrb	r0, [r0, #16]
   d7954:	2100      	movs	r1, #0
   d7956:	f7fe b835 	b.w	d59c4 <hal_i2c_flush>

000d795a <_ZN7TwoWireD0Ev>:
   d795a:	b510      	push	{r4, lr}
   d795c:	2114      	movs	r1, #20
   d795e:	4604      	mov	r4, r0
   d7960:	f000 f9db 	bl	d7d1a <_ZdlPvj>
   d7964:	4620      	mov	r0, r4
   d7966:	bd10      	pop	{r4, pc}

000d7968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7968:	b510      	push	{r4, lr}
   d796a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d796e:	4604      	mov	r4, r0
   d7970:	4608      	mov	r0, r1
   d7972:	2100      	movs	r1, #0
   d7974:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7978:	4b03      	ldr	r3, [pc, #12]	; (d7988 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d797a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d797c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d797e:	4611      	mov	r1, r2
   d7980:	f7fe f830 	bl	d59e4 <hal_i2c_init>
}
   d7984:	4620      	mov	r0, r4
   d7986:	bd10      	pop	{r4, pc}
   d7988:	000d8eec 	.word	0x000d8eec

000d798c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d798c:	7c00      	ldrb	r0, [r0, #16]
   d798e:	2200      	movs	r2, #0
   d7990:	f7fd bfd8 	b.w	d5944 <hal_i2c_set_speed>

000d7994 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7994:	2300      	movs	r3, #0
   d7996:	7c00      	ldrb	r0, [r0, #16]
   d7998:	461a      	mov	r2, r3
   d799a:	4619      	mov	r1, r3
   d799c:	f7fd bfda 	b.w	d5954 <hal_i2c_begin>

000d79a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d79a0:	7c00      	ldrb	r0, [r0, #16]
   d79a2:	2200      	movs	r2, #0
   d79a4:	f7fd bfde 	b.w	d5964 <hal_i2c_begin_transmission>

000d79a8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d79a8:	b2c9      	uxtb	r1, r1
   d79aa:	f7ff bff9 	b.w	d79a0 <_ZN7TwoWire17beginTransmissionEh>

000d79ae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d79ae:	7c00      	ldrb	r0, [r0, #16]
   d79b0:	2200      	movs	r2, #0
   d79b2:	f7fd bfdf 	b.w	d5974 <hal_i2c_end_transmission>

000d79b6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d79b6:	2101      	movs	r1, #1
   d79b8:	f7ff bff9 	b.w	d79ae <_ZN7TwoWire15endTransmissionEh>

000d79bc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d79bc:	2200      	movs	r2, #0
   d79be:	6840      	ldr	r0, [r0, #4]
   d79c0:	4611      	mov	r1, r2
   d79c2:	f7fe b90b 	b.w	d5bdc <network_ready>

000d79c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d79c6:	2200      	movs	r2, #0
   d79c8:	6840      	ldr	r0, [r0, #4]
   d79ca:	4611      	mov	r1, r2
   d79cc:	f7fe b926 	b.w	d5c1c <network_listening>

000d79d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d79d0:	2200      	movs	r2, #0
   d79d2:	6840      	ldr	r0, [r0, #4]
   d79d4:	4611      	mov	r1, r2
   d79d6:	f7fe b931 	b.w	d5c3c <network_get_listen_timeout>

000d79da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d79da:	6840      	ldr	r0, [r0, #4]
   d79dc:	2200      	movs	r2, #0
   d79de:	f7fe b925 	b.w	d5c2c <network_set_listen_timeout>

000d79e2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d79e2:	6840      	ldr	r0, [r0, #4]
   d79e4:	2200      	movs	r2, #0
   d79e6:	f081 0101 	eor.w	r1, r1, #1
   d79ea:	f7fe b90f 	b.w	d5c0c <network_listen>

000d79ee <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d79ee:	2300      	movs	r3, #0
   d79f0:	6840      	ldr	r0, [r0, #4]
   d79f2:	461a      	mov	r2, r3
   d79f4:	4619      	mov	r1, r3
   d79f6:	f7fe b901 	b.w	d5bfc <network_off>

000d79fa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d79fa:	2200      	movs	r2, #0
   d79fc:	6840      	ldr	r0, [r0, #4]
   d79fe:	4611      	mov	r1, r2
   d7a00:	f7fe b8dc 	b.w	d5bbc <network_connecting>

000d7a04 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a04:	6840      	ldr	r0, [r0, #4]
   d7a06:	2200      	movs	r2, #0
   d7a08:	2102      	movs	r1, #2
   d7a0a:	f7fe b8df 	b.w	d5bcc <network_disconnect>

000d7a0e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7a0e:	2300      	movs	r3, #0
   d7a10:	6840      	ldr	r0, [r0, #4]
   d7a12:	461a      	mov	r2, r3
   d7a14:	f7fe b8ca 	b.w	d5bac <network_connect>

000d7a18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7a18:	4b02      	ldr	r3, [pc, #8]	; (d7a24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7a1a:	2204      	movs	r2, #4
   d7a1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7a1e:	4a02      	ldr	r2, [pc, #8]	; (d7a28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7a20:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7a22:	4770      	bx	lr
   d7a24:	2003e7c4 	.word	0x2003e7c4
   d7a28:	000d8f14 	.word	0x000d8f14

000d7a2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7a2c:	2300      	movs	r3, #0
   d7a2e:	6840      	ldr	r0, [r0, #4]
   d7a30:	461a      	mov	r2, r3
   d7a32:	f7fe b8bb 	b.w	d5bac <network_connect>

000d7a36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7a36:	6840      	ldr	r0, [r0, #4]
   d7a38:	2200      	movs	r2, #0
   d7a3a:	2102      	movs	r1, #2
   d7a3c:	f7fe b8c6 	b.w	d5bcc <network_disconnect>

000d7a40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7a40:	2200      	movs	r2, #0
   d7a42:	6840      	ldr	r0, [r0, #4]
   d7a44:	4611      	mov	r1, r2
   d7a46:	f7fe b8b9 	b.w	d5bbc <network_connecting>

000d7a4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7a4a:	2200      	movs	r2, #0
   d7a4c:	6840      	ldr	r0, [r0, #4]
   d7a4e:	4611      	mov	r1, r2
   d7a50:	f7fe b8c4 	b.w	d5bdc <network_ready>

000d7a54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7a54:	2300      	movs	r3, #0
   d7a56:	6840      	ldr	r0, [r0, #4]
   d7a58:	461a      	mov	r2, r3
   d7a5a:	4619      	mov	r1, r3
   d7a5c:	f7fe b8c6 	b.w	d5bec <network_on>

000d7a60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7a60:	2300      	movs	r3, #0
   d7a62:	6840      	ldr	r0, [r0, #4]
   d7a64:	461a      	mov	r2, r3
   d7a66:	4619      	mov	r1, r3
   d7a68:	f7fe b8c8 	b.w	d5bfc <network_off>

000d7a6c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7a6c:	6840      	ldr	r0, [r0, #4]
   d7a6e:	2100      	movs	r1, #0
   d7a70:	f7fe b8ec 	b.w	d5c4c <network_is_on>

000d7a74 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7a74:	6840      	ldr	r0, [r0, #4]
   d7a76:	2100      	movs	r1, #0
   d7a78:	f7fe b8f0 	b.w	d5c5c <network_is_off>

000d7a7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7a7c:	6840      	ldr	r0, [r0, #4]
   d7a7e:	2200      	movs	r2, #0
   d7a80:	f081 0101 	eor.w	r1, r1, #1
   d7a84:	f7fe b8c2 	b.w	d5c0c <network_listen>

000d7a88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7a88:	6840      	ldr	r0, [r0, #4]
   d7a8a:	2200      	movs	r2, #0
   d7a8c:	f7fe b8ce 	b.w	d5c2c <network_set_listen_timeout>

000d7a90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7a90:	2200      	movs	r2, #0
   d7a92:	6840      	ldr	r0, [r0, #4]
   d7a94:	4611      	mov	r1, r2
   d7a96:	f7fe b8d1 	b.w	d5c3c <network_get_listen_timeout>

000d7a9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7a9a:	2200      	movs	r2, #0
   d7a9c:	6840      	ldr	r0, [r0, #4]
   d7a9e:	4611      	mov	r1, r2
   d7aa0:	f7fe b8bc 	b.w	d5c1c <network_listening>

000d7aa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7aa8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7aaa:	b095      	sub	sp, #84	; 0x54
   d7aac:	4616      	mov	r6, r2
   d7aae:	460d      	mov	r5, r1
   d7ab0:	4607      	mov	r7, r0
    IPAddress addr;
   d7ab2:	f7ff fdef 	bl	d7694 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7ab6:	4621      	mov	r1, r4
   d7ab8:	2218      	movs	r2, #24
   d7aba:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7abc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7abe:	f000 fa89 	bl	d7fd4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7ac2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7ac4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7ac8:	4621      	mov	r1, r4
   d7aca:	466b      	mov	r3, sp
   d7acc:	aa0c      	add	r2, sp, #48	; 0x30
   d7ace:	4630      	mov	r0, r6
   d7ad0:	f7fd fdfc 	bl	d56cc <netdb_getaddrinfo>
    if (!r) {
   d7ad4:	4604      	mov	r4, r0
   d7ad6:	2800      	cmp	r0, #0
   d7ad8:	d14c      	bne.n	d7b74 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ada:	4602      	mov	r2, r0
   d7adc:	2101      	movs	r1, #1
   d7ade:	6868      	ldr	r0, [r5, #4]
   d7ae0:	f7fe f87c 	bl	d5bdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ae4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ae6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7ae8:	4622      	mov	r2, r4
   d7aea:	6868      	ldr	r0, [r5, #4]
   d7aec:	f7fe f876 	bl	d5bdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7af0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7af2:	4681      	mov	r9, r0
        bool ok = false;
   d7af4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7af6:	2e00      	cmp	r6, #0
   d7af8:	d03c      	beq.n	d7b74 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7afa:	2900      	cmp	r1, #0
   d7afc:	d13a      	bne.n	d7b74 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7afe:	6873      	ldr	r3, [r6, #4]
   d7b00:	2b02      	cmp	r3, #2
   d7b02:	d003      	beq.n	d7b0c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7b04:	2b0a      	cmp	r3, #10
   d7b06:	d011      	beq.n	d7b2c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b08:	69f6      	ldr	r6, [r6, #28]
   d7b0a:	e7f4      	b.n	d7af6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7b0c:	f1b8 0f00 	cmp.w	r8, #0
   d7b10:	d00a      	beq.n	d7b28 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7b12:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7b14:	a806      	add	r0, sp, #24
   d7b16:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7b18:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7b1a:	f7ff fde9 	bl	d76f0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b20:	1d3c      	adds	r4, r7, #4
   d7b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b24:	682b      	ldr	r3, [r5, #0]
   d7b26:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7b28:	4641      	mov	r1, r8
   d7b2a:	e7ed      	b.n	d7b08 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7b2c:	f1b9 0f00 	cmp.w	r9, #0
   d7b30:	d101      	bne.n	d7b36 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7b32:	4649      	mov	r1, r9
   d7b34:	e7e8      	b.n	d7b08 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7b36:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7b38:	2210      	movs	r2, #16
   d7b3a:	a801      	add	r0, sp, #4
   d7b3c:	f000 fa4a 	bl	d7fd4 <memset>
                    a.v = 6;
   d7b40:	2306      	movs	r3, #6
   d7b42:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b46:	ad01      	add	r5, sp, #4
   d7b48:	f104 0308 	add.w	r3, r4, #8
   d7b4c:	3418      	adds	r4, #24
   d7b4e:	6818      	ldr	r0, [r3, #0]
   d7b50:	6859      	ldr	r1, [r3, #4]
   d7b52:	462a      	mov	r2, r5
   d7b54:	c203      	stmia	r2!, {r0, r1}
   d7b56:	3308      	adds	r3, #8
   d7b58:	42a3      	cmp	r3, r4
   d7b5a:	4615      	mov	r5, r2
   d7b5c:	d1f7      	bne.n	d7b4e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7b5e:	a901      	add	r1, sp, #4
   d7b60:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7b62:	ad07      	add	r5, sp, #28
   d7b64:	f7ff fda4 	bl	d76b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b6a:	1d3c      	adds	r4, r7, #4
   d7b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b6e:	682b      	ldr	r3, [r5, #0]
   d7b70:	7023      	strb	r3, [r4, #0]
   d7b72:	e7de      	b.n	d7b32 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7b74:	9800      	ldr	r0, [sp, #0]
   d7b76:	f7fd fda1 	bl	d56bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7b7a:	4638      	mov	r0, r7
   d7b7c:	b015      	add	sp, #84	; 0x54
   d7b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7b84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7b84:	4b02      	ldr	r3, [pc, #8]	; (d7b90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7b86:	4a03      	ldr	r2, [pc, #12]	; (d7b94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7b88:	601a      	str	r2, [r3, #0]
   d7b8a:	2200      	movs	r2, #0
   d7b8c:	605a      	str	r2, [r3, #4]

} // spark
   d7b8e:	4770      	bx	lr
   d7b90:	2003e7cc 	.word	0x2003e7cc
   d7b94:	000d8f50 	.word	0x000d8f50

000d7b98 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7b98:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7b9a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7b9c:	d902      	bls.n	d7ba4 <pinAvailable+0xc>
    return false;
   d7b9e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7ba0:	b002      	add	sp, #8
   d7ba2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7ba4:	f1a0 030b 	sub.w	r3, r0, #11
   d7ba8:	2b02      	cmp	r3, #2
   d7baa:	d81a      	bhi.n	d7be2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7bac:	4c17      	ldr	r4, [pc, #92]	; (d7c0c <pinAvailable+0x74>)
   d7bae:	7821      	ldrb	r1, [r4, #0]
   d7bb0:	f3bf 8f5b 	dmb	ish
   d7bb4:	f011 0101 	ands.w	r1, r1, #1
   d7bb8:	d10b      	bne.n	d7bd2 <pinAvailable+0x3a>
   d7bba:	4620      	mov	r0, r4
   d7bbc:	9101      	str	r1, [sp, #4]
   d7bbe:	f7fc fa79 	bl	d40b4 <__cxa_guard_acquire>
   d7bc2:	9901      	ldr	r1, [sp, #4]
   d7bc4:	b128      	cbz	r0, d7bd2 <pinAvailable+0x3a>
   d7bc6:	4812      	ldr	r0, [pc, #72]	; (d7c10 <pinAvailable+0x78>)
   d7bc8:	f7fe f8cc 	bl	d5d64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7bcc:	4620      	mov	r0, r4
   d7bce:	f7fc fa76 	bl	d40be <__cxa_guard_release>
   d7bd2:	4b0f      	ldr	r3, [pc, #60]	; (d7c10 <pinAvailable+0x78>)
   d7bd4:	7818      	ldrb	r0, [r3, #0]
   d7bd6:	f7fd ff25 	bl	d5a24 <hal_spi_is_enabled>
   d7bda:	2800      	cmp	r0, #0
   d7bdc:	d1df      	bne.n	d7b9e <pinAvailable+0x6>
  return true; // 'pin' is available
   d7bde:	2001      	movs	r0, #1
   d7be0:	e7de      	b.n	d7ba0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7be2:	2801      	cmp	r0, #1
   d7be4:	d809      	bhi.n	d7bfa <pinAvailable+0x62>
   d7be6:	f000 f86b 	bl	d7cc0 <_Z19__fetch_global_Wirev>
   d7bea:	2100      	movs	r1, #0
   d7bec:	7c00      	ldrb	r0, [r0, #16]
   d7bee:	f7fd fef1 	bl	d59d4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7bf2:	f080 0001 	eor.w	r0, r0, #1
   d7bf6:	b2c0      	uxtb	r0, r0
   d7bf8:	e7d2      	b.n	d7ba0 <pinAvailable+0x8>
   d7bfa:	3809      	subs	r0, #9
   d7bfc:	2801      	cmp	r0, #1
   d7bfe:	d8ee      	bhi.n	d7bde <pinAvailable+0x46>
   d7c00:	f7ff fe5c 	bl	d78bc <_Z22__fetch_global_Serial1v>
   d7c04:	7c00      	ldrb	r0, [r0, #16]
   d7c06:	f7fd fe8d 	bl	d5924 <hal_usart_is_enabled>
   d7c0a:	e7f2      	b.n	d7bf2 <pinAvailable+0x5a>
   d7c0c:	2003e638 	.word	0x2003e638
   d7c10:	2003e63c 	.word	0x2003e63c

000d7c14 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c14:	2823      	cmp	r0, #35	; 0x23
{
   d7c16:	b538      	push	{r3, r4, r5, lr}
   d7c18:	4604      	mov	r4, r0
   d7c1a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c1c:	d80a      	bhi.n	d7c34 <pinMode+0x20>
   d7c1e:	29ff      	cmp	r1, #255	; 0xff
   d7c20:	d008      	beq.n	d7c34 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7c22:	f7ff ffb9 	bl	d7b98 <pinAvailable>
   d7c26:	b128      	cbz	r0, d7c34 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7c28:	4629      	mov	r1, r5
   d7c2a:	4620      	mov	r0, r4
}
   d7c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7c30:	f7fd bd54 	b.w	d56dc <HAL_Pin_Mode>
}
   d7c34:	bd38      	pop	{r3, r4, r5, pc}

000d7c36 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7c36:	b538      	push	{r3, r4, r5, lr}
   d7c38:	4604      	mov	r4, r0
   d7c3a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c3c:	f7fd fd56 	bl	d56ec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7c40:	28ff      	cmp	r0, #255	; 0xff
   d7c42:	d010      	beq.n	d7c66 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7c44:	2806      	cmp	r0, #6
   d7c46:	d804      	bhi.n	d7c52 <digitalWrite+0x1c>
   d7c48:	234d      	movs	r3, #77	; 0x4d
   d7c4a:	fa23 f000 	lsr.w	r0, r3, r0
   d7c4e:	07c3      	lsls	r3, r0, #31
   d7c50:	d409      	bmi.n	d7c66 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7c52:	4620      	mov	r0, r4
   d7c54:	f7ff ffa0 	bl	d7b98 <pinAvailable>
   d7c58:	b128      	cbz	r0, d7c66 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7c5a:	4629      	mov	r1, r5
   d7c5c:	4620      	mov	r0, r4
}
   d7c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7c62:	f7fd bd4b 	b.w	d56fc <HAL_GPIO_Write>
}
   d7c66:	bd38      	pop	{r3, r4, r5, pc}

000d7c68 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7c68:	b510      	push	{r4, lr}
   d7c6a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c6c:	f7fd fd3e 	bl	d56ec <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7c70:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7c72:	b2db      	uxtb	r3, r3
   d7c74:	2b01      	cmp	r3, #1
   d7c76:	d908      	bls.n	d7c8a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7c78:	4620      	mov	r0, r4
   d7c7a:	f7ff ff8d 	bl	d7b98 <pinAvailable>
   d7c7e:	b120      	cbz	r0, d7c8a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c80:	4620      	mov	r0, r4
}
   d7c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7c86:	f7fd bd41 	b.w	d570c <HAL_GPIO_Read>
}
   d7c8a:	2000      	movs	r0, #0
   d7c8c:	bd10      	pop	{r4, pc}
	...

000d7c90 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7c90:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7c92:	2300      	movs	r3, #0
   d7c94:	2520      	movs	r5, #32
   d7c96:	8043      	strh	r3, [r0, #2]
   d7c98:	2314      	movs	r3, #20
{
   d7c9a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7c9c:	8003      	strh	r3, [r0, #0]
   d7c9e:	6085      	str	r5, [r0, #8]
   d7ca0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ca2:	4906      	ldr	r1, [pc, #24]	; (d7cbc <_Z17acquireWireBufferv+0x2c>)
   d7ca4:	4628      	mov	r0, r5
   d7ca6:	f000 f83a 	bl	d7d1e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7caa:	4904      	ldr	r1, [pc, #16]	; (d7cbc <_Z17acquireWireBufferv+0x2c>)
	};
   d7cac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cae:	4628      	mov	r0, r5
   d7cb0:	f000 f835 	bl	d7d1e <_ZnajRKSt9nothrow_t>
	};
   d7cb4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7cb6:	4620      	mov	r0, r4
   d7cb8:	bd38      	pop	{r3, r4, r5, pc}
   d7cba:	bf00      	nop
   d7cbc:	000d8f84 	.word	0x000d8f84

000d7cc0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7cc0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cc2:	4d0f      	ldr	r5, [pc, #60]	; (d7d00 <_Z19__fetch_global_Wirev+0x40>)
   d7cc4:	7829      	ldrb	r1, [r5, #0]
   d7cc6:	f3bf 8f5b 	dmb	ish
   d7cca:	f011 0401 	ands.w	r4, r1, #1
{
   d7cce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cd0:	d113      	bne.n	d7cfa <_Z19__fetch_global_Wirev+0x3a>
   d7cd2:	4628      	mov	r0, r5
   d7cd4:	f7fc f9ee 	bl	d40b4 <__cxa_guard_acquire>
   d7cd8:	b178      	cbz	r0, d7cfa <_Z19__fetch_global_Wirev+0x3a>
   d7cda:	a801      	add	r0, sp, #4
   d7cdc:	f7ff ffd8 	bl	d7c90 <_Z17acquireWireBufferv>
   d7ce0:	aa01      	add	r2, sp, #4
   d7ce2:	4621      	mov	r1, r4
   d7ce4:	4807      	ldr	r0, [pc, #28]	; (d7d04 <_Z19__fetch_global_Wirev+0x44>)
   d7ce6:	f7ff fe3f 	bl	d7968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7cea:	4628      	mov	r0, r5
   d7cec:	f7fc f9e7 	bl	d40be <__cxa_guard_release>
   d7cf0:	4a05      	ldr	r2, [pc, #20]	; (d7d08 <_Z19__fetch_global_Wirev+0x48>)
   d7cf2:	4906      	ldr	r1, [pc, #24]	; (d7d0c <_Z19__fetch_global_Wirev+0x4c>)
   d7cf4:	4803      	ldr	r0, [pc, #12]	; (d7d04 <_Z19__fetch_global_Wirev+0x44>)
   d7cf6:	f000 f80b 	bl	d7d10 <__aeabi_atexit>
	return wire;
}
   d7cfa:	4802      	ldr	r0, [pc, #8]	; (d7d04 <_Z19__fetch_global_Wirev+0x44>)
   d7cfc:	b007      	add	sp, #28
   d7cfe:	bd30      	pop	{r4, r5, pc}
   d7d00:	2003e7d8 	.word	0x2003e7d8
   d7d04:	2003e7dc 	.word	0x2003e7dc
   d7d08:	2003e578 	.word	0x2003e578
   d7d0c:	000d7911 	.word	0x000d7911

000d7d10 <__aeabi_atexit>:
   d7d10:	460b      	mov	r3, r1
   d7d12:	4601      	mov	r1, r0
   d7d14:	4618      	mov	r0, r3
   d7d16:	f000 b919 	b.w	d7f4c <__cxa_atexit>

000d7d1a <_ZdlPvj>:
   d7d1a:	f7fc b9be 	b.w	d409a <_ZdlPv>

000d7d1e <_ZnajRKSt9nothrow_t>:
   d7d1e:	f7fc b9ba 	b.w	d4096 <_Znaj>

000d7d22 <_ZSt25__throw_bad_function_callv>:
   d7d22:	b508      	push	{r3, lr}
   d7d24:	f7fd ffca 	bl	d5cbc <abort>

000d7d28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7d28:	4901      	ldr	r1, [pc, #4]	; (d7d30 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7d2a:	f000 b8f9 	b.w	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7d2e:	bf00      	nop
   d7d30:	000d8fa0 	.word	0x000d8fa0

000d7d34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7d34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7d36:	2400      	movs	r4, #0
   d7d38:	2310      	movs	r3, #16
   d7d3a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7d3e:	6803      	ldr	r3, [r0, #0]
   d7d40:	9400      	str	r4, [sp, #0]
   d7d42:	699e      	ldr	r6, [r3, #24]
   d7d44:	f88d 4004 	strb.w	r4, [sp, #4]
   d7d48:	4615      	mov	r5, r2
   d7d4a:	466b      	mov	r3, sp
   d7d4c:	6812      	ldr	r2, [r2, #0]
   d7d4e:	47b0      	blx	r6
   d7d50:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7d54:	f003 0306 	and.w	r3, r3, #6
   d7d58:	2b06      	cmp	r3, #6
   d7d5a:	bf03      	ittte	eq
   d7d5c:	9b00      	ldreq	r3, [sp, #0]
   d7d5e:	602b      	streq	r3, [r5, #0]
   d7d60:	2001      	moveq	r0, #1
   d7d62:	4620      	movne	r0, r4
   d7d64:	b004      	add	sp, #16
   d7d66:	bd70      	pop	{r4, r5, r6, pc}

000d7d68 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7d68:	9800      	ldr	r0, [sp, #0]
   d7d6a:	4290      	cmp	r0, r2
   d7d6c:	bf14      	ite	ne
   d7d6e:	2001      	movne	r0, #1
   d7d70:	2006      	moveq	r0, #6
   d7d72:	4770      	bx	lr

000d7d74 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7d74:	b510      	push	{r4, lr}
   d7d76:	4b03      	ldr	r3, [pc, #12]	; (d7d84 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7d78:	6003      	str	r3, [r0, #0]
   d7d7a:	4604      	mov	r4, r0
   d7d7c:	f000 f8cd 	bl	d7f1a <_ZNSt9type_infoD1Ev>
   d7d80:	4620      	mov	r0, r4
   d7d82:	bd10      	pop	{r4, pc}
   d7d84:	000d8fe0 	.word	0x000d8fe0

000d7d88 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7d88:	b510      	push	{r4, lr}
   d7d8a:	4604      	mov	r4, r0
   d7d8c:	f7ff fff2 	bl	d7d74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7d90:	4620      	mov	r0, r4
   d7d92:	2108      	movs	r1, #8
   d7d94:	f7ff ffc1 	bl	d7d1a <_ZdlPvj>
   d7d98:	4620      	mov	r0, r4
   d7d9a:	bd10      	pop	{r4, pc}

000d7d9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7da0:	461f      	mov	r7, r3
   d7da2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7da6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7daa:	4598      	cmp	r8, r3
   d7dac:	4606      	mov	r6, r0
   d7dae:	4615      	mov	r5, r2
   d7db0:	d107      	bne.n	d7dc2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7db2:	9907      	ldr	r1, [sp, #28]
   d7db4:	f000 f8b4 	bl	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7db8:	b118      	cbz	r0, d7dc2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7dba:	7165      	strb	r5, [r4, #5]
   d7dbc:	2000      	movs	r0, #0
   d7dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7dc2:	4639      	mov	r1, r7
   d7dc4:	4630      	mov	r0, r6
   d7dc6:	f000 f8ab 	bl	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7dca:	2800      	cmp	r0, #0
   d7dcc:	d0f6      	beq.n	d7dbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7dce:	2301      	movs	r3, #1
   d7dd0:	f8c4 8000 	str.w	r8, [r4]
   d7dd4:	7125      	strb	r5, [r4, #4]
   d7dd6:	71a3      	strb	r3, [r4, #6]
   d7dd8:	e7f0      	b.n	d7dbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7dda <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7dda:	b538      	push	{r3, r4, r5, lr}
   d7ddc:	4615      	mov	r5, r2
   d7dde:	461c      	mov	r4, r3
   d7de0:	f000 f89e 	bl	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7de4:	b120      	cbz	r0, d7df0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7de6:	2308      	movs	r3, #8
   d7de8:	60e3      	str	r3, [r4, #12]
   d7dea:	2306      	movs	r3, #6
   d7dec:	6025      	str	r5, [r4, #0]
   d7dee:	7123      	strb	r3, [r4, #4]
   d7df0:	bd38      	pop	{r3, r4, r5, pc}

000d7df2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7df4:	4605      	mov	r5, r0
   d7df6:	460c      	mov	r4, r1
   d7df8:	9201      	str	r2, [sp, #4]
   d7dfa:	461e      	mov	r6, r3
   d7dfc:	f000 f890 	bl	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7e00:	b950      	cbnz	r0, d7e18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7e02:	2e03      	cmp	r6, #3
   d7e04:	d808      	bhi.n	d7e18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7e06:	6823      	ldr	r3, [r4, #0]
   d7e08:	9a01      	ldr	r2, [sp, #4]
   d7e0a:	695b      	ldr	r3, [r3, #20]
   d7e0c:	4629      	mov	r1, r5
   d7e0e:	4620      	mov	r0, r4
   d7e10:	b002      	add	sp, #8
   d7e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7e16:	4718      	bx	r3
   d7e18:	b002      	add	sp, #8
   d7e1a:	bd70      	pop	{r4, r5, r6, pc}

000d7e1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7e1c:	b510      	push	{r4, lr}
   d7e1e:	4b03      	ldr	r3, [pc, #12]	; (d7e2c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7e20:	6003      	str	r3, [r0, #0]
   d7e22:	4604      	mov	r4, r0
   d7e24:	f7ff ffa6 	bl	d7d74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7e28:	4620      	mov	r0, r4
   d7e2a:	bd10      	pop	{r4, pc}
   d7e2c:	000d9040 	.word	0x000d9040

000d7e30 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7e30:	b510      	push	{r4, lr}
   d7e32:	4604      	mov	r4, r0
   d7e34:	f7ff fff2 	bl	d7e1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7e38:	4620      	mov	r0, r4
   d7e3a:	210c      	movs	r1, #12
   d7e3c:	f7ff ff6d 	bl	d7d1a <_ZdlPvj>
   d7e40:	4620      	mov	r0, r4
   d7e42:	bd10      	pop	{r4, pc}

000d7e44 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7e46:	9f08      	ldr	r7, [sp, #32]
   d7e48:	4297      	cmp	r7, r2
   d7e4a:	4605      	mov	r5, r0
   d7e4c:	460e      	mov	r6, r1
   d7e4e:	4614      	mov	r4, r2
   d7e50:	d00a      	beq.n	d7e68 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7e52:	68a8      	ldr	r0, [r5, #8]
   d7e54:	6802      	ldr	r2, [r0, #0]
   d7e56:	9708      	str	r7, [sp, #32]
   d7e58:	6a15      	ldr	r5, [r2, #32]
   d7e5a:	4631      	mov	r1, r6
   d7e5c:	4622      	mov	r2, r4
   d7e5e:	46ac      	mov	ip, r5
   d7e60:	b003      	add	sp, #12
   d7e62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7e66:	4760      	bx	ip
   d7e68:	4619      	mov	r1, r3
   d7e6a:	9301      	str	r3, [sp, #4]
   d7e6c:	f000 f858 	bl	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7e70:	9b01      	ldr	r3, [sp, #4]
   d7e72:	2800      	cmp	r0, #0
   d7e74:	d0ed      	beq.n	d7e52 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7e76:	2006      	movs	r0, #6
   d7e78:	b003      	add	sp, #12
   d7e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7e7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7e7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e80:	460d      	mov	r5, r1
   d7e82:	4619      	mov	r1, r3
   d7e84:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7e88:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7e8c:	4681      	mov	r9, r0
   d7e8e:	4617      	mov	r7, r2
   d7e90:	4698      	mov	r8, r3
   d7e92:	f000 f845 	bl	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7e96:	b190      	cbz	r0, d7ebe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7e98:	2d00      	cmp	r5, #0
   d7e9a:	6034      	str	r4, [r6, #0]
   d7e9c:	7137      	strb	r7, [r6, #4]
   d7e9e:	db09      	blt.n	d7eb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7ea0:	1961      	adds	r1, r4, r5
   d7ea2:	458a      	cmp	sl, r1
   d7ea4:	bf0c      	ite	eq
   d7ea6:	2106      	moveq	r1, #6
   d7ea8:	2101      	movne	r1, #1
   d7eaa:	71b1      	strb	r1, [r6, #6]
   d7eac:	2000      	movs	r0, #0
   d7eae:	b001      	add	sp, #4
   d7eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7eb4:	3502      	adds	r5, #2
   d7eb6:	d1f9      	bne.n	d7eac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7eb8:	2301      	movs	r3, #1
   d7eba:	71b3      	strb	r3, [r6, #6]
   d7ebc:	e7f6      	b.n	d7eac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7ebe:	4554      	cmp	r4, sl
   d7ec0:	d106      	bne.n	d7ed0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7ec2:	4659      	mov	r1, fp
   d7ec4:	4648      	mov	r0, r9
   d7ec6:	f000 f82b 	bl	d7f20 <_ZNKSt9type_infoeqERKS_>
   d7eca:	b108      	cbz	r0, d7ed0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7ecc:	7177      	strb	r7, [r6, #5]
   d7ece:	e7ed      	b.n	d7eac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7ed0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7ed4:	6803      	ldr	r3, [r0, #0]
   d7ed6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7eda:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7ede:	69dc      	ldr	r4, [r3, #28]
   d7ee0:	463a      	mov	r2, r7
   d7ee2:	4643      	mov	r3, r8
   d7ee4:	4629      	mov	r1, r5
   d7ee6:	46a4      	mov	ip, r4
   d7ee8:	b001      	add	sp, #4
   d7eea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7eee:	4760      	bx	ip

000d7ef0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ef4:	4607      	mov	r7, r0
   d7ef6:	460c      	mov	r4, r1
   d7ef8:	4615      	mov	r5, r2
   d7efa:	461e      	mov	r6, r3
   d7efc:	f7ff ff6d 	bl	d7dda <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7f00:	b948      	cbnz	r0, d7f16 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7f02:	68b8      	ldr	r0, [r7, #8]
   d7f04:	6803      	ldr	r3, [r0, #0]
   d7f06:	699f      	ldr	r7, [r3, #24]
   d7f08:	462a      	mov	r2, r5
   d7f0a:	4633      	mov	r3, r6
   d7f0c:	4621      	mov	r1, r4
   d7f0e:	46bc      	mov	ip, r7
   d7f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7f14:	4760      	bx	ip
   d7f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7f1a <_ZNSt9type_infoD1Ev>:
   d7f1a:	4770      	bx	lr

000d7f1c <_ZNKSt9type_info14__is_pointer_pEv>:
   d7f1c:	2000      	movs	r0, #0
   d7f1e:	4770      	bx	lr

000d7f20 <_ZNKSt9type_infoeqERKS_>:
   d7f20:	4281      	cmp	r1, r0
   d7f22:	b508      	push	{r3, lr}
   d7f24:	d00e      	beq.n	d7f44 <_ZNKSt9type_infoeqERKS_+0x24>
   d7f26:	6840      	ldr	r0, [r0, #4]
   d7f28:	7803      	ldrb	r3, [r0, #0]
   d7f2a:	2b2a      	cmp	r3, #42	; 0x2a
   d7f2c:	d00c      	beq.n	d7f48 <_ZNKSt9type_infoeqERKS_+0x28>
   d7f2e:	6849      	ldr	r1, [r1, #4]
   d7f30:	780b      	ldrb	r3, [r1, #0]
   d7f32:	2b2a      	cmp	r3, #42	; 0x2a
   d7f34:	bf08      	it	eq
   d7f36:	3101      	addeq	r1, #1
   d7f38:	f000 f878 	bl	d802c <strcmp>
   d7f3c:	fab0 f080 	clz	r0, r0
   d7f40:	0940      	lsrs	r0, r0, #5
   d7f42:	bd08      	pop	{r3, pc}
   d7f44:	2001      	movs	r0, #1
   d7f46:	e7fc      	b.n	d7f42 <_ZNKSt9type_infoeqERKS_+0x22>
   d7f48:	2000      	movs	r0, #0
   d7f4a:	e7fa      	b.n	d7f42 <_ZNKSt9type_infoeqERKS_+0x22>

000d7f4c <__cxa_atexit>:
   d7f4c:	b510      	push	{r4, lr}
   d7f4e:	4c05      	ldr	r4, [pc, #20]	; (d7f64 <__cxa_atexit+0x18>)
   d7f50:	4613      	mov	r3, r2
   d7f52:	b12c      	cbz	r4, d7f60 <__cxa_atexit+0x14>
   d7f54:	460a      	mov	r2, r1
   d7f56:	4601      	mov	r1, r0
   d7f58:	2002      	movs	r0, #2
   d7f5a:	f3af 8000 	nop.w
   d7f5e:	bd10      	pop	{r4, pc}
   d7f60:	4620      	mov	r0, r4
   d7f62:	e7fc      	b.n	d7f5e <__cxa_atexit+0x12>
   d7f64:	00000000 	.word	0x00000000

000d7f68 <memcmp>:
   d7f68:	b530      	push	{r4, r5, lr}
   d7f6a:	3901      	subs	r1, #1
   d7f6c:	2400      	movs	r4, #0
   d7f6e:	42a2      	cmp	r2, r4
   d7f70:	d101      	bne.n	d7f76 <memcmp+0xe>
   d7f72:	2000      	movs	r0, #0
   d7f74:	e005      	b.n	d7f82 <memcmp+0x1a>
   d7f76:	5d03      	ldrb	r3, [r0, r4]
   d7f78:	3401      	adds	r4, #1
   d7f7a:	5d0d      	ldrb	r5, [r1, r4]
   d7f7c:	42ab      	cmp	r3, r5
   d7f7e:	d0f6      	beq.n	d7f6e <memcmp+0x6>
   d7f80:	1b58      	subs	r0, r3, r5
   d7f82:	bd30      	pop	{r4, r5, pc}

000d7f84 <memcpy>:
   d7f84:	440a      	add	r2, r1
   d7f86:	4291      	cmp	r1, r2
   d7f88:	f100 33ff 	add.w	r3, r0, #4294967295
   d7f8c:	d100      	bne.n	d7f90 <memcpy+0xc>
   d7f8e:	4770      	bx	lr
   d7f90:	b510      	push	{r4, lr}
   d7f92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7f96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7f9a:	4291      	cmp	r1, r2
   d7f9c:	d1f9      	bne.n	d7f92 <memcpy+0xe>
   d7f9e:	bd10      	pop	{r4, pc}

000d7fa0 <memmove>:
   d7fa0:	4288      	cmp	r0, r1
   d7fa2:	b510      	push	{r4, lr}
   d7fa4:	eb01 0402 	add.w	r4, r1, r2
   d7fa8:	d902      	bls.n	d7fb0 <memmove+0x10>
   d7faa:	4284      	cmp	r4, r0
   d7fac:	4623      	mov	r3, r4
   d7fae:	d807      	bhi.n	d7fc0 <memmove+0x20>
   d7fb0:	1e43      	subs	r3, r0, #1
   d7fb2:	42a1      	cmp	r1, r4
   d7fb4:	d008      	beq.n	d7fc8 <memmove+0x28>
   d7fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7fba:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7fbe:	e7f8      	b.n	d7fb2 <memmove+0x12>
   d7fc0:	4402      	add	r2, r0
   d7fc2:	4601      	mov	r1, r0
   d7fc4:	428a      	cmp	r2, r1
   d7fc6:	d100      	bne.n	d7fca <memmove+0x2a>
   d7fc8:	bd10      	pop	{r4, pc}
   d7fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7fd2:	e7f7      	b.n	d7fc4 <memmove+0x24>

000d7fd4 <memset>:
   d7fd4:	4402      	add	r2, r0
   d7fd6:	4603      	mov	r3, r0
   d7fd8:	4293      	cmp	r3, r2
   d7fda:	d100      	bne.n	d7fde <memset+0xa>
   d7fdc:	4770      	bx	lr
   d7fde:	f803 1b01 	strb.w	r1, [r3], #1
   d7fe2:	e7f9      	b.n	d7fd8 <memset+0x4>

000d7fe4 <srand>:
   d7fe4:	b538      	push	{r3, r4, r5, lr}
   d7fe6:	4b0d      	ldr	r3, [pc, #52]	; (d801c <srand+0x38>)
   d7fe8:	681d      	ldr	r5, [r3, #0]
   d7fea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7fec:	4604      	mov	r4, r0
   d7fee:	b97b      	cbnz	r3, d8010 <srand+0x2c>
   d7ff0:	2018      	movs	r0, #24
   d7ff2:	f7fd fe43 	bl	d5c7c <malloc>
   d7ff6:	4a0a      	ldr	r2, [pc, #40]	; (d8020 <srand+0x3c>)
   d7ff8:	4b0a      	ldr	r3, [pc, #40]	; (d8024 <srand+0x40>)
   d7ffa:	63a8      	str	r0, [r5, #56]	; 0x38
   d7ffc:	e9c0 2300 	strd	r2, r3, [r0]
   d8000:	4b09      	ldr	r3, [pc, #36]	; (d8028 <srand+0x44>)
   d8002:	6083      	str	r3, [r0, #8]
   d8004:	230b      	movs	r3, #11
   d8006:	8183      	strh	r3, [r0, #12]
   d8008:	2201      	movs	r2, #1
   d800a:	2300      	movs	r3, #0
   d800c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8010:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8012:	2200      	movs	r2, #0
   d8014:	611c      	str	r4, [r3, #16]
   d8016:	615a      	str	r2, [r3, #20]
   d8018:	bd38      	pop	{r3, r4, r5, pc}
   d801a:	bf00      	nop
   d801c:	2003e514 	.word	0x2003e514
   d8020:	abcd330e 	.word	0xabcd330e
   d8024:	e66d1234 	.word	0xe66d1234
   d8028:	0005deec 	.word	0x0005deec

000d802c <strcmp>:
   d802c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8030:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8034:	2a01      	cmp	r2, #1
   d8036:	bf28      	it	cs
   d8038:	429a      	cmpcs	r2, r3
   d803a:	d0f7      	beq.n	d802c <strcmp>
   d803c:	1ad0      	subs	r0, r2, r3
   d803e:	4770      	bx	lr

000d8040 <strlen>:
   d8040:	4603      	mov	r3, r0
   d8042:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8046:	2a00      	cmp	r2, #0
   d8048:	d1fb      	bne.n	d8042 <strlen+0x2>
   d804a:	1a18      	subs	r0, r3, r0
   d804c:	3801      	subs	r0, #1
   d804e:	4770      	bx	lr

000d8050 <strncpy>:
   d8050:	b510      	push	{r4, lr}
   d8052:	3901      	subs	r1, #1
   d8054:	4603      	mov	r3, r0
   d8056:	b132      	cbz	r2, d8066 <strncpy+0x16>
   d8058:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d805c:	f803 4b01 	strb.w	r4, [r3], #1
   d8060:	3a01      	subs	r2, #1
   d8062:	2c00      	cmp	r4, #0
   d8064:	d1f7      	bne.n	d8056 <strncpy+0x6>
   d8066:	441a      	add	r2, r3
   d8068:	2100      	movs	r1, #0
   d806a:	4293      	cmp	r3, r2
   d806c:	d100      	bne.n	d8070 <strncpy+0x20>
   d806e:	bd10      	pop	{r4, pc}
   d8070:	f803 1b01 	strb.w	r1, [r3], #1
   d8074:	e7f9      	b.n	d806a <strncpy+0x1a>

000d8076 <strnlen>:
   d8076:	b510      	push	{r4, lr}
   d8078:	4602      	mov	r2, r0
   d807a:	4401      	add	r1, r0
   d807c:	428a      	cmp	r2, r1
   d807e:	4613      	mov	r3, r2
   d8080:	d101      	bne.n	d8086 <strnlen+0x10>
   d8082:	1a18      	subs	r0, r3, r0
   d8084:	bd10      	pop	{r4, pc}
   d8086:	781c      	ldrb	r4, [r3, #0]
   d8088:	3201      	adds	r2, #1
   d808a:	2c00      	cmp	r4, #0
   d808c:	d1f6      	bne.n	d807c <strnlen+0x6>
   d808e:	e7f8      	b.n	d8082 <strnlen+0xc>

000d8090 <dynalib_user>:
   d8090:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d80a0:	0000 0000 654e 6576 2072 6f67 6e6e 2061     ....Never gonna 
   d80b0:	6967 6576 7920 756f 7520 2c70 4e20 7665     give you up, Nev
   d80c0:	7265 6720 6e6f 616e 6c20 7465 7920 756f     er gonna let you
   d80d0:	6420 776f 2e6e 2e2e 4800 6c65 6f6c 0a21      down....Hello!.
   d80e0:	3600 3445 3030 3030 2d31 3542 3341 462d     .6E400001-B5A3-F
   d80f0:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   d8100:	4343 3941 0045 4536 3034 3030 3230 422d     CCA9E.6E400002-B
   d8110:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   d8120:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   d8130:	3030 2d33 3542 3341 462d 3933 2d33 3045     003-B5A3-F393-E0
   d8140:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   d8150:	7874 7200 0078 6564 6166 6c75 2074 4d00     tx.rx.default .M
   d8160:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   d8170:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   d8180:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   d8190:	2073 4f4d 4544 7525 003e                    s MODE%u>.

000d819a <_ZL4font>:
   d819a:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d81aa:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d81ba:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d81ca:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d81da:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d81ea:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d81fa:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d820a:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d821a:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d822a:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d823a:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d824a:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d825a:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d826a:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d827a:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d828a:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d829a:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d82aa:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d82ba:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d82ca:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d82da:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d82ea:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d82fa:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d830a:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d831a:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d832a:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d833a:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d834a:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d835a:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d836a:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d837a:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d838a:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d839a:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d83aa:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d83ba:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d83ca:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d83da:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d83ea:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d83fa:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d840a:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d841a:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d842a:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d843a:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d844a:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d845a:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d846a:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d847a:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d848a:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d849a:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d84aa:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d84ba:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d84ca:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d84da:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d84ea:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d84fa:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d850a:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d851a:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d852a:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d853a:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d854a:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d855a:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d856a:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d857a:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d858a:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d859a:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d85aa:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d85ba:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d85ca:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d85da:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d85ea:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d85fa:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d860a:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d861a:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d862a:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d863a:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d864a:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d865a:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d866a:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d867a:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d868a:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d869c <_ZTV12Adafruit_GFX>:
	...
   d86ac:	4af9 000d 7315 000d 40a1 000d 4501 000d     .J...s...@...E..
   d86bc:	4503 000d 4535 000d 4511 000d 4523 000d     .E..5E...E..#E..
   d86cc:	4445 000d 4501 000d 472d 000d 46a7 000d     ED...E..-G...F..
   d86dc:	454d 000d 458b 000d 45c5 000d 460b 000d     ME...E...E...F..
   d86ec:	46a9 000d 4627 000d                         .F..'F..

000d86f4 <_ZTV16OledWingAdafruit>:
	...
   d86fc:	4c09 000d 4c29 000d 4af9 000d 7315 000d     .L..)L...J...s..
   d870c:	4ded 000d 4501 000d 4503 000d 4535 000d     .M...E...E..5E..
   d871c:	4511 000d 4523 000d 4445 000d 4501 000d     .E..#E..ED...E..
   d872c:	472d 000d 4fa7 000d 553b 000d 54ed 000d     -G...O..;U...T..
   d873c:	45c5 000d 460b 000d 46a9 000d 4627 000d     .E...F...F..'F..

000d874c <_ZTVN8particle11SPISettingsE>:
	...
   d8754:	43f1 000d 43c5 000d 43c7 000d               .C...C...C..

000d8760 <_ZL12splash1_data>:
   d8760:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d8770:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d8780:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d8790:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d87a0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d87b0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d87c8:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d87d8:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d87e8:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d87f8:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d8808:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d8818:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d8828:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d8838:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d8848:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d8858:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d8868:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d8878:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d8888:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d8898:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d88a8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d88b8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d88c8:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d88d8:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d88f0:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d8908:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d8918:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d8928:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d8938:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d8948:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d8958:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d8968:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d8978:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d8988:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d8998:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d89a8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d89b8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d89c8:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d89d8:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d89e8:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d89f8:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d8a08:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d8a18:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d8a20 <_ZL12splash2_data>:
   d8a20:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d8a30:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d8a40:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d8a5c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d8a6c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d8a7c:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d8a8c:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d8a9c:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d8aac:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d8abc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d8acc:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d8adc:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d8aec:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d8afc:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d8b0c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d8b1c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d8b2c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d8b3c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d8b4c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d8b5c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d8b6c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d8b7c:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d8b8c:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d8b9c:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d8bb4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d8bc4:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d8bd4:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d8be4:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d8bf4:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d8c00 <_ZTV16Adafruit_SSD1306>:
	...
   d8c08:	4dc1 000d 4dd9 000d 4af9 000d 7315 000d     .M...M...J...s..
   d8c18:	4ded 000d 4501 000d 4503 000d 4535 000d     .M...E...E..5E..
   d8c28:	4511 000d 4523 000d 4445 000d 4501 000d     .E..#E..ED...E..
   d8c38:	472d 000d 4fa7 000d 553b 000d 54ed 000d     -G...O..;U...T..
   d8c48:	45c5 000d 460b 000d 46a9 000d 4627 000d     .E...F...F..'F..

000d8c58 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d8c58:	8000 e0c0 f8f0 fefc                         ........

000d8c60 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d8c60:	0100 0703 1f0f 7f3f                         ......?.

000d8c68 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d8c68:	d5ae a880                                   ....

000d8c6c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d8c6c:	00d3 8d40                                   ..@.

000d8c70 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d8c70:	0020 c8a1                                    ...

000d8c74 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d8c74:	40db a6a4 af2e                              .@....

000d8c7a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d8c7a:	02da 8f81                                   ....

000d8c7e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d8c7e:	12da                                         ...

000d8c81 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d8c81:	02da                                         ...

000d8c84 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d8c84:	0022 21ff 0000 0000                         "..!....

000d8c8c <_ZTVN5spark13EthernetClassE>:
	...
   d8c94:	5d3b 000d 5d31 000d 5d27 000d 5d1d 000d     ;]..1]..']...]..
   d8ca4:	5d11 000d 5d05 000d 7a6d 000d 7a75 000d     .]...]..mz..uz..
   d8cb4:	5cf9 000d 5cf1 000d 5ce7 000d 5cdd 000d     .\...\...\...\..
   d8cc4:	7aa5 000d                                   .z..

000d8cc8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8cc8:	0800 1810 2820 3830 6977 6972 676e 622e     .... (08wiring.b
   d8cd8:	656c 5300 6174 7472 6420 7369 6f63 6576     le.Start discove
   d8ce8:	6972 676e 7320 7265 6976 6563 2e73 5000     ring services..P
   d8cf8:	6565 2072 6564 6976 6563 6920 2073 696d     eer device is mi
   d8d08:	7373 6e69 2167 4600 6961 656c 2064 6f74     ssing!.Failed to
   d8d18:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   d8d28:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   d8d38:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   d8d48:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   d8d58:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   d8d68:	6420 7665 6369 2e65 4400 7075 696c 6163      device..Duplica
   d8d78:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d8d88:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d8d98:	6465 002e 6146 6c69 6465 7420 206f 7061     ed..Failed to ap
   d8da8:	6570 646e 6c20 636f 6c61 6320 6168 6172     pend local chara
   d8db8:	7463 7265 7369 6974 2e63 0000               cteristic...

000d8dc4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8dcc:	6029 000d 608d 000d 6255 000d 60b7 000d     )`...`..Ub...`..
   d8ddc:	602d 000d                                   -`..

000d8de0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8de8:	6025 000d 609b 000d 6027 000d 60bb 000d     %`...`..'`...`..
   d8df8:	604d 000d                                   M`..

000d8dfc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8e04:	6023 000d 60a9 000d 6a09 000d 60bf 000d     #`...`...j...`..
   d8e14:	606d 000d                                   m`..

000d8e18 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8e20:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d8e30 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d8e30:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d8e40 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d8e40:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d8e50:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d8e60:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d8e70 <_ZTV9IPAddress>:
	...
   d8e78:	7631 000d 7621 000d 7623 000d               1v..!v..#v..

000d8e84 <_ZTV9USBSerial>:
	...
   d8e8c:	7711 000d 7779 000d 774f 000d 7315 000d     .w..yw..Ow...s..
   d8e9c:	7741 000d 7713 000d 7723 000d 7773 000d     Aw...w..#w..sw..
   d8eac:	7733 000d 770d 000d                         3w...w..

000d8eb4 <_ZTV11USARTSerial>:
	...
   d8ebc:	7815 000d 7881 000d 7859 000d 7315 000d     .x...x..Yx...s..
   d8ecc:	7829 000d 7845 000d 7837 000d 7853 000d     )x..Ex..7x..Sx..
   d8edc:	7817 000d 781b 000d                         .x...x..

000d8ee4 <_ZTV7TwoWire>:
	...
   d8eec:	7911 000d 795b 000d 7933 000d 7913 000d     .y..[y..3y...y..
   d8efc:	793b 000d 7943 000d 794b 000d 7953 000d     ;y..Cy..Ky..Sy..

000d8f0c <_ZTVN5spark9WiFiClassE>:
	...
   d8f14:	7a0f 000d 7a05 000d 79fb 000d 79bd 000d     .z...z...y...y..
   d8f24:	743d 000d 79ef 000d 7a6d 000d 7a75 000d     =t...y..mz..uz..
   d8f34:	79e3 000d 79db 000d 79d1 000d 79c7 000d     .y...y...y...y..
   d8f44:	7aa5 000d                                   .z..

000d8f48 <_ZTVN5spark12NetworkClassE>:
	...
   d8f50:	7a2d 000d 7a37 000d 7a41 000d 7a4b 000d     -z..7z..Az..Kz..
   d8f60:	7a55 000d 7a61 000d 7a6d 000d 7a75 000d     Uz..az..mz..uz..
   d8f70:	7a7d 000d 7a89 000d 7a91 000d 7a9b 000d     }z...z...z...z..
   d8f80:	7aa5 000d                                   .z..

000d8f84 <_ZSt7nothrow>:
	...

000d8f85 <_ZTSSt19_Sp_make_shared_tag>:
   d8f85:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d8f95:	6572 5f64 6174 0067 0000                     red_tag....

000d8fa0 <_ZTISt19_Sp_make_shared_tag>:
   d8fa0:	8fe0 000d 8f85 000d                         ........

000d8fa8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8fa8:	9040 000d 8fb4 000d 9064 000d               @.......d...

000d8fb4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8fb4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d8fc4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d8fd4:	0045 0000                                   E...

000d8fd8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8fd8:	0000 0000 8fa8 000d 7d75 000d 7d89 000d     ........u}...}..
   d8fe8:	7f1d 000d 7f1d 000d 7df3 000d 7d35 000d     .........}..5}..
   d8ff8:	7ddb 000d 7d9d 000d 7d69 000d               .}...}..i}..

000d9004 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9004:	9040 000d 9010 000d 8fa8 000d               @...........

000d9010 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9010:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d9020:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d9030:	666e 456f 0000 0000                         nfoE....

000d9038 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9038:	0000 0000 9004 000d 7e1d 000d 7e31 000d     .........~..1~..
   d9048:	7f1d 000d 7f1d 000d 7df3 000d 7d35 000d     .........}..5}..
   d9058:	7ef1 000d 7e7d 000d 7e45 000d               .~..}~..E~..

000d9064 <_ZTISt9type_info>:
   d9064:	8fe0 000d 906c 000d                         ....l...

000d906c <_ZTSSt9type_info>:
   d906c:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d9079 <link_const_variable_data_end>:
   d9079:	00          	.byte	0x00
	...

000d907c <link_constructors_location>:
   d907c:	000d42c9 	.word	0x000d42c9
   d9080:	000d5d45 	.word	0x000d5d45
   d9084:	000d5ed5 	.word	0x000d5ed5
   d9088:	000d72ed 	.word	0x000d72ed
   d908c:	000d7449 	.word	0x000d7449
   d9090:	000d7459 	.word	0x000d7459
   d9094:	000d74e1 	.word	0x000d74e1
   d9098:	000d7a19 	.word	0x000d7a19
   d909c:	000d7b85 	.word	0x000d7b85
