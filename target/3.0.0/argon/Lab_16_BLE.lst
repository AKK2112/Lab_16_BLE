
d:/Labs/Lab_16_BLE/target/3.0.0/argon/Lab_16_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005094  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d90b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e510  000d90b4  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000278  2003e578  2003e578  0002e578  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d911c  000d911c  0002911c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9144  000d9144  00029144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d4760  00000000  00000000  00029148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a4cf  00000000  00000000  001fd8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003e3ef  00000000  00000000  00217d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003180  00000000  00000000  00256166  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009ab8  00000000  00000000  002592e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e658  00000000  00000000  00262d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000479f1  00000000  00000000  002a13f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00128aad  00000000  00000000  002e8de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000907c  00000000  00000000  00411894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ffaf 	bl	d7f90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ffd1 	bl	d7fe0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e510 	.word	0x2003e510
   d4048:	000d90b4 	.word	0x000d90b4
   d404c:	2003e578 	.word	0x2003e578
   d4050:	2003e578 	.word	0x2003e578
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 fab3 	bl	d75c8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d9088 	.word	0x000d9088
   d407c:	000d90ac 	.word	0x000d90ac

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b868 	b.w	d4154 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8bd 	bl	d4204 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 ba5d 	b.w	d754c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bdf9 	b.w	d5c88 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bdf7 	b.w	d5c88 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bdfd 	b.w	d5c98 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fd4a 	bl	d5b40 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d5739 	.word	0x000d5739

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL); //bluetooth setup stuff

void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)//defines the onDataRecieved function
{
   d40c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (size_t i = 0; i < len; i++)
  {
    if (data[0] == '1')
    {
      display.clearDisplay();
   d40c8:	4f20      	ldr	r7, [pc, #128]	; (d414c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.println("Never gonna give you up, Never gonna let you down..."); //When a 1 is recieved, it Rick-Rolls the teacher :)
   d40ca:	f8df 8084 	ldr.w	r8, [pc, #132]	; d4150 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>
{
   d40ce:	4604      	mov	r4, r0
   d40d0:	4605      	mov	r5, r0
   d40d2:	1846      	adds	r6, r0, r1
  for (size_t i = 0; i < len; i++)
   d40d4:	42b5      	cmp	r5, r6
   d40d6:	d036      	beq.n	d4146 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x82>
    if (data[0] == '1')
   d40d8:	7823      	ldrb	r3, [r4, #0]
   d40da:	2b31      	cmp	r3, #49	; 0x31
   d40dc:	d112      	bne.n	d4104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>
      display.clearDisplay();
   d40de:	481b      	ldr	r0, [pc, #108]	; (d414c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d40e0:	f000 ffec 	bl	d50bc <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.setTextSize(1);
   d40e4:	4819      	ldr	r0, [pc, #100]	; (d414c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d40e6:	2101      	movs	r1, #1
   d40e8:	f000 fd8d 	bl	d4c06 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40ec:	2200      	movs	r2, #0
   d40ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
      display.println("Never gonna give you up, Never gonna let you down..."); //When a 1 is recieved, it Rick-Rolls the teacher :)
   d40f2:	4816      	ldr	r0, [pc, #88]	; (d414c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d40f4:	4641      	mov	r1, r8
   d40f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
   d40fa:	f003 f94c 	bl	d7396 <_ZN5Print7printlnEPKc>
      display.display();
   d40fe:	4813      	ldr	r0, [pc, #76]	; (d414c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d4100:	f001 fa48 	bl	d5594 <_ZN16Adafruit_SSD13067displayEv>
    }
    if (data[0] == '0')
   d4104:	7823      	ldrb	r3, [r4, #0]
   d4106:	2b30      	cmp	r3, #48	; 0x30
   d4108:	d115      	bne.n	d4136 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
    {
      RGB.control(true); //When a 0 is recieved, it changes the light to yellow and disconnects
   d410a:	2001      	movs	r0, #1
   d410c:	f003 f9bd 	bl	d748a <_ZN8RGBClass7controlEb>
      RGB.color(255, 255, 0);
   d4110:	21ff      	movs	r1, #255	; 0xff
   d4112:	2200      	movs	r2, #0
   d4114:	4608      	mov	r0, r1
   d4116:	f003 f9c8 	bl	d74aa <_ZN8RGBClass5colorEiii>
      RGB.brightness(255);
   d411a:	2101      	movs	r1, #1
   d411c:	20ff      	movs	r0, #255	; 0xff
   d411e:	f003 f9d7 	bl	d74d0 <_ZN8RGBClass10brightnessEhb>
      delay(100);
   d4122:	2064      	movs	r0, #100	; 0x64
   d4124:	f003 f9a8 	bl	d7478 <delay>
      BLE.disconnect();
   d4128:	f002 fb74 	bl	d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d412c:	f002 fd02 	bl	d6b34 <_ZNK8particle14BleLocalDevice10disconnectEv>
      delay(50);
   d4130:	2032      	movs	r0, #50	; 0x32
   d4132:	f003 f9a1 	bl	d7478 <delay>
    }
    Serial.write(data[i]);
   d4136:	f003 fb49 	bl	d77cc <_Z16_fetch_usbserialv>
   d413a:	6803      	ldr	r3, [r0, #0]
   d413c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4140:	689b      	ldr	r3, [r3, #8]
   d4142:	4798      	blx	r3
  for (size_t i = 0; i < len; i++)
   d4144:	e7c6      	b.n	d40d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>
    
  }
}
   d4146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d414a:	bf00      	nop
   d414c:	2003e5b8 	.word	0x2003e5b8
   d4150:	000d80b0 	.word	0x000d80b0

000d4154 <setup>:

void setup()
{
   d4154:	b510      	push	{r4, lr}
  display.setup();
   d4156:	4827      	ldr	r0, [pc, #156]	; (d41f4 <setup+0xa0>)
{
   d4158:	b096      	sub	sp, #88	; 0x58
  display.setup();
   d415a:	f000 fda3 	bl	d4ca4 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d415e:	4825      	ldr	r0, [pc, #148]	; (d41f4 <setup+0xa0>)
   d4160:	f000 ffac 	bl	d50bc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4164:	4823      	ldr	r0, [pc, #140]	; (d41f4 <setup+0xa0>)
   d4166:	f001 fa15 	bl	d5594 <_ZN16Adafruit_SSD13067displayEv>
  BLE.on();
   d416a:	f002 fb53 	bl	d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d416e:	f002 fb9f 	bl	d68b0 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d4172:	f002 fb4f 	bl	d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4176:	4a20      	ldr	r2, [pc, #128]	; (d41f8 <setup+0xa4>)
   d4178:	4601      	mov	r1, r0
   d417a:	a80d      	add	r0, sp, #52	; 0x34
   d417c:	f002 ffb4 	bl	d70e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4180:	a80d      	add	r0, sp, #52	; 0x34
   d4182:	f002 fc1c 	bl	d69be <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4186:	f002 fb45 	bl	d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d418a:	4a1c      	ldr	r2, [pc, #112]	; (d41fc <setup+0xa8>)
   d418c:	4601      	mov	r1, r0
   d418e:	a80d      	add	r0, sp, #52	; 0x34
   d4190:	f002 ffaa 	bl	d70e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4194:	a80d      	add	r0, sp, #52	; 0x34
   d4196:	f002 fc12 	bl	d69be <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;//advertising the bluetooth data
   d419a:	a80d      	add	r0, sp, #52	; 0x34
   d419c:	f002 f9cb 	bl	d6536 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d41a0:	4917      	ldr	r1, [pc, #92]	; (d4200 <setup+0xac>)
   d41a2:	a803      	add	r0, sp, #12
   d41a4:	f002 f8ca 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d41a8:	a903      	add	r1, sp, #12
   d41aa:	a808      	add	r0, sp, #32
   d41ac:	f002 f8c6 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41b0:	a808      	add	r0, sp, #32
   d41b2:	f002 f909 	bl	d63c8 <_ZNK8particle7BleUuid4typeEv>
   d41b6:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d41b8:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41ba:	b99c      	cbnz	r4, d41e4 <setup+0x90>
            uint16_t uuid16 = tempUUID.shorted();
   d41bc:	f002 f923 	bl	d6406 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41c0:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d41c2:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41c6:	2302      	movs	r3, #2
   d41c8:	f10d 020a 	add.w	r2, sp, #10
   d41cc:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d41ce:	a80d      	add	r0, sp, #52	; 0x34
   d41d0:	f002 f9a6 	bl	d6520 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d41d4:	f002 fb1e 	bl	d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41d8:	2200      	movs	r2, #0
   d41da:	a90d      	add	r1, sp, #52	; 0x34
   d41dc:	f002 fb88 	bl	d68f0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d41e0:	b016      	add	sp, #88	; 0x58
   d41e2:	bd10      	pop	{r4, pc}
   d41e4:	f002 f914 	bl	d6410 <_ZNK8particle7BleUuid8rawBytesEv>
   d41e8:	2300      	movs	r3, #0
   d41ea:	9300      	str	r3, [sp, #0]
   d41ec:	4602      	mov	r2, r0
   d41ee:	2310      	movs	r3, #16
   d41f0:	2107      	movs	r1, #7
   d41f2:	e7ec      	b.n	d41ce <setup+0x7a>
   d41f4:	2003e5b8 	.word	0x2003e5b8
   d41f8:	2003e630 	.word	0x2003e630
   d41fc:	2003e628 	.word	0x2003e628
   d4200:	2003e57c 	.word	0x2003e57c

000d4204 <loop>:

void loop()
{
   d4204:	b510      	push	{r4, lr}
  display.loop();
   d4206:	481f      	ldr	r0, [pc, #124]	; (d4284 <loop+0x80>)
{
   d4208:	b08a      	sub	sp, #40	; 0x28
  display.loop();
   d420a:	f000 fd74 	bl	d4cf6 <_ZN16OledWingAdafruit4loopEv>
  if (BLE.connected())
   d420e:	f002 fb01 	bl	d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4212:	f002 fb80 	bl	d6916 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4216:	4604      	mov	r4, r0
   d4218:	b330      	cbz	r0, d4268 <loop+0x64>
  {
    uint8_t txBuf[UART_TX_BUF_SIZE];
    String message = "Hello!\n"; //sends hello to the UART panel on my phone.  
   d421a:	491b      	ldr	r1, [pc, #108]	; (d4288 <loop+0x84>)
   d421c:	a801      	add	r0, sp, #4
   d421e:	f001 fec8 	bl	d5fb2 <_ZN6StringC1EPKc>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4222:	9a03      	ldr	r2, [sp, #12]
   d4224:	2300      	movs	r3, #0
   d4226:	3201      	adds	r2, #1
   d4228:	a905      	add	r1, sp, #20
   d422a:	a801      	add	r0, sp, #4
   d422c:	f001 fee7 	bl	d5ffe <_ZNK6String8getBytesEPhjj>
    message.toCharArray((char *)txBuf, message.length() + 1);
    txCharacteristic.setValue(txBuf, message.length() + 1);
   d4230:	9a03      	ldr	r2, [sp, #12]
   d4232:	4816      	ldr	r0, [pc, #88]	; (d428c <loop+0x88>)
   d4234:	2300      	movs	r3, #0
   d4236:	3201      	adds	r2, #1
   d4238:	a905      	add	r1, sp, #20
   d423a:	f002 f9e3 	bl	d6604 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    RGB.control(true);//after it connects, it changes the RGB to blue
   d423e:	2001      	movs	r0, #1
   d4240:	f003 f923 	bl	d748a <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 255);
   d4244:	2100      	movs	r1, #0
   d4246:	4608      	mov	r0, r1
   d4248:	22ff      	movs	r2, #255	; 0xff
   d424a:	f003 f92e 	bl	d74aa <_ZN8RGBClass5colorEiii>
    RGB.brightness(255);
   d424e:	20ff      	movs	r0, #255	; 0xff
   d4250:	2101      	movs	r1, #1
   d4252:	f003 f93d 	bl	d74d0 <_ZN8RGBClass10brightnessEhb>
    String message = "Hello!\n"; //sends hello to the UART panel on my phone.  
   d4256:	a801      	add	r0, sp, #4
   d4258:	f001 fe60 	bl	d5f1c <_ZN6StringD1Ev>
  {
    RGB.control(true);//if the board isnt connected, it is a yellow light
    RGB.color(255, 255, 0);
    RGB.brightness(255);
  }
  delay(1000);
   d425c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4260:	f003 f90a 	bl	d7478 <delay>
  
}
   d4264:	b00a      	add	sp, #40	; 0x28
   d4266:	bd10      	pop	{r4, pc}
    RGB.control(true);//if the board isnt connected, it is a yellow light
   d4268:	2001      	movs	r0, #1
   d426a:	f003 f90e 	bl	d748a <_ZN8RGBClass7controlEb>
    RGB.color(255, 255, 0);
   d426e:	21ff      	movs	r1, #255	; 0xff
   d4270:	4608      	mov	r0, r1
   d4272:	4622      	mov	r2, r4
   d4274:	f003 f919 	bl	d74aa <_ZN8RGBClass5colorEiii>
    RGB.brightness(255);
   d4278:	2101      	movs	r1, #1
   d427a:	20ff      	movs	r0, #255	; 0xff
   d427c:	f003 f928 	bl	d74d0 <_ZN8RGBClass10brightnessEhb>
   d4280:	e7ec      	b.n	d425c <loop+0x58>
   d4282:	bf00      	nop
   d4284:	2003e5b8 	.word	0x2003e5b8
   d4288:	000d80e5 	.word	0x000d80e5
   d428c:	2003e630 	.word	0x2003e630

000d4290 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4290:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4292:	4616      	mov	r6, r2
   d4294:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4296:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4298:	e9c0 2200 	strd	r2, r2, [r0]
   d429c:	4604      	mov	r4, r0
   d429e:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d42a0:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d42a2:	4619      	mov	r1, r3
   d42a4:	a806      	add	r0, sp, #24
   d42a6:	f002 f849 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d42aa:	9916      	ldr	r1, [sp, #88]	; 0x58
   d42ac:	4638      	mov	r0, r7
   d42ae:	f002 f845 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d42b2:	7833      	ldrb	r3, [r6, #0]
   d42b4:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d42b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d42ba:	9302      	str	r3, [sp, #8]
   d42bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d42be:	4620      	mov	r0, r4
   d42c0:	e9cd 7300 	strd	r7, r3, [sp]
   d42c4:	aa05      	add	r2, sp, #20
   d42c6:	ab06      	add	r3, sp, #24
   d42c8:	4629      	mov	r1, r5
   d42ca:	f002 fdeb 	bl	d6ea4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d42ce:	4620      	mov	r0, r4
   d42d0:	b011      	add	sp, #68	; 0x44
   d42d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d42d4 <_GLOBAL__sub_I_display>:
}
   d42d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
OledWingAdafruit display;
   d42d8:	4d2e      	ldr	r5, [pc, #184]	; (d4394 <_GLOBAL__sub_I_display+0xc0>)
   d42da:	4c2f      	ldr	r4, [pc, #188]	; (d4398 <_GLOBAL__sub_I_display+0xc4>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d42dc:	4e2f      	ldr	r6, [pc, #188]	; (d439c <_GLOBAL__sub_I_display+0xc8>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d42de:	f8df 80e8 	ldr.w	r8, [pc, #232]	; d43c8 <_GLOBAL__sub_I_display+0xf4>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d42e2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; d43cc <_GLOBAL__sub_I_display+0xf8>
   d42e6:	4f2e      	ldr	r7, [pc, #184]	; (d43a0 <_GLOBAL__sub_I_display+0xcc>)
}
   d42e8:	b091      	sub	sp, #68	; 0x44
SYSTEM_THREAD(ENABLED);
   d42ea:	2100      	movs	r1, #0
   d42ec:	2001      	movs	r0, #1
   d42ee:	f001 fc47 	bl	d5b80 <system_thread_set_state>
OledWingAdafruit display;
   d42f2:	2107      	movs	r1, #7
   d42f4:	4628      	mov	r0, r5
   d42f6:	f000 fca7 	bl	d4c48 <_ZN16OledWingAdafruitC1Ei>
   d42fa:	4622      	mov	r2, r4
   d42fc:	4929      	ldr	r1, [pc, #164]	; (d43a4 <_GLOBAL__sub_I_display+0xd0>)
   d42fe:	4628      	mov	r0, r5
   d4300:	f003 fd0c 	bl	d7d1c <__aeabi_atexit>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4304:	4d28      	ldr	r5, [pc, #160]	; (d43a8 <_GLOBAL__sub_I_display+0xd4>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4306:	4929      	ldr	r1, [pc, #164]	; (d43ac <_GLOBAL__sub_I_display+0xd8>)
   d4308:	4630      	mov	r0, r6
   d430a:	f002 f8fd 	bl	d6508 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d430e:	4928      	ldr	r1, [pc, #160]	; (d43b0 <_GLOBAL__sub_I_display+0xdc>)
   d4310:	4640      	mov	r0, r8
   d4312:	f002 f8f9 	bl	d6508 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4316:	4927      	ldr	r1, [pc, #156]	; (d43b4 <_GLOBAL__sub_I_display+0xe0>)
   d4318:	4628      	mov	r0, r5
   d431a:	f002 f8f5 	bl	d6508 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d431e:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4320:	4629      	mov	r1, r5
   d4322:	a806      	add	r0, sp, #24
   d4324:	f88d 3014 	strb.w	r3, [sp, #20]
   d4328:	f002 f808 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
   d432c:	4631      	mov	r1, r6
   d432e:	a80b      	add	r0, sp, #44	; 0x2c
   d4330:	f002 f804 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
   d4334:	2500      	movs	r5, #0
   d4336:	ab0b      	add	r3, sp, #44	; 0x2c
   d4338:	9300      	str	r3, [sp, #0]
   d433a:	aa05      	add	r2, sp, #20
   d433c:	ab06      	add	r3, sp, #24
   d433e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4342:	491d      	ldr	r1, [pc, #116]	; (d43b8 <_GLOBAL__sub_I_display+0xe4>)
   d4344:	4648      	mov	r0, r9
   d4346:	f7ff ffa3 	bl	d4290 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d434a:	4622      	mov	r2, r4
   d434c:	4639      	mov	r1, r7
   d434e:	4648      	mov	r0, r9
   d4350:	f003 fce4 	bl	d7d1c <__aeabi_atexit>
   d4354:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL); //bluetooth setup stuff
   d4356:	4641      	mov	r1, r8
   d4358:	a806      	add	r0, sp, #24
   d435a:	f88d 3014 	strb.w	r3, [sp, #20]
   d435e:	f001 ffed 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
   d4362:	4631      	mov	r1, r6
   d4364:	a80b      	add	r0, sp, #44	; 0x2c
   d4366:	f001 ffe9 	bl	d633c <_ZN8particle7BleUuidC1ERKS0_>
   d436a:	4e14      	ldr	r6, [pc, #80]	; (d43bc <_GLOBAL__sub_I_display+0xe8>)
   d436c:	4b14      	ldr	r3, [pc, #80]	; (d43c0 <_GLOBAL__sub_I_display+0xec>)
   d436e:	9301      	str	r3, [sp, #4]
   d4370:	ab0b      	add	r3, sp, #44	; 0x2c
   d4372:	9300      	str	r3, [sp, #0]
   d4374:	aa05      	add	r2, sp, #20
   d4376:	ab06      	add	r3, sp, #24
   d4378:	4912      	ldr	r1, [pc, #72]	; (d43c4 <_GLOBAL__sub_I_display+0xf0>)
   d437a:	9502      	str	r5, [sp, #8]
   d437c:	4630      	mov	r0, r6
   d437e:	f7ff ff87 	bl	d4290 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4382:	4622      	mov	r2, r4
   d4384:	4639      	mov	r1, r7
   d4386:	4630      	mov	r0, r6
   d4388:	f003 fcc8 	bl	d7d1c <__aeabi_atexit>
}
   d438c:	b011      	add	sp, #68	; 0x44
   d438e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4392:	bf00      	nop
   d4394:	2003e5b8 	.word	0x2003e5b8
   d4398:	2003e578 	.word	0x2003e578
   d439c:	2003e57c 	.word	0x2003e57c
   d43a0:	000d69bf 	.word	0x000d69bf
   d43a4:	000d4c15 	.word	0x000d4c15
   d43a8:	2003e5a4 	.word	0x2003e5a4
   d43ac:	000d80ed 	.word	0x000d80ed
   d43b0:	000d8112 	.word	0x000d8112
   d43b4:	000d8137 	.word	0x000d8137
   d43b8:	000d815c 	.word	0x000d815c
   d43bc:	2003e628 	.word	0x2003e628
   d43c0:	000d40c5 	.word	0x000d40c5
   d43c4:	000d815f 	.word	0x000d815f
   d43c8:	2003e590 	.word	0x2003e590
   d43cc:	2003e630 	.word	0x2003e630

000d43d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d43d0:	4770      	bx	lr

000d43d2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d43d2:	b510      	push	{r4, lr}
  }
   d43d4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d43d6:	4604      	mov	r4, r0
  }
   d43d8:	f003 fca5 	bl	d7d26 <_ZdlPvj>
   d43dc:	4620      	mov	r0, r4
   d43de:	bd10      	pop	{r4, pc}

000d43e0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d43e0:	b40e      	push	{r1, r2, r3}
   d43e2:	b503      	push	{r0, r1, lr}
   d43e4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d43e6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d43e8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d43ec:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d43ee:	f002 fffa 	bl	d73e6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d43f2:	b002      	add	sp, #8
   d43f4:	f85d eb04 	ldr.w	lr, [sp], #4
   d43f8:	b003      	add	sp, #12
   d43fa:	4770      	bx	lr

000d43fc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d43fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d43fe:	4604      	mov	r4, r0
   d4400:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4402:	7922      	ldrb	r2, [r4, #4]
   d4404:	68a3      	ldr	r3, [r4, #8]
   d4406:	b132      	cbz	r2, d4416 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4408:	b9a3      	cbnz	r3, d4434 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d440a:	490b      	ldr	r1, [pc, #44]	; (d4438 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d440c:	b002      	add	sp, #8
   d440e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4412:	f002 bfad 	b.w	d7370 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4416:	4a09      	ldr	r2, [pc, #36]	; (d443c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4418:	7b26      	ldrb	r6, [r4, #12]
   d441a:	4d09      	ldr	r5, [pc, #36]	; (d4440 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d441c:	4909      	ldr	r1, [pc, #36]	; (d4444 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d441e:	7b64      	ldrb	r4, [r4, #13]
   d4420:	2e01      	cmp	r6, #1
   d4422:	bf18      	it	ne
   d4424:	4629      	movne	r1, r5
   d4426:	e9cd 1400 	strd	r1, r4, [sp]
   d442a:	4907      	ldr	r1, [pc, #28]	; (d4448 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d442c:	f7ff ffd8 	bl	d43e0 <_ZN5Print6printfEPKcz>
  }
   d4430:	b002      	add	sp, #8
   d4432:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4434:	4a05      	ldr	r2, [pc, #20]	; (d444c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4436:	e7ef      	b.n	d4418 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4438:	000d8173 	.word	0x000d8173
   d443c:	000d80ec 	.word	0x000d80ec
   d4440:	000d816f 	.word	0x000d816f
   d4444:	000d816b 	.word	0x000d816b
   d4448:	000d8189 	.word	0x000d8189
   d444c:	000d8162 	.word	0x000d8162

000d4450 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4454:	b085      	sub	sp, #20
   d4456:	461f      	mov	r7, r3
   d4458:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d445c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4460:	eba8 0902 	sub.w	r9, r8, r2
   d4464:	eba7 0a01 	sub.w	sl, r7, r1
   d4468:	f1b9 0f00 	cmp.w	r9, #0
   d446c:	bfb8      	it	lt
   d446e:	f1c9 0900 	rsblt	r9, r9, #0
   d4472:	f1ba 0f00 	cmp.w	sl, #0
   d4476:	bfb8      	it	lt
   d4478:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d447c:	45d1      	cmp	r9, sl
        uint16_t color) {
   d447e:	4683      	mov	fp, r0
   d4480:	460c      	mov	r4, r1
   d4482:	4615      	mov	r5, r2
    if (steep) {
   d4484:	dd04      	ble.n	d4490 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4486:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4488:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d448a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d448c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d448e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4490:	42bc      	cmp	r4, r7
   d4492:	dd05      	ble.n	d44a0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4494:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4496:	4645      	mov	r5, r8
   d4498:	4690      	mov	r8, r2
    if (x0 > x1) {
   d449a:	4622      	mov	r2, r4
   d449c:	463c      	mov	r4, r7
   d449e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d44a0:	1b3e      	subs	r6, r7, r4
   d44a2:	b2b2      	uxth	r2, r6
   d44a4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d44a6:	eba8 0205 	sub.w	r2, r8, r5
   d44aa:	2a00      	cmp	r2, #0
   d44ac:	bfb8      	it	lt
   d44ae:	4252      	neglt	r2, r2
   d44b0:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d44b2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d44b6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d44ba:	4545      	cmp	r5, r8
   d44bc:	bfb4      	ite	lt
   d44be:	2201      	movlt	r2, #1
   d44c0:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d44c4:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d44c6:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d44c8:	42bc      	cmp	r4, r7
   d44ca:	dc1c      	bgt.n	d4506 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d44cc:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d44d0:	9303      	str	r3, [sp, #12]
        if (steep) {
   d44d2:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d44d4:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d44d8:	bfc7      	ittee	gt
   d44da:	4629      	movgt	r1, r5
   d44dc:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d44de:	462a      	movle	r2, r5
   d44e0:	4621      	movle	r1, r4
   d44e2:	4658      	mov	r0, fp
   d44e4:	47c0      	blx	r8
        }
        err -= dy;
   d44e6:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d44e8:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d44ea:	1ab6      	subs	r6, r6, r2
   d44ec:	b2b1      	uxth	r1, r6
   d44ee:	b236      	sxth	r6, r6
        if (err < 0) {
   d44f0:	2e00      	cmp	r6, #0
   d44f2:	da05      	bge.n	d4500 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d44f4:	9a02      	ldr	r2, [sp, #8]
   d44f6:	4415      	add	r5, r2
            err += dx;
   d44f8:	9a00      	ldr	r2, [sp, #0]
   d44fa:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d44fc:	b22d      	sxth	r5, r5
            err += dx;
   d44fe:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4500:	3401      	adds	r4, #1
   d4502:	b224      	sxth	r4, r4
   d4504:	e7e0      	b.n	d44c8 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d4506:	b005      	add	sp, #20
   d4508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d450c <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d450c:	4770      	bx	lr

000d450e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d450e:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4510:	6804      	ldr	r4, [r0, #0]
   d4512:	6924      	ldr	r4, [r4, #16]
   d4514:	46a4      	mov	ip, r4
}
   d4516:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d451a:	4760      	bx	ip

000d451c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d451c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d451e:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4520:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4524:	9502      	str	r5, [sp, #8]
   d4526:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4528:	46a4      	mov	ip, r4
}
   d452a:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d452c:	4760      	bx	ip

000d452e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d452e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4530:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4532:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4536:	9502      	str	r5, [sp, #8]
   d4538:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d453a:	46a4      	mov	ip, r4
}
   d453c:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d453e:	4760      	bx	ip

000d4540 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4540:	b470      	push	{r4, r5, r6}
   d4542:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4546:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d454a:	6804      	ldr	r4, [r0, #0]
   d454c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4550:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4552:	46a4      	mov	ip, r4
}
   d4554:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4556:	4760      	bx	ip

000d4558 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4558:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d455c:	461c      	mov	r4, r3
    startWrite();
   d455e:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4560:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4564:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4566:	4605      	mov	r5, r0
   d4568:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d456a:	3c01      	subs	r4, #1
   d456c:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d456e:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4570:	b224      	sxth	r4, r4
    startWrite();
   d4572:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4574:	682b      	ldr	r3, [r5, #0]
   d4576:	f8cd 8004 	str.w	r8, [sp, #4]
   d457a:	9400      	str	r4, [sp, #0]
   d457c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d457e:	4628      	mov	r0, r5
   d4580:	463b      	mov	r3, r7
   d4582:	4632      	mov	r2, r6
   d4584:	4639      	mov	r1, r7
   d4586:	47a0      	blx	r4
    endWrite();
   d4588:	682b      	ldr	r3, [r5, #0]
   d458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d458c:	4628      	mov	r0, r5
}
   d458e:	b002      	add	sp, #8
   d4590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4594:	4718      	bx	r3

000d4596 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4596:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d459a:	461d      	mov	r5, r3
    startWrite();
   d459c:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d459e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d45a2:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d45a4:	4604      	mov	r4, r0
   d45a6:	4617      	mov	r7, r2
   d45a8:	460e      	mov	r6, r1
    startWrite();
   d45aa:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d45ac:	e9cd 7800 	strd	r7, r8, [sp]
   d45b0:	6822      	ldr	r2, [r4, #0]
   d45b2:	1e6b      	subs	r3, r5, #1
   d45b4:	4433      	add	r3, r6
   d45b6:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d45b8:	4620      	mov	r0, r4
   d45ba:	b21b      	sxth	r3, r3
   d45bc:	463a      	mov	r2, r7
   d45be:	4631      	mov	r1, r6
   d45c0:	47a8      	blx	r5
    endWrite();
   d45c2:	6823      	ldr	r3, [r4, #0]
   d45c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45c6:	4620      	mov	r0, r4
}
   d45c8:	b002      	add	sp, #8
   d45ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d45ce:	4718      	bx	r3

000d45d0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d45d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d45d4:	461e      	mov	r6, r3
    startWrite();
   d45d6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d45d8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d45dc:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d45de:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d45e2:	460c      	mov	r4, r1
   d45e4:	4605      	mov	r5, r0
   d45e6:	4617      	mov	r7, r2
    startWrite();
   d45e8:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d45ea:	4426      	add	r6, r4
   d45ec:	42b4      	cmp	r4, r6
   d45ee:	682b      	ldr	r3, [r5, #0]
   d45f0:	da0b      	bge.n	d460a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d45f2:	f8cd 8000 	str.w	r8, [sp]
   d45f6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d45fa:	4621      	mov	r1, r4
   d45fc:	464b      	mov	r3, r9
   d45fe:	463a      	mov	r2, r7
   d4600:	4628      	mov	r0, r5
   d4602:	3401      	adds	r4, #1
   d4604:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d4606:	b224      	sxth	r4, r4
   d4608:	e7f0      	b.n	d45ec <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d460c:	4628      	mov	r0, r5
}
   d460e:	b002      	add	sp, #8
   d4610:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4614:	4718      	bx	r3

000d4616 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d4616:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d4618:	6802      	ldr	r2, [r0, #0]
   d461a:	9101      	str	r1, [sp, #4]
   d461c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4620:	9100      	str	r1, [sp, #0]
   d4622:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4624:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4628:	2200      	movs	r2, #0
   d462a:	4611      	mov	r1, r2
   d462c:	47a0      	blx	r4
}
   d462e:	b002      	add	sp, #8
   d4630:	bd10      	pop	{r4, pc}

000d4632 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4632:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4636:	461d      	mov	r5, r3
    startWrite();
   d4638:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d463a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d463e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4640:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4644:	4604      	mov	r4, r0
   d4646:	460f      	mov	r7, r1
   d4648:	4616      	mov	r6, r2
    startWrite();
   d464a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d464c:	6823      	ldr	r3, [r4, #0]
   d464e:	f8cd 8000 	str.w	r8, [sp]
   d4652:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4656:	4632      	mov	r2, r6
   d4658:	462b      	mov	r3, r5
   d465a:	4639      	mov	r1, r7
   d465c:	4620      	mov	r0, r4
   d465e:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4660:	6823      	ldr	r3, [r4, #0]
   d4662:	f8cd 8000 	str.w	r8, [sp]
   d4666:	f109 32ff 	add.w	r2, r9, #4294967295
   d466a:	4432      	add	r2, r6
   d466c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4670:	4639      	mov	r1, r7
   d4672:	462b      	mov	r3, r5
   d4674:	4620      	mov	r0, r4
   d4676:	b212      	sxth	r2, r2
   d4678:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d467a:	6823      	ldr	r3, [r4, #0]
   d467c:	f8cd 8000 	str.w	r8, [sp]
   d4680:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4684:	4632      	mov	r2, r6
   d4686:	464b      	mov	r3, r9
   d4688:	4639      	mov	r1, r7
   d468a:	4620      	mov	r0, r4
   d468c:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d468e:	1e6b      	subs	r3, r5, #1
   d4690:	19d9      	adds	r1, r3, r7
   d4692:	6823      	ldr	r3, [r4, #0]
   d4694:	f8cd 8000 	str.w	r8, [sp]
   d4698:	6a1d      	ldr	r5, [r3, #32]
   d469a:	4620      	mov	r0, r4
   d469c:	464b      	mov	r3, r9
   d469e:	4632      	mov	r2, r6
   d46a0:	b209      	sxth	r1, r1
   d46a2:	47a8      	blx	r5
    endWrite();
   d46a4:	6823      	ldr	r3, [r4, #0]
   d46a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46a8:	4620      	mov	r0, r4
}
   d46aa:	b002      	add	sp, #8
   d46ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d46b0:	4718      	bx	r3

000d46b2 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d46b2:	4770      	bx	lr

000d46b4 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d46b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d46b8:	4299      	cmp	r1, r3
        uint16_t color) {
   d46ba:	4616      	mov	r6, r2
   d46bc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d46c0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d46c4:	6802      	ldr	r2, [r0, #0]
   d46c6:	4680      	mov	r8, r0
   d46c8:	460d      	mov	r5, r1
   d46ca:	461c      	mov	r4, r3
    if(x0 == x1){
   d46cc:	d113      	bne.n	d46f6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d46ce:	42be      	cmp	r6, r7
   d46d0:	bfc8      	it	gt
   d46d2:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d46d4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d46d8:	bfc4      	itt	gt
   d46da:	463e      	movgt	r6, r7
   d46dc:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d46de:	1c7b      	adds	r3, r7, #1
   d46e0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d46e2:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d46e4:	b21b      	sxth	r3, r3
   d46e6:	4632      	mov	r2, r6
   d46e8:	4629      	mov	r1, r5
   d46ea:	4640      	mov	r0, r8
   d46ec:	46a4      	mov	ip, r4
}
   d46ee:	b003      	add	sp, #12
   d46f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d46f4:	4760      	bx	ip
    } else if(y0 == y1){
   d46f6:	42be      	cmp	r6, r7
   d46f8:	d10a      	bne.n	d4710 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d46fa:	4299      	cmp	r1, r3
   d46fc:	bfc2      	ittt	gt
   d46fe:	460b      	movgt	r3, r1
   d4700:	4625      	movgt	r5, r4
   d4702:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4704:	1c63      	adds	r3, r4, #1
   d4706:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d470a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d470c:	1b5b      	subs	r3, r3, r5
   d470e:	e7e9      	b.n	d46e4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4710:	6953      	ldr	r3, [r2, #20]
   d4712:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4714:	e9cd 7900 	strd	r7, r9, [sp]
   d4718:	f8d8 3000 	ldr.w	r3, [r8]
   d471c:	4640      	mov	r0, r8
   d471e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4720:	4632      	mov	r2, r6
   d4722:	4623      	mov	r3, r4
   d4724:	4629      	mov	r1, r5
   d4726:	47b8      	blx	r7
        endWrite();
   d4728:	f8d8 3000 	ldr.w	r3, [r8]
   d472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d472e:	4640      	mov	r0, r8
}
   d4730:	b003      	add	sp, #12
   d4732:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d4736:	4718      	bx	r3

000d4738 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4738:	f001 0303 	and.w	r3, r1, #3
   d473c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4740:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d4742:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4744:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4748:	bf59      	ittee	pl
   d474a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d474c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d474e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4750:	81c3      	strhmi	r3, [r0, #14]
}
   d4752:	4770      	bx	lr

000d4754 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4754:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d4756:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d4758:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d475a:	4a07      	ldr	r2, [pc, #28]	; (d4778 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d475c:	4d07      	ldr	r5, [pc, #28]	; (d477c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d475e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d4760:	2400      	movs	r4, #0
    _width    = WIDTH;
   d4762:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4764:	f04f 31ff 	mov.w	r1, #4294967295
   d4768:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d476c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d476e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d4770:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d4772:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4774:	6204      	str	r4, [r0, #32]
}
   d4776:	bd30      	pop	{r4, r5, pc}
   d4778:	01000101 	.word	0x01000101
   d477c:	000d86b0 	.word	0x000d86b0

000d4780 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4784:	b089      	sub	sp, #36	; 0x24
   d4786:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d478a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d478c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4790:	9304      	str	r3, [sp, #16]
   d4792:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d4796:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4798:	9305      	str	r3, [sp, #20]
   d479a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d479e:	4604      	mov	r4, r0
    startWrite();
   d47a0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d47a2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d47a6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d47aa:	bf48      	it	mi
   d47ac:	f108 020e 	addmi.w	r2, r8, #14
   d47b0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d47b4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d47b6:	4635      	mov	r5, r6
   d47b8:	9b03      	ldr	r3, [sp, #12]
   d47ba:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d47bc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d47c0:	189a      	adds	r2, r3, r2
   d47c2:	9b05      	ldr	r3, [sp, #20]
   d47c4:	428b      	cmp	r3, r1
   d47c6:	b212      	sxth	r2, r2
   d47c8:	dd27      	ble.n	d481a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47ca:	9b04      	ldr	r3, [sp, #16]
   d47cc:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d47ce:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47d2:	9306      	str	r3, [sp, #24]
   d47d4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d47d8:	4580      	cmp	r8, r0
   d47da:	fa1f f189 	uxth.w	r1, r9
   d47de:	dd17      	ble.n	d4810 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d47e0:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47e2:	bf05      	ittet	eq
   d47e4:	9b06      	ldreq	r3, [sp, #24]
   d47e6:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d47e8:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d47ea:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d47ec:	bf18      	it	ne
   d47ee:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d47f0:	062b      	lsls	r3, r5, #24
   d47f2:	d50a      	bpl.n	d480a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d47f4:	9b02      	ldr	r3, [sp, #8]
   d47f6:	6820      	ldr	r0, [r4, #0]
   d47f8:	9207      	str	r2, [sp, #28]
   d47fa:	4419      	add	r1, r3
   d47fc:	6983      	ldr	r3, [r0, #24]
   d47fe:	b209      	sxth	r1, r1
   d4800:	461f      	mov	r7, r3
   d4802:	4620      	mov	r0, r4
   d4804:	4653      	mov	r3, sl
   d4806:	47b8      	blx	r7
   d4808:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d480a:	f109 0901 	add.w	r9, r9, #1
   d480e:	e7e1      	b.n	d47d4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4810:	9b01      	ldr	r3, [sp, #4]
   d4812:	3301      	adds	r3, #1
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	445e      	add	r6, fp
   d4818:	e7ce      	b.n	d47b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d481a:	6823      	ldr	r3, [r4, #0]
   d481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d481e:	4620      	mov	r0, r4
}
   d4820:	b009      	add	sp, #36	; 0x24
   d4822:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d4826:	4718      	bx	r3

000d4828 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d482c:	ed2d 8b02 	vpush	{d8}
   d4830:	b091      	sub	sp, #68	; 0x44
   d4832:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4834:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4836:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d483a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d483e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d4842:	9103      	str	r1, [sp, #12]
   d4844:	461f      	mov	r7, r3
   d4846:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d484a:	9304      	str	r3, [sp, #16]
   d484c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d484e:	2a00      	cmp	r2, #0
   d4850:	f040 80c5 	bne.w	d49de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d4854:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4858:	428b      	cmp	r3, r1
   d485a:	f340 814c 	ble.w	d4af6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d485e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d4862:	42b3      	cmp	r3, r6
   d4864:	f340 8147 	ble.w	d4af6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4868:	2306      	movs	r3, #6
   d486a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d486e:	2b00      	cmp	r3, #0
   d4870:	f340 8141 	ble.w	d4af6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d4874:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4878:	2b00      	cmp	r3, #0
   d487a:	f340 813c 	ble.w	d4af6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d487e:	7f03      	ldrb	r3, [r0, #28]
   d4880:	b91b      	cbnz	r3, d488a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d4882:	2faf      	cmp	r7, #175	; 0xaf
   d4884:	bf84      	itt	hi
   d4886:	3701      	addhi	r7, #1
   d4888:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d488a:	f8db 3000 	ldr.w	r3, [fp]
   d488e:	4658      	mov	r0, fp
   d4890:	695b      	ldr	r3, [r3, #20]
   d4892:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4894:	2205      	movs	r2, #5
   d4896:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4898:	2200      	movs	r2, #0
   d489a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d489c:	4a98      	ldr	r2, [pc, #608]	; (d4b00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d489e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d48a2:	18d3      	adds	r3, r2, r3
   d48a4:	930c      	str	r3, [sp, #48]	; 0x30
   d48a6:	b2b3      	uxth	r3, r6
   d48a8:	9306      	str	r3, [sp, #24]
   d48aa:	9a05      	ldr	r2, [sp, #20]
   d48ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d48ae:	5c9b      	ldrb	r3, [r3, r2]
   d48b0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d48b2:	b2ab      	uxth	r3, r5
   d48b4:	930b      	str	r3, [sp, #44]	; 0x2c
   d48b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d48ba:	9308      	str	r3, [sp, #32]
   d48bc:	9b03      	ldr	r3, [sp, #12]
   d48be:	fb02 f905 	mul.w	r9, r2, r5
   d48c2:	fa19 f983 	uxtah	r9, r9, r3
   d48c6:	fa0f f389 	sxth.w	r3, r9
   d48ca:	ee08 3a10 	vmov	s16, r3
   d48ce:	2308      	movs	r3, #8
   d48d0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d48d2:	9b03      	ldr	r3, [sp, #12]
   d48d4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d48d8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d48dc:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d48e0:	9a07      	ldr	r2, [sp, #28]
   d48e2:	f8db 3000 	ldr.w	r3, [fp]
   d48e6:	07d2      	lsls	r2, r2, #31
   d48e8:	d552      	bpl.n	d4990 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d48ea:	2d01      	cmp	r5, #1
   d48ec:	fa1f f289 	uxth.w	r2, r9
   d48f0:	d13e      	bne.n	d4970 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d48f2:	2c01      	cmp	r4, #1
   d48f4:	d13c      	bne.n	d4970 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d48f6:	699b      	ldr	r3, [r3, #24]
   d48f8:	9906      	ldr	r1, [sp, #24]
   d48fa:	461f      	mov	r7, r3
   d48fc:	9b04      	ldr	r3, [sp, #16]
   d48fe:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d4900:	b212      	sxth	r2, r2
   d4902:	4651      	mov	r1, sl
   d4904:	4658      	mov	r0, fp
   d4906:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4908:	f109 0301 	add.w	r3, r9, #1
   d490c:	fa4f f983 	sxtb.w	r9, r3
   d4910:	9b07      	ldr	r3, [sp, #28]
   d4912:	085b      	lsrs	r3, r3, #1
   d4914:	9307      	str	r3, [sp, #28]
   d4916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4918:	3b01      	subs	r3, #1
   d491a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d491e:	930a      	str	r3, [sp, #40]	; 0x28
   d4920:	d1de      	bne.n	d48e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4922:	9f05      	ldr	r7, [sp, #20]
   d4924:	3701      	adds	r7, #1
   d4926:	b27b      	sxtb	r3, r7
   d4928:	9305      	str	r3, [sp, #20]
   d492a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d492c:	3b01      	subs	r3, #1
   d492e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4932:	9309      	str	r3, [sp, #36]	; 0x24
   d4934:	d1b9      	bne.n	d48aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d4936:	9b04      	ldr	r3, [sp, #16]
   d4938:	4543      	cmp	r3, r8
   d493a:	d00f      	beq.n	d495c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d493c:	2d01      	cmp	r5, #1
   d493e:	f8db 3000 	ldr.w	r3, [fp]
   d4942:	d13b      	bne.n	d49bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4944:	2c01      	cmp	r4, #1
   d4946:	d139      	bne.n	d49bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4948:	9908      	ldr	r1, [sp, #32]
   d494a:	f8cd 8000 	str.w	r8, [sp]
   d494e:	3105      	adds	r1, #5
   d4950:	6a1c      	ldr	r4, [r3, #32]
   d4952:	4632      	mov	r2, r6
   d4954:	2308      	movs	r3, #8
   d4956:	b209      	sxth	r1, r1
   d4958:	4658      	mov	r0, fp
   d495a:	47a0      	blx	r4
        endWrite();
   d495c:	f8db 3000 	ldr.w	r3, [fp]
   d4960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4962:	4658      	mov	r0, fp
}
   d4964:	b011      	add	sp, #68	; 0x44
   d4966:	ecbd 8b02 	vpop	{d8}
   d496a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d496e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d4970:	9906      	ldr	r1, [sp, #24]
   d4972:	fb14 f202 	smulbb	r2, r4, r2
   d4976:	440a      	add	r2, r1
   d4978:	9904      	ldr	r1, [sp, #16]
   d497a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d497c:	9400      	str	r4, [sp, #0]
   d497e:	69db      	ldr	r3, [r3, #28]
   d4980:	ee18 1a10 	vmov	r1, s16
   d4984:	461f      	mov	r7, r3
   d4986:	b212      	sxth	r2, r2
   d4988:	462b      	mov	r3, r5
   d498a:	4658      	mov	r0, fp
   d498c:	47b8      	blx	r7
   d498e:	e7bb      	b.n	d4908 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d4990:	9a04      	ldr	r2, [sp, #16]
   d4992:	4542      	cmp	r2, r8
   d4994:	d0b8      	beq.n	d4908 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d4996:	2d01      	cmp	r5, #1
   d4998:	fa1f f289 	uxth.w	r2, r9
   d499c:	d107      	bne.n	d49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d499e:	2c01      	cmp	r4, #1
   d49a0:	d105      	bne.n	d49ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d49a2:	699b      	ldr	r3, [r3, #24]
   d49a4:	9906      	ldr	r1, [sp, #24]
   d49a6:	461f      	mov	r7, r3
   d49a8:	440a      	add	r2, r1
   d49aa:	4643      	mov	r3, r8
   d49ac:	e7a8      	b.n	d4900 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d49ae:	9906      	ldr	r1, [sp, #24]
   d49b0:	f8cd 8004 	str.w	r8, [sp, #4]
   d49b4:	fb14 f202 	smulbb	r2, r4, r2
   d49b8:	440a      	add	r2, r1
   d49ba:	e7df      	b.n	d497c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d49bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d49be:	f8cd 8004 	str.w	r8, [sp, #4]
   d49c2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d49c6:	9a08      	ldr	r2, [sp, #32]
   d49c8:	00e4      	lsls	r4, r4, #3
   d49ca:	440a      	add	r2, r1
   d49cc:	4611      	mov	r1, r2
   d49ce:	9400      	str	r4, [sp, #0]
   d49d0:	69dc      	ldr	r4, [r3, #28]
   d49d2:	4632      	mov	r2, r6
   d49d4:	462b      	mov	r3, r5
   d49d6:	b209      	sxth	r1, r1
   d49d8:	4658      	mov	r0, fp
   d49da:	47a0      	blx	r4
        endWrite();
   d49dc:	e7be      	b.n	d495c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d49de:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d49e0:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d49e2:	6812      	ldr	r2, [r2, #0]
   d49e4:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d49e6:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d49e8:	b2ff      	uxtb	r7, r7
   d49ea:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d49ee:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d49f2:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d49f4:	789a      	ldrb	r2, [r3, #2]
   d49f6:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d49f8:	78da      	ldrb	r2, [r3, #3]
   d49fa:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d49fc:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d49fe:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d4a02:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4a06:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d4a08:	d801      	bhi.n	d4a0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d4a0a:	2c01      	cmp	r4, #1
   d4a0c:	d957      	bls.n	d4abe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d4a0e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d4a12:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4a14:	fa0f f38a 	sxth.w	r3, sl
   d4a18:	9307      	str	r3, [sp, #28]
        startWrite();
   d4a1a:	f8db 3000 	ldr.w	r3, [fp]
   d4a1e:	4658      	mov	r0, fp
   d4a20:	695b      	ldr	r3, [r3, #20]
   d4a22:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a24:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4a26:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a2a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a2c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4a30:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d4a32:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a34:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4a38:	429f      	cmp	r7, r3
   d4a3a:	d28f      	bcs.n	d495c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a3c:	9b07      	ldr	r3, [sp, #28]
   d4a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4a40:	443b      	add	r3, r7
   d4a42:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4a46:	2200      	movs	r2, #0
   d4a48:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a4c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a4e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a52:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a56:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a5a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d4a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d4a5e:	9905      	ldr	r1, [sp, #20]
   d4a60:	4291      	cmp	r1, r2
   d4a62:	d241      	bcs.n	d4ae8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4a64:	1c5a      	adds	r2, r3, #1
   d4a66:	b2d2      	uxtb	r2, r2
   d4a68:	075b      	lsls	r3, r3, #29
   d4a6a:	920c      	str	r2, [sp, #48]	; 0x30
   d4a6c:	d107      	bne.n	d4a7e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d4a6e:	9b06      	ldr	r3, [sp, #24]
   d4a70:	9906      	ldr	r1, [sp, #24]
   d4a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4a74:	3301      	adds	r3, #1
   d4a76:	b29b      	uxth	r3, r3
   d4a78:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4a7c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d4a7e:	f019 0f80 	tst.w	r9, #128	; 0x80
   d4a82:	d012      	beq.n	d4aaa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4a84:	2d01      	cmp	r5, #1
   d4a86:	f8db 3000 	ldr.w	r3, [fp]
   d4a8a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4a8e:	d11a      	bne.n	d4ac6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4a90:	2c01      	cmp	r4, #1
   d4a92:	d118      	bne.n	d4ac6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4a96:	699b      	ldr	r3, [r3, #24]
   d4a98:	4411      	add	r1, r2
   d4a9a:	9a05      	ldr	r2, [sp, #20]
   d4a9c:	4411      	add	r1, r2
   d4a9e:	461e      	mov	r6, r3
   d4aa0:	4652      	mov	r2, sl
   d4aa2:	9b04      	ldr	r3, [sp, #16]
   d4aa4:	b209      	sxth	r1, r1
   d4aa6:	4658      	mov	r0, fp
   d4aa8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4aaa:	9e05      	ldr	r6, [sp, #20]
   d4aac:	3601      	adds	r6, #1
   d4aae:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4ab0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4ab4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4ab6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4abc:	e7ce      	b.n	d4a5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4abe:	2300      	movs	r3, #0
   d4ac0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4ac4:	e7a9      	b.n	d4a1a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4ac6:	9805      	ldr	r0, [sp, #20]
   d4ac8:	9a08      	ldr	r2, [sp, #32]
   d4aca:	4402      	add	r2, r0
   d4acc:	fb02 1105 	mla	r1, r2, r5, r1
   d4ad0:	9a04      	ldr	r2, [sp, #16]
   d4ad2:	e9cd 4200 	strd	r4, r2, [sp]
   d4ad6:	69db      	ldr	r3, [r3, #28]
   d4ad8:	ee18 2a10 	vmov	r2, s16
   d4adc:	461e      	mov	r6, r3
   d4ade:	b209      	sxth	r1, r1
   d4ae0:	462b      	mov	r3, r5
   d4ae2:	4658      	mov	r0, fp
   d4ae4:	47b0      	blx	r6
   d4ae6:	e7e0      	b.n	d4aaa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4aea:	3701      	adds	r7, #1
   d4aec:	4498      	add	r8, r3
   d4aee:	fa5f f888 	uxtb.w	r8, r8
   d4af2:	b2ff      	uxtb	r7, r7
   d4af4:	e79f      	b.n	d4a36 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4af6:	b011      	add	sp, #68	; 0x44
   d4af8:	ecbd 8b02 	vpop	{d8}
   d4afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b00:	000d81a6 	.word	0x000d81a6

000d4b04 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4b06:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4b08:	b085      	sub	sp, #20
   d4b0a:	4604      	mov	r4, r0
   d4b0c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4b0e:	2a00      	cmp	r2, #0
   d4b10:	d134      	bne.n	d4b7c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4b12:	290a      	cmp	r1, #10
   d4b14:	d108      	bne.n	d4b28 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4b16:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4b18:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4b1a:	7e42      	ldrb	r2, [r0, #25]
   d4b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4b20:	8263      	strh	r3, [r4, #18]
}
   d4b22:	2001      	movs	r0, #1
   d4b24:	b005      	add	sp, #20
   d4b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4b28:	290d      	cmp	r1, #13
   d4b2a:	d0fa      	beq.n	d4b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4b2c:	7ee1      	ldrb	r1, [r4, #27]
   d4b2e:	7e00      	ldrb	r0, [r0, #24]
   d4b30:	7e65      	ldrb	r5, [r4, #25]
   d4b32:	b171      	cbz	r1, d4b52 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4b34:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4b38:	2106      	movs	r1, #6
   d4b3a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4b3e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4b42:	42b1      	cmp	r1, r6
   d4b44:	bfc1      	itttt	gt
   d4b46:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4b4a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4b4c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4b50:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4b52:	8ae2      	ldrh	r2, [r4, #22]
   d4b54:	9201      	str	r2, [sp, #4]
   d4b56:	8aa2      	ldrh	r2, [r4, #20]
   d4b58:	9200      	str	r2, [sp, #0]
   d4b5a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4b5e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4b62:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4b66:	4620      	mov	r0, r4
   d4b68:	f7ff fe5e 	bl	d4828 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4b6c:	7e23      	ldrb	r3, [r4, #24]
   d4b6e:	8a22      	ldrh	r2, [r4, #16]
   d4b70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4b74:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4b78:	8223      	strh	r3, [r4, #16]
   d4b7a:	e7d2      	b.n	d4b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4b7c:	290a      	cmp	r1, #10
   d4b7e:	d107      	bne.n	d4b90 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4b80:	2300      	movs	r3, #0
   d4b82:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4b84:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4b86:	7e41      	ldrb	r1, [r0, #25]
   d4b88:	8a42      	ldrh	r2, [r0, #18]
   d4b8a:	fb01 2303 	mla	r3, r1, r3, r2
   d4b8e:	e7c7      	b.n	d4b20 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4b90:	290d      	cmp	r1, #13
   d4b92:	d0c6      	beq.n	d4b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4b94:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4b96:	42a9      	cmp	r1, r5
   d4b98:	d3c3      	bcc.n	d4b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4b9a:	7a51      	ldrb	r1, [r2, #9]
   d4b9c:	4299      	cmp	r1, r3
   d4b9e:	d3c0      	bcc.n	d4b22 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4ba0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4ba2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4ba4:	b2ed      	uxtb	r5, r5
   d4ba6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4baa:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4bac:	b32f      	cbz	r7, d4bfa <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4bae:	78e9      	ldrb	r1, [r5, #3]
   d4bb0:	b319      	cbz	r1, d4bfa <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4bb2:	7ee1      	ldrb	r1, [r4, #27]
   d4bb4:	7e00      	ldrb	r0, [r0, #24]
   d4bb6:	7e66      	ldrb	r6, [r4, #25]
   d4bb8:	b191      	cbz	r1, d4be0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4bba:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4bbe:	4439      	add	r1, r7
   d4bc0:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4bc4:	fb00 7101 	mla	r1, r0, r1, r7
   d4bc8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4bcc:	42b9      	cmp	r1, r7
   d4bce:	dd07      	ble.n	d4be0 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4bd0:	2700      	movs	r7, #0
   d4bd2:	8227      	strh	r7, [r4, #16]
   d4bd4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4bd8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4bda:	fb02 1206 	mla	r2, r2, r6, r1
   d4bde:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4be0:	8ae2      	ldrh	r2, [r4, #22]
   d4be2:	9201      	str	r2, [sp, #4]
   d4be4:	8aa2      	ldrh	r2, [r4, #20]
   d4be6:	9200      	str	r2, [sp, #0]
   d4be8:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4bec:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4bf0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	f7ff fe17 	bl	d4828 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4bfa:	7929      	ldrb	r1, [r5, #4]
   d4bfc:	7e23      	ldrb	r3, [r4, #24]
   d4bfe:	8a22      	ldrh	r2, [r4, #16]
   d4c00:	fb01 2303 	mla	r3, r1, r3, r2
   d4c04:	e7b8      	b.n	d4b78 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4c06 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4c06:	2901      	cmp	r1, #1
   d4c08:	bf38      	it	cc
   d4c0a:	2101      	movcc	r1, #1
   d4c0c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4c0e:	7641      	strb	r1, [r0, #25]
}
   d4c10:	4770      	bx	lr
	...

000d4c14 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4c14:	b510      	push	{r4, lr}
   d4c16:	4b06      	ldr	r3, [pc, #24]	; (d4c30 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4c18:	6003      	str	r3, [r0, #0]
   d4c1a:	4604      	mov	r4, r0
	if (mutex) {
   d4c1c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4c1e:	b108      	cbz	r0, d4c24 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4c20:	f000 fe26 	bl	d5870 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4c24:	4620      	mov	r0, r4
   d4c26:	f000 f8d1 	bl	d4dcc <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	bd10      	pop	{r4, pc}
   d4c2e:	bf00      	nop
   d4c30:	000d8708 	.word	0x000d8708

000d4c34 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4c34:	b510      	push	{r4, lr}
   d4c36:	4604      	mov	r4, r0
}
   d4c38:	f7ff ffec 	bl	d4c14 <_ZN16OledWingAdafruitD1Ev>
   d4c3c:	4620      	mov	r0, r4
   d4c3e:	2170      	movs	r1, #112	; 0x70
   d4c40:	f003 f871 	bl	d7d26 <_ZdlPvj>
   d4c44:	4620      	mov	r0, r4
   d4c46:	bd10      	pop	{r4, pc}

000d4c48 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4c48:	b530      	push	{r4, r5, lr}
   d4c4a:	b085      	sub	sp, #20
   d4c4c:	4604      	mov	r4, r0
   d4c4e:	460d      	mov	r5, r1
   d4c50:	f003 f83c 	bl	d7ccc <_Z19__fetch_global_Wirev>
   d4c54:	4a10      	ldr	r2, [pc, #64]	; (d4c98 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4c56:	4911      	ldr	r1, [pc, #68]	; (d4c9c <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4c58:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4c5c:	f04f 32ff 	mov.w	r2, #4294967295
   d4c60:	2180      	movs	r1, #128	; 0x80
   d4c62:	4603      	mov	r3, r0
   d4c64:	9200      	str	r2, [sp, #0]
   d4c66:	4620      	mov	r0, r4
   d4c68:	2220      	movs	r2, #32
   d4c6a:	f000 f935 	bl	d4ed8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4c6e:	4b0c      	ldr	r3, [pc, #48]	; (d4ca0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4c70:	6023      	str	r3, [r4, #0]
   d4c72:	2300      	movs	r3, #0
   d4c74:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4c78:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4c7c:	f000 f854 	bl	d4d28 <_ZN8DebounceC1Ev>
   d4c80:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4c84:	f000 f850 	bl	d4d28 <_ZN8DebounceC1Ev>
   d4c88:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4c8c:	f000 f84c 	bl	d4d28 <_ZN8DebounceC1Ev>
}
   d4c90:	4620      	mov	r0, r4
   d4c92:	b005      	add	sp, #20
   d4c94:	bd30      	pop	{r4, r5, pc}
   d4c96:	bf00      	nop
   d4c98:	00061a80 	.word	0x00061a80
   d4c9c:	000186a0 	.word	0x000186a0
   d4ca0:	000d8708 	.word	0x000d8708

000d4ca4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4ca4:	b513      	push	{r0, r1, r4, lr}
   d4ca6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4ca8:	3050      	adds	r0, #80	; 0x50
   d4caa:	f000 fdd9 	bl	d5860 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4cae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cb0:	07d9      	lsls	r1, r3, #31
   d4cb2:	d505      	bpl.n	d4cc0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4cb4:	2202      	movs	r2, #2
   d4cb6:	2104      	movs	r1, #4
   d4cb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4cbc:	f000 f848 	bl	d4d50 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4cc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cc2:	079a      	lsls	r2, r3, #30
   d4cc4:	d505      	bpl.n	d4cd2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4cc6:	2200      	movs	r2, #0
   d4cc8:	2103      	movs	r1, #3
   d4cca:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4cce:	f000 f83f 	bl	d4d50 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4cd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4cd4:	075b      	lsls	r3, r3, #29
   d4cd6:	d505      	bpl.n	d4ce4 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4cd8:	2202      	movs	r2, #2
   d4cda:	4611      	mov	r1, r2
   d4cdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4ce0:	f000 f836 	bl	d4d50 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4ce4:	2301      	movs	r3, #1
   d4ce6:	9300      	str	r3, [sp, #0]
   d4ce8:	223c      	movs	r2, #60	; 0x3c
   d4cea:	2102      	movs	r1, #2
   d4cec:	4620      	mov	r0, r4
   d4cee:	f000 f9f3 	bl	d50d8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4cf2:	b002      	add	sp, #8
   d4cf4:	bd10      	pop	{r4, pc}

000d4cf6 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4cf6:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4cf8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4cfa:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4cfc:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4cfe:	d502      	bpl.n	d4d06 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4d00:	3058      	adds	r0, #88	; 0x58
   d4d02:	f000 f832 	bl	d4d6a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4d06:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4d08:	079a      	lsls	r2, r3, #30
   d4d0a:	d503      	bpl.n	d4d14 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4d0c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4d10:	f000 f82b 	bl	d4d6a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4d14:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4d16:	075b      	lsls	r3, r3, #29
   d4d18:	d505      	bpl.n	d4d26 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4d1a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4d22:	f000 b822 	b.w	d4d6a <_ZN8Debounce6updateEv>
}
   d4d26:	bd10      	pop	{r4, pc}

000d4d28 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4d28:	2100      	movs	r1, #0
   d4d2a:	220a      	movs	r2, #10
   d4d2c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4d30:	4770      	bx	lr

000d4d32 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4d32:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4d34:	b510      	push	{r4, lr}
   d4d36:	4604      	mov	r4, r0
    this->pin = pin;
   d4d38:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4d3a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4d3c:	b288      	uxth	r0, r1
   d4d3e:	f002 ff99 	bl	d7c74 <digitalRead>
   d4d42:	b108      	cbz	r0, d4d48 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4d44:	2303      	movs	r3, #3
   d4d46:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d48:	f000 fcfe 	bl	d5748 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4d4c:	6020      	str	r0, [r4, #0]
#endif
}
   d4d4e:	bd10      	pop	{r4, pc}

000d4d50 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4d50:	b538      	push	{r3, r4, r5, lr}
   d4d52:	460c      	mov	r4, r1
   d4d54:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4d56:	4611      	mov	r1, r2
   d4d58:	b2a0      	uxth	r0, r4
   d4d5a:	f002 ff61 	bl	d7c20 <pinMode>
  
  this->attach(pin);
   d4d5e:	4621      	mov	r1, r4
   d4d60:	4628      	mov	r0, r5
}
   d4d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4d66:	f7ff bfe4 	b.w	d4d32 <_ZN8Debounce6attachEi>

000d4d6a <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4d6a:	b538      	push	{r3, r4, r5, lr}
   d4d6c:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4d6e:	79c0      	ldrb	r0, [r0, #7]
   d4d70:	f002 ff80 	bl	d7c74 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4d74:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4d76:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4d78:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4d7c:	bf18      	it	ne
   d4d7e:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4d80:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4d84:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4d86:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4d88:	d00a      	beq.n	d4da0 <_ZN8Debounce6updateEv+0x36>
   d4d8a:	f000 fcdd 	bl	d5748 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4d8e:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4d90:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4d92:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4d96:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4d98:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4d9a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4d9e:	bd38      	pop	{r3, r4, r5, pc}
   d4da0:	f000 fcd2 	bl	d5748 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4da4:	6823      	ldr	r3, [r4, #0]
   d4da6:	1ac0      	subs	r0, r0, r3
   d4da8:	88a3      	ldrh	r3, [r4, #4]
   d4daa:	4298      	cmp	r0, r3
   d4dac:	d3f4      	bcc.n	d4d98 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4dae:	79a3      	ldrb	r3, [r4, #6]
   d4db0:	f003 0301 	and.w	r3, r3, #1
   d4db4:	42ab      	cmp	r3, r5
   d4db6:	d0ef      	beq.n	d4d98 <_ZN8Debounce6updateEv+0x2e>
   d4db8:	f000 fcc6 	bl	d5748 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4dbc:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4dbe:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4dc0:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4dc4:	f043 0308 	orr.w	r3, r3, #8
   d4dc8:	e7e5      	b.n	d4d96 <_ZN8Debounce6updateEv+0x2c>
	...

000d4dcc <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4dcc:	b510      	push	{r4, lr}
   d4dce:	4b04      	ldr	r3, [pc, #16]	; (d4de0 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4dd0:	6003      	str	r3, [r0, #0]
   d4dd2:	4604      	mov	r4, r0
  if(buffer) {
   d4dd4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4dd6:	b108      	cbz	r0, d4ddc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4dd8:	f000 ff5e 	bl	d5c98 <free>
    buffer = NULL;
  }
}
   d4ddc:	4620      	mov	r0, r4
   d4dde:	bd10      	pop	{r4, pc}
   d4de0:	000d8c14 	.word	0x000d8c14

000d4de4 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4de4:	b510      	push	{r4, lr}
   d4de6:	4604      	mov	r4, r0
}
   d4de8:	f7ff fff0 	bl	d4dcc <_ZN16Adafruit_SSD1306D1Ev>
   d4dec:	4620      	mov	r0, r4
   d4dee:	2150      	movs	r1, #80	; 0x50
   d4df0:	f002 ff99 	bl	d7d26 <_ZdlPvj>
   d4df4:	4620      	mov	r0, r4
   d4df6:	bd10      	pop	{r4, pc}

000d4df8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4df8:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4dfa:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4dfc:	db4b      	blt.n	d4e96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4dfe:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4e02:	428c      	cmp	r4, r1
   d4e04:	dd47      	ble.n	d4e96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4e06:	2a00      	cmp	r2, #0
   d4e08:	db45      	blt.n	d4e96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4e0a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4e0e:	4294      	cmp	r4, r2
   d4e10:	dd41      	ble.n	d4e96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4e12:	7e84      	ldrb	r4, [r0, #26]
   d4e14:	2c02      	cmp	r4, #2
   d4e16:	d01f      	beq.n	d4e58 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4e18:	2c03      	cmp	r4, #3
   d4e1a:	d026      	beq.n	d4e6a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4e1c:	2c01      	cmp	r4, #1
   d4e1e:	d104      	bne.n	d4e2a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4e20:	8904      	ldrh	r4, [r0, #8]
   d4e22:	43d2      	mvns	r2, r2
   d4e24:	4414      	add	r4, r2
      break;
   d4e26:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4e28:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4e2a:	2b01      	cmp	r3, #1
   d4e2c:	d023      	beq.n	d4e76 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4e2e:	2b02      	cmp	r3, #2
   d4e30:	d032      	beq.n	d4e98 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4e32:	bb83      	cbnz	r3, d4e96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4e34:	2a00      	cmp	r2, #0
   d4e36:	4613      	mov	r3, r2
   d4e38:	8904      	ldrh	r4, [r0, #8]
   d4e3a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4e3c:	bfb8      	it	lt
   d4e3e:	1dd3      	addlt	r3, r2, #7
   d4e40:	10db      	asrs	r3, r3, #3
   d4e42:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e46:	f002 0207 	and.w	r2, r2, #7
   d4e4a:	2301      	movs	r3, #1
   d4e4c:	4093      	lsls	r3, r2
   d4e4e:	5c42      	ldrb	r2, [r0, r1]
   d4e50:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4e54:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4e56:	e01e      	b.n	d4e96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4e58:	8904      	ldrh	r4, [r0, #8]
   d4e5a:	43c9      	mvns	r1, r1
   d4e5c:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4e5e:	8944      	ldrh	r4, [r0, #10]
   d4e60:	43d2      	mvns	r2, r2
   d4e62:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4e64:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4e66:	b212      	sxth	r2, r2
      break;
   d4e68:	e7df      	b.n	d4e2a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4e6a:	8944      	ldrh	r4, [r0, #10]
   d4e6c:	43c9      	mvns	r1, r1
   d4e6e:	440c      	add	r4, r1
      break;
   d4e70:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4e72:	b222      	sxth	r2, r4
      break;
   d4e74:	e7d9      	b.n	d4e2a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4e76:	2a00      	cmp	r2, #0
   d4e78:	8904      	ldrh	r4, [r0, #8]
   d4e7a:	4613      	mov	r3, r2
   d4e7c:	bfb8      	it	lt
   d4e7e:	1dd3      	addlt	r3, r2, #7
   d4e80:	10db      	asrs	r3, r3, #3
   d4e82:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4e86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4e88:	f002 0007 	and.w	r0, r2, #7
   d4e8c:	2201      	movs	r2, #1
   d4e8e:	4082      	lsls	r2, r0
   d4e90:	5c58      	ldrb	r0, [r3, r1]
   d4e92:	4302      	orrs	r2, r0
   d4e94:	545a      	strb	r2, [r3, r1]
}
   d4e96:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4e98:	2a00      	cmp	r2, #0
   d4e9a:	4613      	mov	r3, r2
   d4e9c:	8904      	ldrh	r4, [r0, #8]
   d4e9e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4ea0:	bfb8      	it	lt
   d4ea2:	1dd3      	addlt	r3, r2, #7
   d4ea4:	10db      	asrs	r3, r3, #3
   d4ea6:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4eaa:	f002 0207 	and.w	r2, r2, #7
   d4eae:	2301      	movs	r3, #1
   d4eb0:	fa03 f202 	lsl.w	r2, r3, r2
   d4eb4:	5c43      	ldrb	r3, [r0, r1]
   d4eb6:	405a      	eors	r2, r3
   d4eb8:	e7cc      	b.n	d4e54 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4eba <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4eba:	b510      	push	{r4, lr}
   d4ebc:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4ebe:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4ec2:	2101      	movs	r1, #1
   d4ec4:	b280      	uxth	r0, r0
   d4ec6:	f002 febc 	bl	d7c42 <digitalWrite>
   d4eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4ecc:	b118      	cbz	r0, d4ed6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4ed2:	f000 bf68 	b.w	d5da6 <_ZN8SPIClass14endTransactionEv>
}
   d4ed6:	bd10      	pop	{r4, pc}

000d4ed8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4ed8:	b570      	push	{r4, r5, r6, lr}
   d4eda:	4604      	mov	r4, r0
   d4edc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4ede:	2600      	movs	r6, #0
   d4ee0:	f7ff fc38 	bl	d4754 <_ZN12Adafruit_GFXC1Ess>
   d4ee4:	4b11      	ldr	r3, [pc, #68]	; (d4f2c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4ee6:	6023      	str	r3, [r4, #0]
   d4ee8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4eea:	b915      	cbnz	r5, d4ef2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4eec:	f002 feee 	bl	d7ccc <_Z19__fetch_global_Wirev>
   d4ef0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4ef2:	23ff      	movs	r3, #255	; 0xff
   d4ef4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4ef8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4efc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4f00:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4f04:	4b0a      	ldr	r3, [pc, #40]	; (d4f30 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4f06:	63a3      	str	r3, [r4, #56]	; 0x38
   d4f08:	2301      	movs	r3, #1
   d4f0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4f0e:	9b05      	ldr	r3, [sp, #20]
   d4f10:	64a3      	str	r3, [r4, #72]	; 0x48
   d4f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4f16:	9b06      	ldr	r3, [sp, #24]
   d4f18:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4f1a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4f1e:	6426      	str	r6, [r4, #64]	; 0x40
   d4f20:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4f24:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4f26:	4620      	mov	r0, r4
   d4f28:	bd70      	pop	{r4, r5, r6, pc}
   d4f2a:	bf00      	nop
   d4f2c:	000d8c14 	.word	0x000d8c14
   d4f30:	000d8760 	.word	0x000d8760

000d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f36:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4f38:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4f3a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4f3c:	b190      	cbz	r0, d4f64 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4f3e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4f42:	f002 fd37 	bl	d79b4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4f46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f48:	6803      	ldr	r3, [r0, #0]
   d4f4a:	2100      	movs	r1, #0
   d4f4c:	689b      	ldr	r3, [r3, #8]
   d4f4e:	4798      	blx	r3
    WIRE_WRITE(c);
   d4f50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4f52:	6803      	ldr	r3, [r0, #0]
   d4f54:	4629      	mov	r1, r5
   d4f56:	689b      	ldr	r3, [r3, #8]
   d4f58:	4798      	blx	r3
    wire->endTransmission();
   d4f5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4f60:	f002 bd2f 	b.w	d79c2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4f64:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4f68:	4601      	mov	r1, r0
   d4f6a:	b298      	uxth	r0, r3
   d4f6c:	f002 fe69 	bl	d7c42 <digitalWrite>
  if(spi) {
   d4f70:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f72:	b120      	cbz	r0, d4f7e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4f74:	4629      	mov	r1, r5
}
   d4f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4f7a:	f000 bf9b 	b.w	d5eb4 <_ZN8SPIClass8transferEh>
   d4f7e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f80:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4f82:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4f86:	ea05 0107 	and.w	r1, r5, r7
   d4f8a:	b280      	uxth	r0, r0
   d4f8c:	f002 fe59 	bl	d7c42 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4f90:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f94:	2101      	movs	r1, #1
   d4f96:	b280      	uxth	r0, r0
   d4f98:	f002 fe53 	bl	d7c42 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4f9c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4fa0:	2100      	movs	r1, #0
   d4fa2:	b280      	uxth	r0, r0
   d4fa4:	f002 fe4d 	bl	d7c42 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4fa8:	3e01      	subs	r6, #1
   d4faa:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4fae:	d1e8      	bne.n	d4f82 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fb2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4fb2:	b538      	push	{r3, r4, r5, lr}
   d4fb4:	4604      	mov	r4, r0
  TRANSACTION_START
   d4fb6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4fb8:	460d      	mov	r5, r1
  TRANSACTION_START
   d4fba:	b180      	cbz	r0, d4fde <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4fbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4fbe:	f002 fceb 	bl	d7998 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4fc2:	2d00      	cmp	r5, #0
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	bf14      	ite	ne
   d4fc8:	21a7      	movne	r1, #167	; 0xa7
   d4fca:	21a6      	moveq	r1, #166	; 0xa6
   d4fcc:	f7ff ffb2 	bl	d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4fd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4fd2:	b188      	cbz	r0, d4ff8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4fd4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fda:	f002 bcdd 	b.w	d7998 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4fe0:	b118      	cbz	r0, d4fea <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4fe2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4fe6:	f000 fef7 	bl	d5dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4fea:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4fee:	2100      	movs	r1, #0
   d4ff0:	b280      	uxth	r0, r0
   d4ff2:	f002 fe26 	bl	d7c42 <digitalWrite>
   d4ff6:	e7e4      	b.n	d4fc2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4ff8:	4620      	mov	r0, r4
}
   d4ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ffe:	f7ff bf5c 	b.w	d4eba <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d5002:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5006:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5008:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d500a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d500c:	188f      	adds	r7, r1, r2
   d500e:	b340      	cbz	r0, d5062 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d5010:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5014:	f002 fcce 	bl	d79b4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5018:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d501a:	6803      	ldr	r3, [r0, #0]
   d501c:	2100      	movs	r1, #0
   d501e:	689b      	ldr	r3, [r3, #8]
   d5020:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5022:	2601      	movs	r6, #1
    while(n--) {
   d5024:	42bd      	cmp	r5, r7
   d5026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5028:	d017      	beq.n	d505a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d502a:	2e1f      	cmp	r6, #31
   d502c:	d90c      	bls.n	d5048 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d502e:	f002 fcc8 	bl	d79c2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5032:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5036:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5038:	f002 fcbc 	bl	d79b4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d503c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d503e:	6803      	ldr	r3, [r0, #0]
   d5040:	2100      	movs	r1, #0
   d5042:	689b      	ldr	r3, [r3, #8]
   d5044:	4798      	blx	r3
        bytesOut = 1;
   d5046:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5048:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d504a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d504e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5050:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5052:	689b      	ldr	r3, [r3, #8]
   d5054:	4798      	blx	r3
      bytesOut++;
   d5056:	b2f6      	uxtb	r6, r6
    while(n--) {
   d5058:	e7e4      	b.n	d5024 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d505a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d505e:	f002 bcb0 	b.w	d79c2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5062:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5066:	4601      	mov	r1, r0
   d5068:	b298      	uxth	r0, r3
   d506a:	f002 fdea 	bl	d7c42 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d506e:	42af      	cmp	r7, r5
   d5070:	d022      	beq.n	d50b8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5072:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5074:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5078:	b118      	cbz	r0, d5082 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d507a:	4649      	mov	r1, r9
   d507c:	f000 ff1a 	bl	d5eb4 <_ZN8SPIClass8transferEh>
   d5080:	e7f5      	b.n	d506e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5082:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5084:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5088:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d508c:	ea09 0108 	and.w	r1, r9, r8
   d5090:	b280      	uxth	r0, r0
   d5092:	f002 fdd6 	bl	d7c42 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5096:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d509a:	2101      	movs	r1, #1
   d509c:	b280      	uxth	r0, r0
   d509e:	f002 fdd0 	bl	d7c42 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d50a2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d50a6:	2100      	movs	r1, #0
   d50a8:	b280      	uxth	r0, r0
   d50aa:	f002 fdca 	bl	d7c42 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d50ae:	3e01      	subs	r6, #1
   d50b0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d50b4:	d1e8      	bne.n	d5088 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d50b6:	e7da      	b.n	d506e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d50b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d50bc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d50bc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d50c0:	1dda      	adds	r2, r3, #7
   d50c2:	bf48      	it	mi
   d50c4:	f103 020e 	addmi.w	r2, r3, #14
   d50c8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d50cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d50ce:	10d2      	asrs	r2, r2, #3
   d50d0:	435a      	muls	r2, r3
   d50d2:	2100      	movs	r1, #0
   d50d4:	f002 bf84 	b.w	d7fe0 <memset>

000d50d8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d50d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d50dc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d50de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d50e0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d50e4:	4604      	mov	r4, r0
   d50e6:	460f      	mov	r7, r1
   d50e8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d50ea:	b1b3      	cbz	r3, d511a <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d50ec:	4620      	mov	r0, r4
   d50ee:	f7ff ffe5 	bl	d50bc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d50f2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d50f6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d50fa:	2820      	cmp	r0, #32
   d50fc:	dc1f      	bgt.n	d513e <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d50fe:	2320      	movs	r3, #32
   d5100:	2201      	movs	r2, #1
   d5102:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d5106:	3820      	subs	r0, #32
   d5108:	2373      	movs	r3, #115	; 0x73
   d510a:	3973      	subs	r1, #115	; 0x73
   d510c:	9300      	str	r3, [sp, #0]
   d510e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5112:	4b89      	ldr	r3, [pc, #548]	; (d5338 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5114:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d5118:	e01f      	b.n	d515a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d511a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d511e:	1dd8      	adds	r0, r3, #7
   d5120:	bf48      	it	mi
   d5122:	f103 000e 	addmi.w	r0, r3, #14
   d5126:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d512a:	10c0      	asrs	r0, r0, #3
   d512c:	4358      	muls	r0, r3
   d512e:	f000 fdab 	bl	d5c88 <malloc>
   d5132:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5134:	2800      	cmp	r0, #0
   d5136:	d1d9      	bne.n	d50ec <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5138:	b004      	add	sp, #16
   d513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d513e:	2340      	movs	r3, #64	; 0x40
   d5140:	f04f 0c01 	mov.w	ip, #1
   d5144:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5148:	2352      	movs	r3, #82	; 0x52
   d514a:	3840      	subs	r0, #64	; 0x40
   d514c:	3952      	subs	r1, #82	; 0x52
   d514e:	9300      	str	r3, [sp, #0]
   d5150:	4b7a      	ldr	r3, [pc, #488]	; (d533c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5152:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5156:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d515a:	f340 024f 	sbfx	r2, r0, #1, #16
   d515e:	f341 014f 	sbfx	r1, r1, #1, #16
   d5162:	4620      	mov	r0, r4
   d5164:	f7ff fb0c 	bl	d4780 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5168:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d516a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d516e:	2800      	cmp	r0, #0
   d5170:	d078      	beq.n	d5264 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5172:	2d00      	cmp	r5, #0
   d5174:	d174      	bne.n	d5260 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d5176:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d517a:	2b20      	cmp	r3, #32
   d517c:	bf0c      	ite	eq
   d517e:	253c      	moveq	r5, #60	; 0x3c
   d5180:	253d      	movne	r5, #61	; 0x3d
   d5182:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5186:	f1b8 0f00 	cmp.w	r8, #0
   d518a:	d001      	beq.n	d5190 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d518c:	f002 fc08 	bl	d79a0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5190:	b1fe      	cbz	r6, d51d2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5192:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5196:	2800      	cmp	r0, #0
   d5198:	db1b      	blt.n	d51d2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d519a:	2101      	movs	r1, #1
   d519c:	b280      	uxth	r0, r0
   d519e:	f002 fd3f 	bl	d7c20 <pinMode>
    digitalWrite(rstPin, HIGH);
   d51a2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d51a6:	2101      	movs	r1, #1
   d51a8:	b280      	uxth	r0, r0
   d51aa:	f002 fd4a 	bl	d7c42 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d51ae:	2001      	movs	r0, #1
   d51b0:	f002 f962 	bl	d7478 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d51b4:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d51b8:	2100      	movs	r1, #0
   d51ba:	b280      	uxth	r0, r0
   d51bc:	f002 fd41 	bl	d7c42 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d51c0:	200a      	movs	r0, #10
   d51c2:	f002 f959 	bl	d7478 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d51c6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d51ca:	2101      	movs	r1, #1
   d51cc:	b280      	uxth	r0, r0
   d51ce:	f002 fd38 	bl	d7c42 <digitalWrite>
  TRANSACTION_START
   d51d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51d4:	2800      	cmp	r0, #0
   d51d6:	d074      	beq.n	d52c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d51d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d51da:	f002 fbdd 	bl	d7998 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d51de:	2204      	movs	r2, #4
   d51e0:	4957      	ldr	r1, [pc, #348]	; (d5340 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d51e2:	4620      	mov	r0, r4
   d51e4:	f7ff ff0d 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d51e8:	7aa1      	ldrb	r1, [r4, #10]
   d51ea:	3901      	subs	r1, #1
   d51ec:	b2c9      	uxtb	r1, r1
   d51ee:	4620      	mov	r0, r4
   d51f0:	f7ff fea0 	bl	d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d51f4:	4953      	ldr	r1, [pc, #332]	; (d5344 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d51f6:	2204      	movs	r2, #4
   d51f8:	4620      	mov	r0, r4
   d51fa:	f7ff ff02 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d51fe:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5202:	2b01      	cmp	r3, #1
   d5204:	bf0c      	ite	eq
   d5206:	2110      	moveq	r1, #16
   d5208:	2114      	movne	r1, #20
   d520a:	4620      	mov	r0, r4
   d520c:	f7ff fe92 	bl	d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5210:	2204      	movs	r2, #4
   d5212:	494d      	ldr	r1, [pc, #308]	; (d5348 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5214:	4620      	mov	r0, r4
   d5216:	f7ff fef4 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d521a:	68a3      	ldr	r3, [r4, #8]
   d521c:	4a4b      	ldr	r2, [pc, #300]	; (d534c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d521e:	4293      	cmp	r3, r2
   d5220:	d15c      	bne.n	d52dc <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5222:	494b      	ldr	r1, [pc, #300]	; (d5350 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5224:	2204      	movs	r2, #4
   d5226:	4620      	mov	r0, r4
   d5228:	f7ff feeb 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d522c:	21d9      	movs	r1, #217	; 0xd9
   d522e:	4620      	mov	r0, r4
   d5230:	f7ff fe80 	bl	d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5234:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5238:	2b01      	cmp	r3, #1
   d523a:	bf0c      	ite	eq
   d523c:	2122      	moveq	r1, #34	; 0x22
   d523e:	21f1      	movne	r1, #241	; 0xf1
   d5240:	4620      	mov	r0, r4
   d5242:	f7ff fe77 	bl	d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d5246:	4620      	mov	r0, r4
   d5248:	4942      	ldr	r1, [pc, #264]	; (d5354 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d524a:	2206      	movs	r2, #6
   d524c:	f7ff fed9 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5250:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5252:	2800      	cmp	r0, #0
   d5254:	d063      	beq.n	d531e <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d5256:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5258:	f002 fb9e 	bl	d7998 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d525c:	2001      	movs	r0, #1
   d525e:	e76b      	b.n	d5138 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5260:	b26d      	sxtb	r5, r5
   d5262:	e78e      	b.n	d5182 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5264:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5268:	2101      	movs	r1, #1
   d526a:	b280      	uxth	r0, r0
   d526c:	f002 fcd8 	bl	d7c20 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5270:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5274:	2101      	movs	r1, #1
   d5276:	b280      	uxth	r0, r0
   d5278:	f002 fcd2 	bl	d7c20 <pinMode>
    SSD1306_DESELECT
   d527c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5280:	2101      	movs	r1, #1
   d5282:	b280      	uxth	r0, r0
   d5284:	f002 fcdd 	bl	d7c42 <digitalWrite>
    if(spi) { // Hardware SPI
   d5288:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d528a:	b13d      	cbz	r5, d529c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d528c:	f1b8 0f00 	cmp.w	r8, #0
   d5290:	f43f af7e 	beq.w	d5190 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5294:	4628      	mov	r0, r5
   d5296:	f000 fd75 	bl	d5d84 <_ZN8SPIClass5beginEv>
   d529a:	e779      	b.n	d5190 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d529c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d52a0:	2101      	movs	r1, #1
   d52a2:	b280      	uxth	r0, r0
   d52a4:	f002 fcbc 	bl	d7c20 <pinMode>
      pinMode(clkPin , OUTPUT);
   d52a8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d52ac:	2101      	movs	r1, #1
   d52ae:	b280      	uxth	r0, r0
   d52b0:	f002 fcb6 	bl	d7c20 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d52b4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d52b8:	4629      	mov	r1, r5
   d52ba:	b280      	uxth	r0, r0
   d52bc:	f002 fcc1 	bl	d7c42 <digitalWrite>
   d52c0:	e766      	b.n	d5190 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d52c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d52c4:	b118      	cbz	r0, d52ce <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d52c6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d52ca:	f000 fd85 	bl	d5dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d52ce:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d52d2:	2100      	movs	r1, #0
   d52d4:	b280      	uxth	r0, r0
   d52d6:	f002 fcb4 	bl	d7c42 <digitalWrite>
   d52da:	e780      	b.n	d51de <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d52dc:	4a1e      	ldr	r2, [pc, #120]	; (d5358 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d52de:	4293      	cmp	r3, r2
   d52e0:	d10e      	bne.n	d5300 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d52e2:	491e      	ldr	r1, [pc, #120]	; (d535c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d52e4:	2203      	movs	r2, #3
   d52e6:	4620      	mov	r0, r4
   d52e8:	f7ff fe8b 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d52ec:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d52f0:	2b01      	cmp	r3, #1
   d52f2:	bf0c      	ite	eq
   d52f4:	219f      	moveq	r1, #159	; 0x9f
   d52f6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d52f8:	4620      	mov	r0, r4
   d52fa:	f7ff fe1b 	bl	d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d52fe:	e795      	b.n	d522c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5300:	4a17      	ldr	r2, [pc, #92]	; (d5360 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5302:	4293      	cmp	r3, r2
   d5304:	d192      	bne.n	d522c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5306:	4917      	ldr	r1, [pc, #92]	; (d5364 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5308:	2203      	movs	r2, #3
   d530a:	4620      	mov	r0, r4
   d530c:	f7ff fe79 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5310:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5314:	2b01      	cmp	r3, #1
   d5316:	bf0c      	ite	eq
   d5318:	2110      	moveq	r1, #16
   d531a:	21af      	movne	r1, #175	; 0xaf
   d531c:	e7ec      	b.n	d52f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d531e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5322:	2101      	movs	r1, #1
   d5324:	b280      	uxth	r0, r0
   d5326:	f002 fc8c 	bl	d7c42 <digitalWrite>
   d532a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d532c:	2800      	cmp	r0, #0
   d532e:	d095      	beq.n	d525c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5330:	f000 fd39 	bl	d5da6 <_ZN8SPIClass14endTransactionEv>
   d5334:	e792      	b.n	d525c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5336:	bf00      	nop
   d5338:	000d8a2c 	.word	0x000d8a2c
   d533c:	000d876c 	.word	0x000d876c
   d5340:	000d8c74 	.word	0x000d8c74
   d5344:	000d8c78 	.word	0x000d8c78
   d5348:	000d8c7c 	.word	0x000d8c7c
   d534c:	00200080 	.word	0x00200080
   d5350:	000d8c86 	.word	0x000d8c86
   d5354:	000d8c80 	.word	0x000d8c80
   d5358:	00400080 	.word	0x00400080
   d535c:	000d8c8a 	.word	0x000d8c8a
   d5360:	00100060 	.word	0x00100060
   d5364:	000d8c8d 	.word	0x000d8c8d

000d5368 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5368:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d536a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d536c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5370:	db3d      	blt.n	d53ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5372:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5376:	4294      	cmp	r4, r2
   d5378:	dd39      	ble.n	d53ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d537a:	2900      	cmp	r1, #0
      w += x;
   d537c:	bfbe      	ittt	lt
   d537e:	185b      	addlt	r3, r3, r1
   d5380:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5382:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5384:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5388:	18ce      	adds	r6, r1, r3
   d538a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d538c:	bfc4      	itt	gt
   d538e:	1a63      	subgt	r3, r4, r1
   d5390:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5392:	2b00      	cmp	r3, #0
   d5394:	dd2b      	ble.n	d53ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5396:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5398:	10d6      	asrs	r6, r2, #3
   d539a:	fb14 1106 	smlabb	r1, r4, r6, r1
   d539e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d53a0:	f002 0007 	and.w	r0, r2, #7
   d53a4:	2201      	movs	r2, #1
   d53a6:	4082      	lsls	r2, r0
      switch(color) {
   d53a8:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d53aa:	b2d2      	uxtb	r2, r2
      switch(color) {
   d53ac:	d016      	beq.n	d53dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d53ae:	2d02      	cmp	r5, #2
   d53b0:	d00b      	beq.n	d53ca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d53b2:	b9e5      	cbnz	r5, d53ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d53b4:	43d2      	mvns	r2, r2
   d53b6:	b2d2      	uxtb	r2, r2
   d53b8:	440b      	add	r3, r1
   d53ba:	4299      	cmp	r1, r3
   d53bc:	d017      	beq.n	d53ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d53be:	f811 0b01 	ldrb.w	r0, [r1], #1
   d53c2:	4010      	ands	r0, r2
   d53c4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d53c8:	e7f7      	b.n	d53ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d53ca:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d53cc:	4299      	cmp	r1, r3
   d53ce:	d00e      	beq.n	d53ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d53d0:	f811 0b01 	ldrb.w	r0, [r1], #1
   d53d4:	4050      	eors	r0, r2
   d53d6:	f801 0c01 	strb.w	r0, [r1, #-1]
   d53da:	e7f7      	b.n	d53cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d53dc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d53de:	4299      	cmp	r1, r3
   d53e0:	d005      	beq.n	d53ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d53e2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d53e6:	4310      	orrs	r0, r2
   d53e8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d53ec:	e7f7      	b.n	d53de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d53ee:	bd70      	pop	{r4, r5, r6, pc}

000d53f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d53f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d53f2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d53f4:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d53f8:	db76      	blt.n	d54e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d53fa:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d53fe:	42a9      	cmp	r1, r5
   d5400:	da72      	bge.n	d54e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5402:	2a00      	cmp	r2, #0
      __h += __y;
   d5404:	bfbc      	itt	lt
   d5406:	18d2      	addlt	r2, r2, r3
   d5408:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d540a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d540e:	bfb8      	it	lt
   d5410:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5412:	18d7      	adds	r7, r2, r3
   d5414:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5416:	bfc4      	itt	gt
   d5418:	1aa3      	subgt	r3, r4, r2
   d541a:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d541c:	2b00      	cmp	r3, #0
   d541e:	dd63      	ble.n	d54e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5420:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5424:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5426:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d542a:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d542e:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5430:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5434:	d023      	beq.n	d547e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5436:	f1c2 0208 	rsb	r2, r2, #8
   d543a:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d543c:	4d2c      	ldr	r5, [pc, #176]	; (d54f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d543e:	4293      	cmp	r3, r2
   d5440:	bf3c      	itt	cc
   d5442:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5446:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d544a:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d544c:	bf3c      	itt	cc
   d544e:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5452:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5456:	2e01      	cmp	r6, #1
   d5458:	d007      	beq.n	d546a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d545a:	2e02      	cmp	r6, #2
   d545c:	d02e      	beq.n	d54bc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d545e:	b94e      	cbnz	r6, d5474 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5460:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5464:	ea2c 0505 	bic.w	r5, ip, r5
   d5468:	e003      	b.n	d5472 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d546a:	f817 c001 	ldrb.w	ip, [r7, r1]
   d546e:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5472:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5474:	4293      	cmp	r3, r2
   d5476:	d337      	bcc.n	d54e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5478:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d547c:	440c      	add	r4, r1
        h -= mod;
   d547e:	1a9a      	subs	r2, r3, r2
   d5480:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5482:	2a07      	cmp	r2, #7
   d5484:	d90e      	bls.n	d54a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5486:	2e02      	cmp	r6, #2
   d5488:	d11d      	bne.n	d54c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d548a:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d548c:	7821      	ldrb	r1, [r4, #0]
   d548e:	43c9      	mvns	r1, r1
   d5490:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5492:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5494:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5498:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d549a:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d549c:	440c      	add	r4, r1
            } while(h >= 8);
   d549e:	d8f5      	bhi.n	d548c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d54a0:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d54a4:	b302      	cbz	r2, d54e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d54a6:	4b13      	ldr	r3, [pc, #76]	; (d54f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d54a8:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d54aa:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d54ac:	d019      	beq.n	d54e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d54ae:	2e02      	cmp	r6, #2
   d54b0:	d01b      	beq.n	d54ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d54b2:	b9ce      	cbnz	r6, d54e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d54b4:	7822      	ldrb	r2, [r4, #0]
   d54b6:	ea22 0303 	bic.w	r3, r2, r3
   d54ba:	e014      	b.n	d54e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d54bc:	f817 c001 	ldrb.w	ip, [r7, r1]
   d54c0:	ea85 050c 	eor.w	r5, r5, ip
   d54c4:	e7d5      	b.n	d5472 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d54c6:	2e00      	cmp	r6, #0
   d54c8:	bf14      	ite	ne
   d54ca:	25ff      	movne	r5, #255	; 0xff
   d54cc:	2500      	moveq	r5, #0
   d54ce:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d54d0:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d54d2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d54d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d54d8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d54da:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d54dc:	440c      	add	r4, r1
            } while(h >= 8);
   d54de:	d8f7      	bhi.n	d54d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d54e0:	e7de      	b.n	d54a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d54e2:	7822      	ldrb	r2, [r4, #0]
   d54e4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d54e6:	7023      	strb	r3, [r4, #0]
}
   d54e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d54ea:	7822      	ldrb	r2, [r4, #0]
   d54ec:	4053      	eors	r3, r2
   d54ee:	e7fa      	b.n	d54e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d54f0:	000d8c64 	.word	0x000d8c64
   d54f4:	000d8c6c 	.word	0x000d8c6c

000d54f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d54f8:	b470      	push	{r4, r5, r6}
   d54fa:	4614      	mov	r4, r2
  switch(rotation) {
   d54fc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d54fe:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5502:	2a02      	cmp	r2, #2
   d5504:	d00d      	beq.n	d5522 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5506:	2a03      	cmp	r2, #3
   d5508:	d018      	beq.n	d553c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d550a:	2a01      	cmp	r2, #1
   d550c:	d111      	bne.n	d5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d550e:	8902      	ldrh	r2, [r0, #8]
   d5510:	43e4      	mvns	r4, r4
   d5512:	4414      	add	r4, r2
   d5514:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5516:	9603      	str	r6, [sp, #12]
   d5518:	460a      	mov	r2, r1
   d551a:	4621      	mov	r1, r4
}
   d551c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d551e:	f7ff bf67 	b.w	d53f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5522:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5524:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5526:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5528:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d552a:	4414      	add	r4, r2
    x -= (w-1);
   d552c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d552e:	b224      	sxth	r4, r4
    x -= (w-1);
   d5530:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5532:	9603      	str	r6, [sp, #12]
   d5534:	4622      	mov	r2, r4
}
   d5536:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5538:	f7ff bf16 	b.w	d5368 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d553c:	8945      	ldrh	r5, [r0, #10]
   d553e:	4419      	add	r1, r3
   d5540:	1a69      	subs	r1, r5, r1
   d5542:	b209      	sxth	r1, r1
    break;
   d5544:	e7e7      	b.n	d5516 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5546 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5546:	b430      	push	{r4, r5}
   d5548:	4614      	mov	r4, r2
  switch(rotation) {
   d554a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d554c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5550:	2a02      	cmp	r2, #2
   d5552:	d00d      	beq.n	d5570 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5554:	2a03      	cmp	r2, #3
   d5556:	d018      	beq.n	d558a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5558:	2a01      	cmp	r2, #1
   d555a:	d111      	bne.n	d5580 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d555c:	18e2      	adds	r2, r4, r3
   d555e:	8904      	ldrh	r4, [r0, #8]
   d5560:	1aa4      	subs	r4, r4, r2
   d5562:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5564:	9502      	str	r5, [sp, #8]
   d5566:	460a      	mov	r2, r1
   d5568:	4621      	mov	r1, r4
}
   d556a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d556c:	f7ff befc 	b.w	d5368 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5570:	8902      	ldrh	r2, [r0, #8]
   d5572:	43c9      	mvns	r1, r1
   d5574:	4411      	add	r1, r2
    y -= (h-1);
   d5576:	18e2      	adds	r2, r4, r3
   d5578:	8944      	ldrh	r4, [r0, #10]
   d557a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d557c:	b209      	sxth	r1, r1
    y -= (h-1);
   d557e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5580:	9502      	str	r5, [sp, #8]
   d5582:	4622      	mov	r2, r4
}
   d5584:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5586:	f7ff bf33 	b.w	d53f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d558a:	8942      	ldrh	r2, [r0, #10]
   d558c:	43c9      	mvns	r1, r1
   d558e:	4411      	add	r1, r2
   d5590:	b209      	sxth	r1, r1
    break;
   d5592:	e7e7      	b.n	d5564 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5594 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5598:	4604      	mov	r4, r0
  TRANSACTION_START
   d559a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d559c:	2800      	cmp	r0, #0
   d559e:	d042      	beq.n	d5626 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d55a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d55a2:	f002 f9f9 	bl	d7998 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d55a6:	4947      	ldr	r1, [pc, #284]	; (d56c4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d55a8:	2205      	movs	r2, #5
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff fd29 	bl	d5002 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d55b0:	7a21      	ldrb	r1, [r4, #8]
   d55b2:	3901      	subs	r1, #1
   d55b4:	4620      	mov	r0, r4
   d55b6:	b2c9      	uxtb	r1, r1
   d55b8:	f7ff fcbc 	bl	d4f34 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d55bc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d55c0:	1dde      	adds	r6, r3, #7
   d55c2:	bf48      	it	mi
   d55c4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d55c8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d55cc:	8923      	ldrh	r3, [r4, #8]
   d55ce:	10f6      	asrs	r6, r6, #3
   d55d0:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d55d4:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d55d8:	2800      	cmp	r0, #0
   d55da:	d03a      	beq.n	d5652 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d55dc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d55e0:	f002 f9e8 	bl	d79b4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d55e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55e6:	6803      	ldr	r3, [r0, #0]
   d55e8:	2140      	movs	r1, #64	; 0x40
   d55ea:	689b      	ldr	r3, [r3, #8]
   d55ec:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d55ee:	2701      	movs	r7, #1
    while(count--) {
   d55f0:	42b5      	cmp	r5, r6
   d55f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d55f4:	d024      	beq.n	d5640 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d55f6:	2f1f      	cmp	r7, #31
   d55f8:	d90c      	bls.n	d5614 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d55fa:	f002 f9e2 	bl	d79c2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d55fe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5602:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5604:	f002 f9d6 	bl	d79b4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5608:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d560a:	6803      	ldr	r3, [r0, #0]
   d560c:	2140      	movs	r1, #64	; 0x40
   d560e:	689b      	ldr	r3, [r3, #8]
   d5610:	4798      	blx	r3
        bytesOut = 1;
   d5612:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5614:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5616:	f815 1b01 	ldrb.w	r1, [r5], #1
   d561a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d561c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d561e:	689b      	ldr	r3, [r3, #8]
   d5620:	4798      	blx	r3
      bytesOut++;
   d5622:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5624:	e7e4      	b.n	d55f0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5626:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5628:	b118      	cbz	r0, d5632 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d562a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d562e:	f000 fbd3 	bl	d5dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5632:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5636:	2100      	movs	r1, #0
   d5638:	b280      	uxth	r0, r0
   d563a:	f002 fb02 	bl	d7c42 <digitalWrite>
   d563e:	e7b2      	b.n	d55a6 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5640:	f002 f9bf 	bl	d79c2 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5644:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5646:	b378      	cbz	r0, d56a8 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5648:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d564a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d564e:	f002 b9a3 	b.w	d7998 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5652:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5656:	2101      	movs	r1, #1
   d5658:	b280      	uxth	r0, r0
   d565a:	f002 faf2 	bl	d7c42 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d565e:	42b5      	cmp	r5, r6
   d5660:	d0f0      	beq.n	d5644 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5662:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5664:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5668:	b118      	cbz	r0, d5672 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d566a:	4649      	mov	r1, r9
   d566c:	f000 fc22 	bl	d5eb4 <_ZN8SPIClass8transferEh>
   d5670:	e7f5      	b.n	d565e <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5672:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5674:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5678:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d567c:	ea09 0108 	and.w	r1, r9, r8
   d5680:	b280      	uxth	r0, r0
   d5682:	f002 fade 	bl	d7c42 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5686:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d568a:	2101      	movs	r1, #1
   d568c:	b280      	uxth	r0, r0
   d568e:	f002 fad8 	bl	d7c42 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5692:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5696:	2100      	movs	r1, #0
   d5698:	b280      	uxth	r0, r0
   d569a:	f002 fad2 	bl	d7c42 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d569e:	3f01      	subs	r7, #1
   d56a0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d56a4:	d1e8      	bne.n	d5678 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d56a6:	e7da      	b.n	d565e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d56a8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d56ac:	2101      	movs	r1, #1
   d56ae:	b280      	uxth	r0, r0
   d56b0:	f002 fac7 	bl	d7c42 <digitalWrite>
   d56b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d56b6:	b118      	cbz	r0, d56c0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d56b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d56bc:	f000 bb73 	b.w	d5da6 <_ZN8SPIClass14endTransactionEv>
}
   d56c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d56c4:	000d8c90 	.word	0x000d8c90

000d56c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <netdb_freeaddrinfo+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	689b      	ldr	r3, [r3, #8]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030268 	.word	0x00030268

000d56d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <netdb_getaddrinfo+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	68db      	ldr	r3, [r3, #12]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030268 	.word	0x00030268

000d56e8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <HAL_Pin_Mode+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	689b      	ldr	r3, [r3, #8]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	0003022c 	.word	0x0003022c

000d56f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <HAL_Get_Pin_Mode+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	68db      	ldr	r3, [r3, #12]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	0003022c 	.word	0x0003022c

000d5708 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <HAL_GPIO_Write+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	691b      	ldr	r3, [r3, #16]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	0003022c 	.word	0x0003022c

000d5718 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <HAL_GPIO_Read+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	695b      	ldr	r3, [r3, #20]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	0003022c 	.word	0x0003022c

000d5728 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_RNG_GetRandomNumber+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	685b      	ldr	r3, [r3, #4]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030218 	.word	0x00030218

000d5738 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <HAL_Delay_Microseconds+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	68db      	ldr	r3, [r3, #12]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	00030218 	.word	0x00030218

000d5748 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	695b      	ldr	r3, [r3, #20]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030218 	.word	0x00030218

000d5758 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <hal_ble_stack_init+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	689b      	ldr	r3, [r3, #8]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030278 	.word	0x00030278

000d5768 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <hal_ble_gap_set_advertising_data+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030278 	.word	0x00030278

000d5778 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <hal_ble_gap_set_scan_response_data+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030278 	.word	0x00030278

000d5788 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <hal_ble_gap_start_advertising+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030278 	.word	0x00030278

000d5798 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b03      	ldr	r3, [pc, #12]	; (d57a8 <hal_ble_gap_disconnect+0x10>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d57a2:	9301      	str	r3, [sp, #4]
   d57a4:	bd08      	pop	{r3, pc}
   d57a6:	0000      	.short	0x0000
   d57a8:	00030278 	.word	0x00030278

000d57ac <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b03      	ldr	r3, [pc, #12]	; (d57bc <hal_ble_gatt_server_add_service+0x10>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d57b6:	9301      	str	r3, [sp, #4]
   d57b8:	bd08      	pop	{r3, pc}
   d57ba:	0000      	.short	0x0000
   d57bc:	00030278 	.word	0x00030278

000d57c0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b03      	ldr	r3, [pc, #12]	; (d57d0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d57ca:	9301      	str	r3, [sp, #4]
   d57cc:	bd08      	pop	{r3, pc}
   d57ce:	0000      	.short	0x0000
   d57d0:	00030278 	.word	0x00030278

000d57d4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b03      	ldr	r3, [pc, #12]	; (d57e4 <hal_ble_gatt_client_write_with_response+0x10>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d57de:	9301      	str	r3, [sp, #4]
   d57e0:	bd08      	pop	{r3, pc}
   d57e2:	0000      	.short	0x0000
   d57e4:	00030278 	.word	0x00030278

000d57e8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b03      	ldr	r3, [pc, #12]	; (d57f8 <hal_ble_gatt_client_write_without_response+0x10>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d57f2:	9301      	str	r3, [sp, #4]
   d57f4:	bd08      	pop	{r3, pc}
   d57f6:	0000      	.short	0x0000
   d57f8:	00030278 	.word	0x00030278

000d57fc <hal_ble_gap_get_connection_info>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b03      	ldr	r3, [pc, #12]	; (d580c <hal_ble_gap_get_connection_info+0x10>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d5806:	9301      	str	r3, [sp, #4]
   d5808:	bd08      	pop	{r3, pc}
   d580a:	0000      	.short	0x0000
   d580c:	00030278 	.word	0x00030278

000d5810 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b03      	ldr	r3, [pc, #12]	; (d5820 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d581a:	9301      	str	r3, [sp, #4]
   d581c:	bd08      	pop	{r3, pc}
   d581e:	0000      	.short	0x0000
   d5820:	00030278 	.word	0x00030278

000d5824 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b03      	ldr	r3, [pc, #12]	; (d5834 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d582e:	9301      	str	r3, [sp, #4]
   d5830:	bd08      	pop	{r3, pc}
   d5832:	0000      	.short	0x0000
   d5834:	00030278 	.word	0x00030278

000d5838 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b03      	ldr	r3, [pc, #12]	; (d5848 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5842:	9301      	str	r3, [sp, #4]
   d5844:	bd08      	pop	{r3, pc}
   d5846:	0000      	.short	0x0000
   d5848:	00030278 	.word	0x00030278

000d584c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b03      	ldr	r3, [pc, #12]	; (d585c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5856:	9301      	str	r3, [sp, #4]
   d5858:	bd08      	pop	{r3, pc}
   d585a:	0000      	.short	0x0000
   d585c:	00030278 	.word	0x00030278

000d5860 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <os_mutex_create+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030248 	.word	0x00030248

000d5870 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <os_mutex_destroy+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030248 	.word	0x00030248

000d5880 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <os_mutex_recursive_create+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	00030248 	.word	0x00030248

000d5890 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <os_mutex_recursive_destroy+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	00030248 	.word	0x00030248

000d58a0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <os_mutex_recursive_lock+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030248 	.word	0x00030248

000d58b0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <os_mutex_recursive_unlock+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030248 	.word	0x00030248

000d58c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <inet_inet_ntop+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	695b      	ldr	r3, [r3, #20]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030264 	.word	0x00030264

000d58d0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <hal_usart_init+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	681b      	ldr	r3, [r3, #0]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	0003023c 	.word	0x0003023c

000d58e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <hal_usart_write+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	68db      	ldr	r3, [r3, #12]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	0003023c 	.word	0x0003023c

000d58f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <hal_usart_available+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	691b      	ldr	r3, [r3, #16]
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	0003023c 	.word	0x0003023c

000d5900 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <hal_usart_read+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	695b      	ldr	r3, [r3, #20]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	0003023c 	.word	0x0003023c

000d5910 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <hal_usart_peek+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	699b      	ldr	r3, [r3, #24]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	0003023c 	.word	0x0003023c

000d5920 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <hal_usart_flush+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	69db      	ldr	r3, [r3, #28]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	0003023c 	.word	0x0003023c

000d5930 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <hal_usart_is_enabled+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	6a1b      	ldr	r3, [r3, #32]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	0003023c 	.word	0x0003023c

000d5940 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <hal_usart_available_data_for_write+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	0003023c 	.word	0x0003023c

000d5950 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <hal_i2c_set_speed+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	681b      	ldr	r3, [r3, #0]
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030228 	.word	0x00030228

000d5960 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <hal_i2c_begin+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	68db      	ldr	r3, [r3, #12]
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030228 	.word	0x00030228

000d5970 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <hal_i2c_begin_transmission+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	699b      	ldr	r3, [r3, #24]
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030228 	.word	0x00030228

000d5980 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <hal_i2c_end_transmission+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	69db      	ldr	r3, [r3, #28]
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030228 	.word	0x00030228

000d5990 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <hal_i2c_write+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	6a1b      	ldr	r3, [r3, #32]
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030228 	.word	0x00030228

000d59a0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <hal_i2c_available+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030228 	.word	0x00030228

000d59b0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <hal_i2c_read+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030228 	.word	0x00030228

000d59c0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <hal_i2c_peek+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030228 	.word	0x00030228

000d59d0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <hal_i2c_flush+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030228 	.word	0x00030228

000d59e0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <hal_i2c_is_enabled+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030228 	.word	0x00030228

000d59f0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <hal_i2c_init+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030228 	.word	0x00030228

000d5a00 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <hal_spi_begin+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	681b      	ldr	r3, [r3, #0]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030230 	.word	0x00030230

000d5a10 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <hal_spi_transfer+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	695b      	ldr	r3, [r3, #20]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030230 	.word	0x00030230

000d5a20 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <hal_spi_init+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	69db      	ldr	r3, [r3, #28]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030230 	.word	0x00030230

000d5a30 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <hal_spi_is_enabled+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	6a1b      	ldr	r3, [r3, #32]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030230 	.word	0x00030230

000d5a40 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <hal_spi_info+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030230 	.word	0x00030230

000d5a50 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <hal_spi_set_settings+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030230 	.word	0x00030230

000d5a60 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <hal_spi_acquire+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030230 	.word	0x00030230

000d5a70 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <hal_spi_release+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030230 	.word	0x00030230

000d5a80 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <HAL_USB_USART_Init+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	681b      	ldr	r3, [r3, #0]
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	0003024c 	.word	0x0003024c

000d5a90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <HAL_USB_USART_Available_Data+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	691b      	ldr	r3, [r3, #16]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	0003024c 	.word	0x0003024c

000d5aa0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	695b      	ldr	r3, [r3, #20]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	0003024c 	.word	0x0003024c

000d5ab0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <HAL_USB_USART_Receive_Data+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	699b      	ldr	r3, [r3, #24]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003024c 	.word	0x0003024c

000d5ac0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <HAL_USB_USART_Send_Data+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	69db      	ldr	r3, [r3, #28]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003024c 	.word	0x0003024c

000d5ad0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <HAL_USB_USART_Flush_Data+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	6a1b      	ldr	r3, [r3, #32]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003024c 	.word	0x0003024c

000d5ae0 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <LED_SetSignalingColor+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	685b      	ldr	r3, [r3, #4]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	00030260 	.word	0x00030260

000d5af0 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <LED_Signaling_Start+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	689b      	ldr	r3, [r3, #8]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030260 	.word	0x00030260

000d5b00 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <LED_Signaling_Stop+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	68db      	ldr	r3, [r3, #12]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030260 	.word	0x00030260

000d5b10 <LED_SetBrightness>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <LED_SetBrightness+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	691b      	ldr	r3, [r3, #16]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	00030260 	.word	0x00030260

000d5b20 <LED_RGB_IsOverRidden>:
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <LED_RGB_IsOverRidden+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	699b      	ldr	r3, [r3, #24]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030260 	.word	0x00030260

000d5b30 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <LED_On+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	69db      	ldr	r3, [r3, #28]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030260 	.word	0x00030260

000d5b40 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <panic_+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030260 	.word	0x00030260

000d5b50 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <log_message+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030260 	.word	0x00030260

000d5b60 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <set_system_mode+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	685b      	ldr	r3, [r3, #4]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030220 	.word	0x00030220

000d5b70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <system_delay_ms+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	695b      	ldr	r3, [r3, #20]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030220 	.word	0x00030220

000d5b80 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <system_thread_set_state+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030220 	.word	0x00030220

000d5b90 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b03      	ldr	r3, [pc, #12]	; (d5ba0 <system_ctrl_set_app_request_handler+0x10>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5b9a:	9301      	str	r3, [sp, #4]
   d5b9c:	bd08      	pop	{r3, pc}
   d5b9e:	0000      	.short	0x0000
   d5ba0:	00030220 	.word	0x00030220

000d5ba4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b03      	ldr	r3, [pc, #12]	; (d5bb4 <system_ctrl_set_result+0x10>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5bae:	9301      	str	r3, [sp, #4]
   d5bb0:	bd08      	pop	{r3, pc}
   d5bb2:	0000      	.short	0x0000
   d5bb4:	00030220 	.word	0x00030220

000d5bb8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <network_connect+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	685b      	ldr	r3, [r3, #4]
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	00030240 	.word	0x00030240

000d5bc8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <network_connecting+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	689b      	ldr	r3, [r3, #8]
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	00030240 	.word	0x00030240

000d5bd8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <network_disconnect+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	68db      	ldr	r3, [r3, #12]
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030240 	.word	0x00030240

000d5be8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <network_ready+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	691b      	ldr	r3, [r3, #16]
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030240 	.word	0x00030240

000d5bf8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <network_on+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	695b      	ldr	r3, [r3, #20]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030240 	.word	0x00030240

000d5c08 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <network_off+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	699b      	ldr	r3, [r3, #24]
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030240 	.word	0x00030240

000d5c18 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <network_listen+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	69db      	ldr	r3, [r3, #28]
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030240 	.word	0x00030240

000d5c28 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <network_listening+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	6a1b      	ldr	r3, [r3, #32]
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030240 	.word	0x00030240

000d5c38 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <network_set_listen_timeout+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030240 	.word	0x00030240

000d5c48 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <network_get_listen_timeout+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030240 	.word	0x00030240

000d5c58 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <network_is_on+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030240 	.word	0x00030240

000d5c68 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <network_is_off+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030240 	.word	0x00030240

000d5c78 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030244 	.word	0x00030244

000d5c88 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <malloc+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	681b      	ldr	r3, [r3, #0]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	0003021c 	.word	0x0003021c

000d5c98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <free+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	685b      	ldr	r3, [r3, #4]
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	0003021c 	.word	0x0003021c

000d5ca8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <realloc+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	689b      	ldr	r3, [r3, #8]
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	0003021c 	.word	0x0003021c

000d5cb8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <vsnprintf+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	0003021c 	.word	0x0003021c

000d5cc8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <abort+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	0003021c 	.word	0x0003021c

000d5cd8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <newlib_impure_ptr_callback+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	0003021c 	.word	0x0003021c

000d5ce8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ce8:	2200      	movs	r2, #0
   d5cea:	6840      	ldr	r0, [r0, #4]
   d5cec:	4611      	mov	r1, r2
   d5cee:	f7ff bf9b 	b.w	d5c28 <network_listening>

000d5cf2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5cf2:	2200      	movs	r2, #0
   d5cf4:	6840      	ldr	r0, [r0, #4]
   d5cf6:	4611      	mov	r1, r2
   d5cf8:	f7ff bfa6 	b.w	d5c48 <network_get_listen_timeout>

000d5cfc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5cfc:	6840      	ldr	r0, [r0, #4]
   d5cfe:	2200      	movs	r2, #0
   d5d00:	f7ff bf9a 	b.w	d5c38 <network_set_listen_timeout>

000d5d04 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d04:	6840      	ldr	r0, [r0, #4]
   d5d06:	2200      	movs	r2, #0
   d5d08:	f081 0101 	eor.w	r1, r1, #1
   d5d0c:	f7ff bf84 	b.w	d5c18 <network_listen>

000d5d10 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d10:	2300      	movs	r3, #0
   d5d12:	6840      	ldr	r0, [r0, #4]
   d5d14:	461a      	mov	r2, r3
   d5d16:	4619      	mov	r1, r3
   d5d18:	f7ff bf76 	b.w	d5c08 <network_off>

000d5d1c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d1c:	2300      	movs	r3, #0
   d5d1e:	6840      	ldr	r0, [r0, #4]
   d5d20:	461a      	mov	r2, r3
   d5d22:	4619      	mov	r1, r3
   d5d24:	f7ff bf68 	b.w	d5bf8 <network_on>

000d5d28 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d28:	2200      	movs	r2, #0
   d5d2a:	6840      	ldr	r0, [r0, #4]
   d5d2c:	4611      	mov	r1, r2
   d5d2e:	f7ff bf5b 	b.w	d5be8 <network_ready>

000d5d32 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d32:	2200      	movs	r2, #0
   d5d34:	6840      	ldr	r0, [r0, #4]
   d5d36:	4611      	mov	r1, r2
   d5d38:	f7ff bf46 	b.w	d5bc8 <network_connecting>

000d5d3c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d3c:	6840      	ldr	r0, [r0, #4]
   d5d3e:	2200      	movs	r2, #0
   d5d40:	2102      	movs	r1, #2
   d5d42:	f7ff bf49 	b.w	d5bd8 <network_disconnect>

000d5d46 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d46:	2300      	movs	r3, #0
   d5d48:	6840      	ldr	r0, [r0, #4]
   d5d4a:	461a      	mov	r2, r3
   d5d4c:	f7ff bf34 	b.w	d5bb8 <network_connect>

000d5d50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d50:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d52:	2203      	movs	r2, #3
   d5d54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d56:	4a02      	ldr	r2, [pc, #8]	; (d5d60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5d58:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5d5a:	4770      	bx	lr
   d5d5c:	2003e644 	.word	0x2003e644
   d5d60:	000d8ca0 	.word	0x000d8ca0

000d5d64 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5d64:	2100      	movs	r1, #0
   d5d66:	f7ff be7b 	b.w	d5a60 <hal_spi_acquire>

000d5d6a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5d6a:	2100      	movs	r1, #0
   d5d6c:	f7ff be80 	b.w	d5a70 <hal_spi_release>

000d5d70 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5d70:	b510      	push	{r4, lr}
   d5d72:	4604      	mov	r4, r0
   d5d74:	4608      	mov	r0, r1
{
    _spi = spi;
   d5d76:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5d78:	f7ff fe52 	bl	d5a20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5d7c:	2300      	movs	r3, #0
   d5d7e:	6063      	str	r3, [r4, #4]
}
   d5d80:	4620      	mov	r0, r4
   d5d82:	bd10      	pop	{r4, pc}

000d5d84 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5d84:	b510      	push	{r4, lr}
   d5d86:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5d88:	7800      	ldrb	r0, [r0, #0]
   d5d8a:	f7ff ffeb 	bl	d5d64 <_ZN8SPIClass4lockEv.isra.0>
   d5d8e:	b948      	cbnz	r0, d5da4 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5d90:	7820      	ldrb	r0, [r4, #0]
   d5d92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5d96:	f7ff fe33 	bl	d5a00 <hal_spi_begin>
        unlock();
   d5d9a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5da0:	f7ff bfe3 	b.w	d5d6a <_ZN8SPIClass6unlockEv.isra.0>
}
   d5da4:	bd10      	pop	{r4, pc}

000d5da6 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5da6:	7800      	ldrb	r0, [r0, #0]
   d5da8:	f7ff bfdf 	b.w	d5d6a <_ZN8SPIClass6unlockEv.isra.0>

000d5dac <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5dac:	0840      	lsrs	r0, r0, #1
{
   d5dae:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5db0:	6018      	str	r0, [r3, #0]
   d5db2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5db4:	6818      	ldr	r0, [r3, #0]
   d5db6:	4288      	cmp	r0, r1
   d5db8:	b2e5      	uxtb	r5, r4
   d5dba:	d906      	bls.n	d5dca <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5dbc:	3401      	adds	r4, #1
   d5dbe:	2c08      	cmp	r4, #8
   d5dc0:	d002      	beq.n	d5dc8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5dc2:	0840      	lsrs	r0, r0, #1
   d5dc4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5dc6:	e7f5      	b.n	d5db4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5dc8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5dcc:	5d5b      	ldrb	r3, [r3, r5]
   d5dce:	7013      	strb	r3, [r2, #0]
}
   d5dd0:	bd30      	pop	{r4, r5, pc}
   d5dd2:	bf00      	nop
   d5dd4:	000d8cd4 	.word	0x000d8cd4

000d5dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ddc:	4606      	mov	r6, r0
   d5dde:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5de0:	7800      	ldrb	r0, [r0, #0]
{
   d5de2:	460c      	mov	r4, r1
    CHECK(lock());
   d5de4:	f7ff ffbe 	bl	d5d64 <_ZN8SPIClass4lockEv.isra.0>
   d5de8:	2800      	cmp	r0, #0
   d5dea:	db1b      	blt.n	d5e24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5dec:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5dee:	2214      	movs	r2, #20
   d5df0:	2100      	movs	r1, #0
   d5df2:	a809      	add	r0, sp, #36	; 0x24
   d5df4:	f002 f8f4 	bl	d7fe0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5df8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	a909      	add	r1, sp, #36	; 0x24
   d5dfe:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5e00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5e04:	f7ff fe1c 	bl	d5a40 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5e08:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5e0c:	b113      	cbz	r3, d5e14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5e0e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5e12:	b155      	cbz	r5, d5e2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5e14:	2700      	movs	r7, #0
   d5e16:	46b9      	mov	r9, r7
   d5e18:	46b8      	mov	r8, r7
   d5e1a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5e1c:	7923      	ldrb	r3, [r4, #4]
   d5e1e:	b15d      	cbz	r5, d5e38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5e20:	b1c3      	cbz	r3, d5e54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5e22:	2000      	movs	r0, #0
}
   d5e24:	b00f      	add	sp, #60	; 0x3c
   d5e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5e2a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5e2e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5e32:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5e36:	e7f1      	b.n	d5e1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5e38:	2b00      	cmp	r3, #0
   d5e3a:	d135      	bne.n	d5ea8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5e3c:	68a3      	ldr	r3, [r4, #8]
   d5e3e:	4543      	cmp	r3, r8
   d5e40:	d108      	bne.n	d5e54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5e42:	f88d 9020 	strb.w	r9, [sp, #32]
   d5e46:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5e4a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5e4e:	89a3      	ldrh	r3, [r4, #12]
   d5e50:	429a      	cmp	r2, r3
   d5e52:	d0e6      	beq.n	d5e22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5e54:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5e56:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5e58:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5e5e:	ab04      	add	r3, sp, #16
   d5e60:	f10d 020f 	add.w	r2, sp, #15
   d5e64:	f7ff ffa2 	bl	d5dac <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5e68:	7921      	ldrb	r1, [r4, #4]
   d5e6a:	b985      	cbnz	r5, d5e8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5e6c:	b989      	cbnz	r1, d5e92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5e6e:	68a3      	ldr	r3, [r4, #8]
   d5e70:	4543      	cmp	r3, r8
   d5e72:	d30e      	bcc.n	d5e92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5e74:	f88d 9020 	strb.w	r9, [sp, #32]
   d5e78:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5e7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5e80:	89a3      	ldrh	r3, [r4, #12]
   d5e82:	429a      	cmp	r2, r3
   d5e84:	d105      	bne.n	d5e92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5e86:	9b04      	ldr	r3, [sp, #16]
   d5e88:	4543      	cmp	r3, r8
   d5e8a:	d102      	bne.n	d5e92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5e8c:	e7c9      	b.n	d5e22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5e8e:	2900      	cmp	r1, #0
   d5e90:	d1f9      	bne.n	d5e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5e92:	2300      	movs	r3, #0
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	7b63      	ldrb	r3, [r4, #13]
   d5e98:	9300      	str	r3, [sp, #0]
   d5e9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5e9e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5ea0:	7830      	ldrb	r0, [r6, #0]
   d5ea2:	f7ff fdd5 	bl	d5a50 <hal_spi_set_settings>
   d5ea6:	e7bc      	b.n	d5e22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5ea8:	e9cd 5500 	strd	r5, r5, [sp]
   d5eac:	462b      	mov	r3, r5
   d5eae:	462a      	mov	r2, r5
   d5eb0:	2101      	movs	r1, #1
   d5eb2:	e7f5      	b.n	d5ea0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5eb4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5eb4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5eb6:	7800      	ldrb	r0, [r0, #0]
   d5eb8:	f7ff fdaa 	bl	d5a10 <hal_spi_transfer>
}
   d5ebc:	b2c0      	uxtb	r0, r0
   d5ebe:	bd08      	pop	{r3, pc}

000d5ec0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5ec0:	b510      	push	{r4, lr}
   d5ec2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5ec4:	6800      	ldr	r0, [r0, #0]
   d5ec6:	b118      	cbz	r0, d5ed0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5ec8:	f7ff fee6 	bl	d5c98 <free>
            wakeupSource_ = nullptr;
   d5ecc:	2300      	movs	r3, #0
   d5ece:	6023      	str	r3, [r4, #0]
        }
    }
   d5ed0:	bd10      	pop	{r4, pc}

000d5ed2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5ed2:	b510      	push	{r4, lr}
   d5ed4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5ed6:	f7ff fff3 	bl	d5ec0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5eda:	4620      	mov	r0, r4
   d5edc:	bd10      	pop	{r4, pc}
	...

000d5ee0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5ee0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5ee2:	4b09      	ldr	r3, [pc, #36]	; (d5f08 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5ee4:	4c09      	ldr	r4, [pc, #36]	; (d5f0c <_GLOBAL__sub_I_System+0x2c>)
   d5ee6:	2202      	movs	r2, #2
   d5ee8:	2000      	movs	r0, #0
   d5eea:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5eec:	4b08      	ldr	r3, [pc, #32]	; (d5f10 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5eee:	6020      	str	r0, [r4, #0]
   d5ef0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5ef2:	71a0      	strb	r0, [r4, #6]
   d5ef4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ef6:	f7ff fe33 	bl	d5b60 <set_system_mode>
SystemClass System;
   d5efa:	4620      	mov	r0, r4
   d5efc:	4a05      	ldr	r2, [pc, #20]	; (d5f14 <_GLOBAL__sub_I_System+0x34>)
   d5efe:	4906      	ldr	r1, [pc, #24]	; (d5f18 <_GLOBAL__sub_I_System+0x38>)
   d5f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5f04:	f001 bf0a 	b.w	d7d1c <__aeabi_atexit>
   d5f08:	2003e658 	.word	0x2003e658
   d5f0c:	2003e64c 	.word	0x2003e64c
   d5f10:	ffff0000 	.word	0xffff0000
   d5f14:	2003e578 	.word	0x2003e578
   d5f18:	000d5ed3 	.word	0x000d5ed3

000d5f1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5f1c:	b510      	push	{r4, lr}
   d5f1e:	4604      	mov	r4, r0
{
	free(buffer);
   d5f20:	6800      	ldr	r0, [r0, #0]
   d5f22:	f7ff feb9 	bl	d5c98 <free>
}
   d5f26:	4620      	mov	r0, r4
   d5f28:	bd10      	pop	{r4, pc}

000d5f2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5f2a:	b510      	push	{r4, lr}
   d5f2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5f2e:	6800      	ldr	r0, [r0, #0]
   d5f30:	b108      	cbz	r0, d5f36 <_ZN6String10invalidateEv+0xc>
   d5f32:	f7ff feb1 	bl	d5c98 <free>
	buffer = NULL;
   d5f36:	2300      	movs	r3, #0
	capacity = len = 0;
   d5f38:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5f3c:	6023      	str	r3, [r4, #0]
}
   d5f3e:	bd10      	pop	{r4, pc}

000d5f40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f40:	b538      	push	{r3, r4, r5, lr}
   d5f42:	4604      	mov	r4, r0
   d5f44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f46:	6800      	ldr	r0, [r0, #0]
   d5f48:	3101      	adds	r1, #1
   d5f4a:	f7ff fead 	bl	d5ca8 <realloc>
	if (newbuffer) {
   d5f4e:	b110      	cbz	r0, d5f56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f50:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5f54:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f56:	bd38      	pop	{r3, r4, r5, pc}

000d5f58 <_ZN6String7reserveEj>:
{
   d5f58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f5a:	6803      	ldr	r3, [r0, #0]
{
   d5f5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f5e:	b123      	cbz	r3, d5f6a <_ZN6String7reserveEj+0x12>
   d5f60:	6843      	ldr	r3, [r0, #4]
   d5f62:	428b      	cmp	r3, r1
   d5f64:	d301      	bcc.n	d5f6a <_ZN6String7reserveEj+0x12>
   d5f66:	2001      	movs	r0, #1
}
   d5f68:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	f7ff ffe8 	bl	d5f40 <_ZN6String12changeBufferEj>
   d5f70:	2800      	cmp	r0, #0
   d5f72:	d0f9      	beq.n	d5f68 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f74:	68a3      	ldr	r3, [r4, #8]
   d5f76:	2b00      	cmp	r3, #0
   d5f78:	d1f5      	bne.n	d5f66 <_ZN6String7reserveEj+0xe>
   d5f7a:	6822      	ldr	r2, [r4, #0]
   d5f7c:	7013      	strb	r3, [r2, #0]
   d5f7e:	e7f2      	b.n	d5f66 <_ZN6String7reserveEj+0xe>

000d5f80 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f82:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f84:	4611      	mov	r1, r2
   d5f86:	9201      	str	r2, [sp, #4]
{
   d5f88:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5f8a:	f7ff ffe5 	bl	d5f58 <_ZN6String7reserveEj>
   d5f8e:	9a01      	ldr	r2, [sp, #4]
   d5f90:	b928      	cbnz	r0, d5f9e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5f92:	4620      	mov	r0, r4
   d5f94:	f7ff ffc9 	bl	d5f2a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5f98:	4620      	mov	r0, r4
   d5f9a:	b003      	add	sp, #12
   d5f9c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5f9e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5fa0:	4629      	mov	r1, r5
   d5fa2:	6820      	ldr	r0, [r4, #0]
   d5fa4:	f001 fff4 	bl	d7f90 <memcpy>
	buffer[len] = 0;
   d5fa8:	6822      	ldr	r2, [r4, #0]
   d5faa:	68a3      	ldr	r3, [r4, #8]
   d5fac:	2100      	movs	r1, #0
   d5fae:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5fb0:	e7f2      	b.n	d5f98 <_ZN6String4copyEPKcj+0x18>

000d5fb2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5fb2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5fb4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5fb6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5fba:	4604      	mov	r4, r0
	len = 0;
   d5fbc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fbe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5fc0:	b141      	cbz	r1, d5fd4 <_ZN6StringC1EPKc+0x22>
   d5fc2:	4608      	mov	r0, r1
   d5fc4:	9101      	str	r1, [sp, #4]
   d5fc6:	f002 f841 	bl	d804c <strlen>
   d5fca:	9901      	ldr	r1, [sp, #4]
   d5fcc:	4602      	mov	r2, r0
   d5fce:	4620      	mov	r0, r4
   d5fd0:	f7ff ffd6 	bl	d5f80 <_ZN6String4copyEPKcj>
}
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	b002      	add	sp, #8
   d5fd8:	bd10      	pop	{r4, pc}

000d5fda <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5fda:	b513      	push	{r0, r1, r4, lr}
   d5fdc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5fde:	b159      	cbz	r1, d5ff8 <_ZN6StringaSEPKc+0x1e>
   d5fe0:	4608      	mov	r0, r1
   d5fe2:	9101      	str	r1, [sp, #4]
   d5fe4:	f002 f832 	bl	d804c <strlen>
   d5fe8:	9901      	ldr	r1, [sp, #4]
   d5fea:	4602      	mov	r2, r0
   d5fec:	4620      	mov	r0, r4
   d5fee:	f7ff ffc7 	bl	d5f80 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	b002      	add	sp, #8
   d5ff6:	bd10      	pop	{r4, pc}
	else invalidate();
   d5ff8:	f7ff ff97 	bl	d5f2a <_ZN6String10invalidateEv>
   d5ffc:	e7f9      	b.n	d5ff2 <_ZN6StringaSEPKc+0x18>

000d5ffe <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5ffe:	b558      	push	{r3, r4, r6, lr}
   d6000:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d6002:	b12a      	cbz	r2, d6010 <_ZNK6String8getBytesEPhjj+0x12>
   d6004:	b121      	cbz	r1, d6010 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d6006:	6884      	ldr	r4, [r0, #8]
   d6008:	42a3      	cmp	r3, r4
   d600a:	d302      	bcc.n	d6012 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d600c:	2300      	movs	r3, #0
   d600e:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d6010:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d6012:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d6014:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d6016:	6801      	ldr	r1, [r0, #0]
   d6018:	4294      	cmp	r4, r2
   d601a:	bf28      	it	cs
   d601c:	4614      	movcs	r4, r2
   d601e:	4419      	add	r1, r3
   d6020:	4622      	mov	r2, r4
   d6022:	4630      	mov	r0, r6
   d6024:	f002 f81a 	bl	d805c <strncpy>
	buf[n] = 0;
   d6028:	2300      	movs	r3, #0
   d602a:	5533      	strb	r3, [r6, r4]
   d602c:	e7f0      	b.n	d6010 <_ZNK6String8getBytesEPhjj+0x12>

000d602e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d602e:	4770      	bx	lr

000d6030 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6030:	4770      	bx	lr

000d6032 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d6032:	4770      	bx	lr

000d6034 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6034:	4770      	bx	lr
	...

000d6038 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6038:	4b06      	ldr	r3, [pc, #24]	; (d6054 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d603a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d603c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d603e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6042:	d005      	beq.n	d6050 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6044:	4608      	mov	r0, r1
   d6046:	f001 fe75 	bl	d7d34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d604a:	2800      	cmp	r0, #0
	return nullptr;
   d604c:	bf08      	it	eq
   d604e:	2400      	moveq	r4, #0
      }
   d6050:	4620      	mov	r0, r4
   d6052:	bd10      	pop	{r4, pc}
   d6054:	000d8e24 	.word	0x000d8e24

000d6058 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6058:	4b06      	ldr	r3, [pc, #24]	; (d6074 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d605a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d605c:	b510      	push	{r4, lr}
   d605e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6062:	d005      	beq.n	d6070 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6064:	4608      	mov	r0, r1
   d6066:	f001 fe65 	bl	d7d34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d606a:	2800      	cmp	r0, #0
	return nullptr;
   d606c:	bf08      	it	eq
   d606e:	2400      	moveq	r4, #0
      }
   d6070:	4620      	mov	r0, r4
   d6072:	bd10      	pop	{r4, pc}
   d6074:	000d8e24 	.word	0x000d8e24

000d6078 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6078:	4b06      	ldr	r3, [pc, #24]	; (d6094 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d607a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d607c:	b510      	push	{r4, lr}
   d607e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6082:	d005      	beq.n	d6090 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6084:	4608      	mov	r0, r1
   d6086:	f001 fe55 	bl	d7d34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d608a:	2800      	cmp	r0, #0
	return nullptr;
   d608c:	bf08      	it	eq
   d608e:	2400      	moveq	r4, #0
      }
   d6090:	4620      	mov	r0, r4
   d6092:	bd10      	pop	{r4, pc}
   d6094:	000d8e24 	.word	0x000d8e24

000d6098 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6098:	b510      	push	{r4, lr}
   d609a:	2168      	movs	r1, #104	; 0x68
   d609c:	4604      	mov	r4, r0
   d609e:	f001 fe42 	bl	d7d26 <_ZdlPvj>
   d60a2:	4620      	mov	r0, r4
   d60a4:	bd10      	pop	{r4, pc}

000d60a6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d60a6:	b510      	push	{r4, lr}
   d60a8:	2128      	movs	r1, #40	; 0x28
   d60aa:	4604      	mov	r4, r0
   d60ac:	f001 fe3b 	bl	d7d26 <_ZdlPvj>
   d60b0:	4620      	mov	r0, r4
   d60b2:	bd10      	pop	{r4, pc}

000d60b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d60b4:	b510      	push	{r4, lr}
   d60b6:	2130      	movs	r1, #48	; 0x30
   d60b8:	4604      	mov	r4, r0
   d60ba:	f001 fe34 	bl	d7d26 <_ZdlPvj>
   d60be:	4620      	mov	r0, r4
   d60c0:	bd10      	pop	{r4, pc}

000d60c2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d60c2:	f7fd bfea 	b.w	d409a <_ZdlPv>

000d60c6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d60c6:	f7fd bfe8 	b.w	d409a <_ZdlPv>

000d60ca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d60ca:	f7fd bfe6 	b.w	d409a <_ZdlPv>

000d60ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60ce:	b510      	push	{r4, lr}
          _M_dispose();
   d60d0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60d2:	4604      	mov	r4, r0
          _M_dispose();
   d60d4:	689b      	ldr	r3, [r3, #8]
   d60d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60d8:	68a3      	ldr	r3, [r4, #8]
   d60da:	3b01      	subs	r3, #1
   d60dc:	60a3      	str	r3, [r4, #8]
   d60de:	b92b      	cbnz	r3, d60ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d60e0:	6823      	ldr	r3, [r4, #0]
   d60e2:	4620      	mov	r0, r4
   d60e4:	68db      	ldr	r3, [r3, #12]
    }
   d60e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d60ea:	4718      	bx	r3
    }
   d60ec:	bd10      	pop	{r4, pc}

000d60ee <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d60ee:	b510      	push	{r4, lr}
   d60f0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d60f2:	6800      	ldr	r0, [r0, #0]
   d60f4:	b108      	cbz	r0, d60fa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d60f6:	f7ff fbcb 	bl	d5890 <os_mutex_recursive_destroy>
    }
   d60fa:	4620      	mov	r0, r4
   d60fc:	bd10      	pop	{r4, pc}
	...

000d6100 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d6100:	b510      	push	{r4, lr}
        mutex_.lock();
   d6102:	4b04      	ldr	r3, [pc, #16]	; (d6114 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d6104:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6106:	6818      	ldr	r0, [r3, #0]
   d6108:	f7ff fbca 	bl	d58a0 <os_mutex_recursive_lock>
        locked_ = true;
   d610c:	2301      	movs	r3, #1
   d610e:	7023      	strb	r3, [r4, #0]
    }
   d6110:	bd10      	pop	{r4, pc}
   d6112:	bf00      	nop
   d6114:	2003e664 	.word	0x2003e664

000d6118 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6118:	b510      	push	{r4, lr}
        mutex_.unlock();
   d611a:	4b04      	ldr	r3, [pc, #16]	; (d612c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d611c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d611e:	6818      	ldr	r0, [r3, #0]
   d6120:	f7ff fbc6 	bl	d58b0 <os_mutex_recursive_unlock>
        locked_ = false;
   d6124:	2300      	movs	r3, #0
   d6126:	7023      	strb	r3, [r4, #0]
    }
   d6128:	bd10      	pop	{r4, pc}
   d612a:	bf00      	nop
   d612c:	2003e664 	.word	0x2003e664

000d6130 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6130:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6132:	2500      	movs	r5, #0
   d6134:	1cec      	adds	r4, r5, #3
   d6136:	428c      	cmp	r4, r1
   d6138:	d80d      	bhi.n	d6156 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d613a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d613c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d613e:	5d87      	ldrb	r7, [r0, r6]
   d6140:	4297      	cmp	r7, r2
   d6142:	d105      	bne.n	d6150 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6144:	4426      	add	r6, r4
   d6146:	42b1      	cmp	r1, r6
   d6148:	d305      	bcc.n	d6156 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d614a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d614c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d614e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6150:	3401      	adds	r4, #1
   d6152:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6154:	e7ee      	b.n	d6134 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d6156:	2000      	movs	r0, #0
   d6158:	e7f9      	b.n	d614e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d615a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d615a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d615e:	4604      	mov	r4, r0
   d6160:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6164:	461e      	mov	r6, r3
   d6166:	4689      	mov	r9, r1
   d6168:	ab01      	add	r3, sp, #4
   d616a:	4690      	mov	r8, r2
   d616c:	460a      	mov	r2, r1
   d616e:	6a01      	ldr	r1, [r0, #32]
   d6170:	f7ff ffde 	bl	d6130 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6174:	6a25      	ldr	r5, [r4, #32]
   d6176:	1cb3      	adds	r3, r6, #2
   d6178:	bb17      	cbnz	r7, d61c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d617a:	b308      	cbz	r0, d61c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d617c:	195f      	adds	r7, r3, r5
   d617e:	1a3f      	subs	r7, r7, r0
   d6180:	2f1f      	cmp	r7, #31
   d6182:	d819      	bhi.n	d61b8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6184:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6188:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d618c:	eba5 0209 	sub.w	r2, r5, r9
   d6190:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6192:	eb00 0109 	add.w	r1, r0, r9
   d6196:	eb06 000a 	add.w	r0, r6, sl
   d619a:	b292      	uxth	r2, r2
   d619c:	4421      	add	r1, r4
   d619e:	4420      	add	r0, r4
   d61a0:	f001 ff04 	bl	d7fac <memmove>
            selfData_[offset] = len + 1;
   d61a4:	1c73      	adds	r3, r6, #1
   d61a6:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d61aa:	4632      	mov	r2, r6
   d61ac:	4641      	mov	r1, r8
   d61ae:	eb04 000a 	add.w	r0, r4, sl
   d61b2:	f001 feed 	bl	d7f90 <memcpy>
            selfLen_ = staLen + len + 2;
   d61b6:	6227      	str	r7, [r4, #32]
}
   d61b8:	6a20      	ldr	r0, [r4, #32]
   d61ba:	b002      	add	sp, #8
   d61bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d61c0:	442b      	add	r3, r5
   d61c2:	2b1f      	cmp	r3, #31
   d61c4:	d8f8      	bhi.n	d61b8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d61c6:	1c73      	adds	r3, r6, #1
   d61c8:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d61ca:	1ca8      	adds	r0, r5, #2
   d61cc:	4425      	add	r5, r4
   d61ce:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d61d0:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d61d2:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d61d6:	4641      	mov	r1, r8
   d61d8:	4420      	add	r0, r4
   d61da:	f001 fed9 	bl	d7f90 <memcpy>
        selfLen_ += len;
   d61de:	6a23      	ldr	r3, [r4, #32]
   d61e0:	4433      	add	r3, r6
   d61e2:	6223      	str	r3, [r4, #32]
   d61e4:	e7e8      	b.n	d61b8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d61e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d61e8:	4a02      	ldr	r2, [pc, #8]	; (d61f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d61ea:	2100      	movs	r1, #0
   d61ec:	200a      	movs	r0, #10
   d61ee:	f7ff bca7 	b.w	d5b40 <panic_>
   d61f2:	bf00      	nop
   d61f4:	000d5739 	.word	0x000d5739

000d61f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d61f8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d61fa:	b538      	push	{r3, r4, r5, lr}
   d61fc:	4604      	mov	r4, r0
	  switch (__op)
   d61fe:	d007      	beq.n	d6210 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d6200:	2a03      	cmp	r2, #3
   d6202:	d011      	beq.n	d6228 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d6204:	2a01      	cmp	r2, #1
   d6206:	d101      	bne.n	d620c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6208:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d620a:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d620c:	2000      	movs	r0, #0
   d620e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6210:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6212:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6214:	f7fd ff3d 	bl	d4092 <_Znwj>
   d6218:	4603      	mov	r3, r0
   d621a:	2800      	cmp	r0, #0
   d621c:	d0f5      	beq.n	d620a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d621e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6222:	e883 0003 	stmia.w	r3, {r0, r1}
   d6226:	e7f0      	b.n	d620a <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6228:	6800      	ldr	r0, [r0, #0]
   d622a:	2800      	cmp	r0, #0
   d622c:	d0ee      	beq.n	d620c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d622e:	2108      	movs	r1, #8
   d6230:	f001 fd79 	bl	d7d26 <_ZdlPvj>
   d6234:	e7ea      	b.n	d620c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d6236 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6236:	b430      	push	{r4, r5}
   d6238:	460d      	mov	r5, r1
   d623a:	4611      	mov	r1, r2
   d623c:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d623e:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6240:	6809      	ldr	r1, [r1, #0]
   d6242:	6828      	ldr	r0, [r5, #0]
   d6244:	e9d3 4300 	ldrd	r4, r3, [r3]
   d6248:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d624a:	bc30      	pop	{r4, r5}
   d624c:	4760      	bx	ip

000d624e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d624e:	b510      	push	{r4, lr}
      if (_M_manager)
   d6250:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6252:	4604      	mov	r4, r0
      if (_M_manager)
   d6254:	b113      	cbz	r3, d625c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6256:	2203      	movs	r2, #3
   d6258:	4601      	mov	r1, r0
   d625a:	4798      	blx	r3
    }
   d625c:	4620      	mov	r0, r4
   d625e:	bd10      	pop	{r4, pc}

000d6260 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6260:	b510      	push	{r4, lr}
   d6262:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6264:	3058      	adds	r0, #88	; 0x58
   d6266:	f7ff fff2 	bl	d624e <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d626a:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d626e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6272:	f7ff be53 	b.w	d5f1c <_ZN6StringD1Ev>

000d6276 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6276:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d627a:	b2da      	uxtb	r2, r3
   d627c:	2a09      	cmp	r2, #9
   d627e:	d801      	bhi.n	d6284 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6280:	4618      	mov	r0, r3
   d6282:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6284:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6288:	2b05      	cmp	r3, #5
   d628a:	d801      	bhi.n	d6290 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d628c:	3857      	subs	r0, #87	; 0x57
   d628e:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6290:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6294:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6296:	bf94      	ite	ls
   d6298:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d629a:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d629e:	4770      	bx	lr

000d62a0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d62a0:	b510      	push	{r4, lr}
            locked_(false) {
   d62a2:	2300      	movs	r3, #0
    WiringBleLock() :
   d62a4:	4604      	mov	r4, r0
            locked_(false) {
   d62a6:	7003      	strb	r3, [r0, #0]
        lock();
   d62a8:	f7ff ff2a 	bl	d6100 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d62ac:	4620      	mov	r0, r4
   d62ae:	bd10      	pop	{r4, pc}

000d62b0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d62b0:	b510      	push	{r4, lr}
        if (locked_) {
   d62b2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d62b4:	4604      	mov	r4, r0
        if (locked_) {
   d62b6:	b10b      	cbz	r3, d62bc <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d62b8:	f7ff ff2e 	bl	d6118 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d62bc:	4620      	mov	r0, r4
   d62be:	bd10      	pop	{r4, pc}

000d62c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d62c0:	b082      	sub	sp, #8
   d62c2:	4603      	mov	r3, r0
    address_ = addr;
   d62c4:	6808      	ldr	r0, [r1, #0]
   d62c6:	6849      	ldr	r1, [r1, #4]
   d62c8:	466a      	mov	r2, sp
   d62ca:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d62cc:	466a      	mov	r2, sp
   d62ce:	ca03      	ldmia	r2!, {r0, r1}
   d62d0:	6018      	str	r0, [r3, #0]
}
   d62d2:	4618      	mov	r0, r3
    address_ = addr.address_;
   d62d4:	6059      	str	r1, [r3, #4]
}
   d62d6:	b002      	add	sp, #8
   d62d8:	4770      	bx	lr

000d62da <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d62da:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d62dc:	7982      	ldrb	r2, [r0, #6]
   d62de:	798b      	ldrb	r3, [r1, #6]
   d62e0:	429a      	cmp	r2, r3
   d62e2:	d106      	bne.n	d62f2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d62e4:	2206      	movs	r2, #6
   d62e6:	f001 fe45 	bl	d7f74 <memcmp>
   d62ea:	fab0 f080 	clz	r0, r0
   d62ee:	0940      	lsrs	r0, r0, #5
}
   d62f0:	bd08      	pop	{r3, pc}
    return false;
   d62f2:	2000      	movs	r0, #0
   d62f4:	e7fc      	b.n	d62f0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d62f6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d62f6:	f04f 33ff 	mov.w	r3, #4294967295
   d62fa:	6003      	str	r3, [r0, #0]
   d62fc:	8083      	strh	r3, [r0, #4]
}
   d62fe:	2000      	movs	r0, #0
   d6300:	4770      	bx	lr

000d6302 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6302:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6304:	b508      	push	{r3, lr}
        : address_{} {
   d6306:	6001      	str	r1, [r0, #0]
   d6308:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d630a:	4602      	mov	r2, r0
    clear();
   d630c:	f7ff fff3 	bl	d62f6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6310:	7191      	strb	r1, [r2, #6]
}
   d6312:	4610      	mov	r0, r2
   d6314:	bd08      	pop	{r3, pc}
	...

000d6318 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6318:	2201      	movs	r2, #1
   d631a:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d631c:	4a06      	ldr	r2, [pc, #24]	; (d6338 <_ZN8particle7BleUuidC1Ev+0x20>)
   d631e:	6811      	ldr	r1, [r2, #0]
   d6320:	6001      	str	r1, [r0, #0]
   d6322:	6851      	ldr	r1, [r2, #4]
   d6324:	6041      	str	r1, [r0, #4]
   d6326:	8911      	ldrh	r1, [r2, #8]
   d6328:	7a92      	ldrb	r2, [r2, #10]
   d632a:	7282      	strb	r2, [r0, #10]
   d632c:	2200      	movs	r2, #0
   d632e:	8101      	strh	r1, [r0, #8]
   d6330:	f8c0 200b 	str.w	r2, [r0, #11]
   d6334:	73c2      	strb	r2, [r0, #15]
}
   d6336:	4770      	bx	lr
   d6338:	000d8e2c 	.word	0x000d8e2c

000d633c <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d633c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d633e:	690b      	ldr	r3, [r1, #16]
   d6340:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6342:	f101 0210 	add.w	r2, r1, #16
   d6346:	4603      	mov	r3, r0
   d6348:	f851 4b04 	ldr.w	r4, [r1], #4
   d634c:	f843 4b04 	str.w	r4, [r3], #4
   d6350:	4291      	cmp	r1, r2
   d6352:	d1f9      	bne.n	d6348 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6354:	bd10      	pop	{r4, pc}

000d6356 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6356:	b510      	push	{r4, lr}
    if (uuid128) {
   d6358:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d635a:	4604      	mov	r4, r0
    if (uuid128) {
   d635c:	b1b1      	cbz	r1, d638c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d635e:	2a01      	cmp	r2, #1
   d6360:	f101 0210 	add.w	r2, r1, #16
   d6364:	d10a      	bne.n	d637c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6366:	4601      	mov	r1, r0
   d6368:	f853 0b04 	ldr.w	r0, [r3], #4
   d636c:	f841 0b04 	str.w	r0, [r1], #4
   d6370:	4293      	cmp	r3, r2
   d6372:	d1f9      	bne.n	d6368 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d6374:	2301      	movs	r3, #1
   d6376:	6123      	str	r3, [r4, #16]
}
   d6378:	4620      	mov	r0, r4
   d637a:	bd10      	pop	{r4, pc}
   d637c:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d637e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d6382:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6386:	429a      	cmp	r2, r3
   d6388:	d1f9      	bne.n	d637e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d638a:	e7f3      	b.n	d6374 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d638c:	2210      	movs	r2, #16
   d638e:	f001 fe27 	bl	d7fe0 <memset>
   d6392:	e7f1      	b.n	d6378 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d6394 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6394:	b538      	push	{r3, r4, r5, lr}
   d6396:	4604      	mov	r4, r0
   d6398:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d639a:	461a      	mov	r2, r3
   d639c:	f7ff ffdb 	bl	d6356 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d63a0:	81a5      	strh	r5, [r4, #12]
}
   d63a2:	4620      	mov	r0, r4
   d63a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d63a8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d63a8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d63aa:	6902      	ldr	r2, [r0, #16]
   d63ac:	b922      	cbnz	r2, d63b8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d63ae:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d63b0:	3800      	subs	r0, #0
   d63b2:	bf18      	it	ne
   d63b4:	2001      	movne	r0, #1
}
   d63b6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d63b8:	4902      	ldr	r1, [pc, #8]	; (d63c4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d63ba:	2210      	movs	r2, #16
   d63bc:	f001 fdda 	bl	d7f74 <memcmp>
   d63c0:	e7f6      	b.n	d63b0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d63c2:	bf00      	nop
   d63c4:	000d8e4c 	.word	0x000d8e4c

000d63c8 <_ZNK8particle7BleUuid4typeEv>:
}
   d63c8:	6900      	ldr	r0, [r0, #16]
   d63ca:	4770      	bx	lr

000d63cc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d63cc:	b538      	push	{r3, r4, r5, lr}
   d63ce:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d63d0:	2214      	movs	r2, #20
   d63d2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d63d4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d63d6:	f001 fe03 	bl	d7fe0 <memset>
    if (type_ == BleUuidType::SHORT) {
   d63da:	6923      	ldr	r3, [r4, #16]
   d63dc:	b93b      	cbnz	r3, d63ee <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d63de:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d63e0:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d63e2:	7b23      	ldrb	r3, [r4, #12]
   d63e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d63e8:	802b      	strh	r3, [r5, #0]
}
   d63ea:	4628      	mov	r0, r5
   d63ec:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d63ee:	2301      	movs	r3, #1
   d63f0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d63f2:	f104 0210 	add.w	r2, r4, #16
   d63f6:	462b      	mov	r3, r5
   d63f8:	f854 1b04 	ldr.w	r1, [r4], #4
   d63fc:	f843 1b04 	str.w	r1, [r3], #4
   d6400:	4294      	cmp	r4, r2
   d6402:	d1f9      	bne.n	d63f8 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6404:	e7f1      	b.n	d63ea <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d6406 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d6406:	7b42      	ldrb	r2, [r0, #13]
   d6408:	7b00      	ldrb	r0, [r0, #12]
}
   d640a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d640e:	4770      	bx	lr

000d6410 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6410:	4770      	bx	lr

000d6412 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6412:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6414:	6902      	ldr	r2, [r0, #16]
   d6416:	690b      	ldr	r3, [r1, #16]
   d6418:	429a      	cmp	r2, r3
   d641a:	d106      	bne.n	d642a <_ZNK8particle7BleUuideqERKS0_+0x18>
   d641c:	2210      	movs	r2, #16
   d641e:	f001 fda9 	bl	d7f74 <memcmp>
   d6422:	fab0 f080 	clz	r0, r0
   d6426:	0940      	lsrs	r0, r0, #5
}
   d6428:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d642a:	2000      	movs	r0, #0
   d642c:	e7fc      	b.n	d6428 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6430 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6430:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6432:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d6436:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6438:	4b32      	ldr	r3, [pc, #200]	; (d6504 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	6002      	str	r2, [r0, #0]
   d643e:	685a      	ldr	r2, [r3, #4]
   d6440:	6042      	str	r2, [r0, #4]
   d6442:	2500      	movs	r5, #0
   d6444:	891a      	ldrh	r2, [r3, #8]
   d6446:	7a9b      	ldrb	r3, [r3, #10]
   d6448:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d644a:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d644c:	7283      	strb	r3, [r0, #10]
   d644e:	f8c0 500b 	str.w	r5, [r0, #11]
   d6452:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6454:	460e      	mov	r6, r1
   d6456:	b321      	cbz	r1, d64a2 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6458:	2124      	movs	r1, #36	; 0x24
   d645a:	4630      	mov	r0, r6
   d645c:	f001 fe11 	bl	d8082 <strnlen>
   d6460:	2804      	cmp	r0, #4
   d6462:	d121      	bne.n	d64a8 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6464:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6468:	af01      	add	r7, sp, #4
   d646a:	1cb5      	adds	r5, r6, #2
   d646c:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d646e:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d6472:	f7ff ff00 	bl	d6276 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6476:	f1b0 0800 	subs.w	r8, r0, #0
   d647a:	db10      	blt.n	d649e <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d647c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d6480:	f7ff fef9 	bl	d6276 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6484:	2800      	cmp	r0, #0
   d6486:	db0a      	blt.n	d649e <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6488:	3502      	adds	r5, #2
   d648a:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d648e:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6490:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6494:	d1eb      	bne.n	d646e <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6496:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d649a:	ba5b      	rev16	r3, r3
   d649c:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d649e:	2300      	movs	r3, #0
   d64a0:	6123      	str	r3, [r4, #16]
}
   d64a2:	b002      	add	sp, #8
   d64a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d64a8:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d64aa:	2124      	movs	r1, #36	; 0x24
   d64ac:	4630      	mov	r0, r6
   d64ae:	f001 fde8 	bl	d8082 <strnlen>
   d64b2:	42a8      	cmp	r0, r5
   d64b4:	d806      	bhi.n	d64c4 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d64b6:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d64b8:	2300      	movs	r3, #0
    while (len > 0) {
   d64ba:	42bc      	cmp	r4, r7
   d64bc:	d0f1      	beq.n	d64a2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d64be:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d64c2:	e7fa      	b.n	d64ba <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d64c4:	2f00      	cmp	r7, #0
   d64c6:	d0ec      	beq.n	d64a2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d64c8:	5d70      	ldrb	r0, [r6, r5]
   d64ca:	f7ff fed4 	bl	d6276 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d64ce:	0603      	lsls	r3, r0, #24
   d64d0:	d415      	bmi.n	d64fe <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d64d2:	0100      	lsls	r0, r0, #4
   d64d4:	3f01      	subs	r7, #1
   d64d6:	fa5f f880 	uxtb.w	r8, r0
   d64da:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d64de:	2124      	movs	r1, #36	; 0x24
   d64e0:	4630      	mov	r0, r6
   d64e2:	f001 fdce 	bl	d8082 <strnlen>
   d64e6:	3501      	adds	r5, #1
   d64e8:	42a8      	cmp	r0, r5
   d64ea:	d908      	bls.n	d64fe <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d64ec:	5d70      	ldrb	r0, [r6, r5]
   d64ee:	f7ff fec2 	bl	d6276 <_ZN8particle11hexToNibbleEc>
   d64f2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d64f4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d64f6:	bfa4      	itt	ge
   d64f8:	ea40 0008 	orrge.w	r0, r0, r8
   d64fc:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d64fe:	3501      	adds	r5, #1
   d6500:	e7d3      	b.n	d64aa <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d6502:	bf00      	nop
   d6504:	000d8e2c 	.word	0x000d8e2c

000d6508 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6508:	b513      	push	{r0, r1, r4, lr}
   d650a:	4604      	mov	r4, r0
   d650c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d650e:	f7ff ff03 	bl	d6318 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6512:	4620      	mov	r0, r4
   d6514:	9901      	ldr	r1, [sp, #4]
   d6516:	f7ff ff8b 	bl	d6430 <_ZN8particle7BleUuid9constructEPKc>
}
   d651a:	4620      	mov	r0, r4
   d651c:	b002      	add	sp, #8
   d651e:	bd10      	pop	{r4, pc}

000d6520 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6520:	b430      	push	{r4, r5}
   d6522:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d6526:	b912      	cbnz	r2, d652e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6528:	6a00      	ldr	r0, [r0, #32]
}
   d652a:	bc30      	pop	{r4, r5}
   d652c:	4770      	bx	lr
   d652e:	9502      	str	r5, [sp, #8]
   d6530:	bc30      	pop	{r4, r5}
   d6532:	f7ff be12 	b.w	d615a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d6536 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d6536:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6538:	4604      	mov	r4, r0
          selfLen_(0) {
   d653a:	4602      	mov	r2, r0
   d653c:	f100 011f 	add.w	r1, r0, #31
   d6540:	2300      	movs	r3, #0
   d6542:	f802 3b01 	strb.w	r3, [r2], #1
   d6546:	4291      	cmp	r1, r2
   d6548:	d1fb      	bne.n	d6542 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d654a:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d654c:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d654e:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6550:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6552:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6556:	4619      	mov	r1, r3
   d6558:	f10d 020f 	add.w	r2, sp, #15
   d655c:	4620      	mov	r0, r4
   d655e:	f7ff ffdf 	bl	d6520 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6562:	4620      	mov	r0, r4
   d6564:	b004      	add	sp, #16
   d6566:	bd10      	pop	{r4, pc}

000d6568 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6568:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d656a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d656c:	460e      	mov	r6, r1
   d656e:	ab01      	add	r3, sp, #4
   d6570:	6a01      	ldr	r1, [r0, #32]
   d6572:	4604      	mov	r4, r0
   d6574:	f7ff fddc 	bl	d6130 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d6578:	4605      	mov	r5, r0
   d657a:	b178      	cbz	r0, d659c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d657c:	9801      	ldr	r0, [sp, #4]
   d657e:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6580:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d6582:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6584:	4421      	add	r1, r4
   d6586:	1b52      	subs	r2, r2, r5
   d6588:	4420      	add	r0, r4
   d658a:	f001 fd01 	bl	d7f90 <memcpy>
        selfLen_ -= len;
   d658e:	6a20      	ldr	r0, [r4, #32]
   d6590:	1b40      	subs	r0, r0, r5
   d6592:	6220      	str	r0, [r4, #32]
        remove(type);
   d6594:	4631      	mov	r1, r6
   d6596:	4620      	mov	r0, r4
   d6598:	f7ff ffe6 	bl	d6568 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d659c:	b002      	add	sp, #8
   d659e:	bd70      	pop	{r4, r5, r6, pc}

000d65a0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d65a0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d65a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d65a6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d65a8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d65aa:	8043      	strh	r3, [r0, #2]
   d65ac:	220e      	movs	r2, #14
   d65ae:	4629      	mov	r1, r5
   d65b0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d65b2:	7105      	strb	r5, [r0, #4]
   d65b4:	3006      	adds	r0, #6
   d65b6:	f001 fd13 	bl	d7fe0 <memset>
   d65ba:	f104 0014 	add.w	r0, r4, #20
   d65be:	f7ff feab 	bl	d6318 <_ZN8particle7BleUuidC1Ev>
   d65c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d65c6:	f7ff fea7 	bl	d6318 <_ZN8particle7BleUuidC1Ev>
   d65ca:	4904      	ldr	r1, [pc, #16]	; (d65dc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d65cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d65d0:	f7ff fcef 	bl	d5fb2 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d65d4:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d65d6:	4620      	mov	r0, r4
   d65d8:	bd38      	pop	{r3, r4, r5, pc}
   d65da:	bf00      	nop
   d65dc:	000d80ec 	.word	0x000d80ec

000d65e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d65e0:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d65e2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d65e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d65ea:	4293      	cmp	r3, r2
   d65ec:	4618      	mov	r0, r3
   d65ee:	d006      	beq.n	d65fe <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d65f0:	6804      	ldr	r4, [r0, #0]
   d65f2:	8824      	ldrh	r4, [r4, #0]
   d65f4:	428c      	cmp	r4, r1
   d65f6:	f103 0308 	add.w	r3, r3, #8
   d65fa:	d1f6      	bne.n	d65ea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d65fc:	bd10      	pop	{r4, pc}
        return nullptr;
   d65fe:	2000      	movs	r0, #0
   d6600:	e7fc      	b.n	d65fc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6604 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6604:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6606:	4606      	mov	r6, r0
   d6608:	b085      	sub	sp, #20
   d660a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d660c:	460d      	mov	r5, r1
   d660e:	2900      	cmp	r1, #0
   d6610:	d050      	beq.n	d66b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d6612:	2a00      	cmp	r2, #0
   d6614:	d04e      	beq.n	d66b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d6616:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d6618:	7823      	ldrb	r3, [r4, #0]
   d661a:	2af4      	cmp	r2, #244	; 0xf4
   d661c:	bf28      	it	cs
   d661e:	22f4      	movcs	r2, #244	; 0xf4
   d6620:	b343      	cbz	r3, d6674 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d6622:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6624:	0798      	lsls	r0, r3, #30
   d6626:	d509      	bpl.n	d663c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6628:	89a0      	ldrh	r0, [r4, #12]
   d662a:	9203      	str	r2, [sp, #12]
   d662c:	2300      	movs	r3, #0
   d662e:	f7ff f8c7 	bl	d57c0 <hal_ble_gatt_server_set_characteristic_value>
   d6632:	2800      	cmp	r0, #0
   d6634:	9a03      	ldr	r2, [sp, #12]
   d6636:	da03      	bge.n	d6640 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6638:	b005      	add	sp, #20
   d663a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d663c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6640:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d6642:	7923      	ldrb	r3, [r4, #4]
   d6644:	06d9      	lsls	r1, r3, #27
   d6646:	d509      	bpl.n	d665c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d6648:	2f01      	cmp	r7, #1
   d664a:	d007      	beq.n	d665c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d664c:	89a0      	ldrh	r0, [r4, #12]
   d664e:	2300      	movs	r3, #0
   d6650:	4629      	mov	r1, r5
}
   d6652:	b005      	add	sp, #20
   d6654:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6658:	f7ff b8ee 	b.w	d5838 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d665c:	069b      	lsls	r3, r3, #26
   d665e:	d5eb      	bpl.n	d6638 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6660:	2f02      	cmp	r7, #2
   d6662:	d0e9      	beq.n	d6638 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6664:	89a0      	ldrh	r0, [r4, #12]
   d6666:	2300      	movs	r3, #0
   d6668:	4629      	mov	r1, r5
}
   d666a:	b005      	add	sp, #20
   d666c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6670:	f7ff b8ec 	b.w	d584c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d6674:	8860      	ldrh	r0, [r4, #2]
   d6676:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d667a:	4288      	cmp	r0, r1
   d667c:	d01c      	beq.n	d66b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d667e:	7921      	ldrb	r1, [r4, #4]
   d6680:	074e      	lsls	r6, r1, #29
   d6682:	d501      	bpl.n	d6688 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d6684:	2f01      	cmp	r7, #1
   d6686:	d104      	bne.n	d6692 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6688:	070b      	lsls	r3, r1, #28
   d668a:	d409      	bmi.n	d66a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d668c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6690:	e7d2      	b.n	d6638 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6692:	89a1      	ldrh	r1, [r4, #12]
   d6694:	9300      	str	r3, [sp, #0]
   d6696:	4613      	mov	r3, r2
   d6698:	462a      	mov	r2, r5
   d669a:	f7ff f8a5 	bl	d57e8 <hal_ble_gatt_client_write_without_response>
   d669e:	e7cb      	b.n	d6638 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d66a0:	2f02      	cmp	r7, #2
   d66a2:	d0f3      	beq.n	d668c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d66a4:	2300      	movs	r3, #0
   d66a6:	89a1      	ldrh	r1, [r4, #12]
   d66a8:	9300      	str	r3, [sp, #0]
   d66aa:	4613      	mov	r3, r2
   d66ac:	462a      	mov	r2, r5
   d66ae:	f7ff f891 	bl	d57d4 <hal_ble_gatt_client_write_with_response>
   d66b2:	e7c1      	b.n	d6638 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d66b4:	4802      	ldr	r0, [pc, #8]	; (d66c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d66b6:	e7bf      	b.n	d6638 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d66b8:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d66bc:	e7bc      	b.n	d6638 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d66be:	bf00      	nop
   d66c0:	fffffef2 	.word	0xfffffef2

000d66c4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d66c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d66c8:	2600      	movs	r6, #0
   d66ca:	6006      	str	r6, [r0, #0]
   d66cc:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d66ce:	2028      	movs	r0, #40	; 0x28
   d66d0:	460c      	mov	r4, r1
   d66d2:	f7fd fcde 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d66d6:	1e05      	subs	r5, r0, #0
   d66d8:	f105 080c 	add.w	r8, r5, #12
   d66dc:	d00f      	beq.n	d66fe <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d66de:	2301      	movs	r3, #1
   d66e0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d66e4:	4b08      	ldr	r3, [pc, #32]	; (d6708 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d66e6:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d66e8:	4640      	mov	r0, r8
   d66ea:	f7ff fe15 	bl	d6318 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d66ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d66f0:	622e      	str	r6, [r5, #32]
   d66f2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d66f6:	4646      	mov	r6, r8
   d66f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d66fa:	6823      	ldr	r3, [r4, #0]
   d66fc:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d66fe:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6702:	4638      	mov	r0, r7
   d6704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6708:	000d8df4 	.word	0x000d8df4

000d670c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d670c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d670e:	2500      	movs	r5, #0
   d6710:	6005      	str	r5, [r0, #0]
   d6712:	4606      	mov	r6, r0
   d6714:	2030      	movs	r0, #48	; 0x30
   d6716:	f7fd fcbc 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d671a:	4604      	mov	r4, r0
   d671c:	b188      	cbz	r0, d6742 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d671e:	2301      	movs	r3, #1
   d6720:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6724:	4b09      	ldr	r3, [pc, #36]	; (d674c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d6726:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d6728:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d672c:	8183      	strh	r3, [r0, #12]
   d672e:	300e      	adds	r0, #14
   d6730:	f7ff fde7 	bl	d6302 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6734:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d6738:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d673c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d6740:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d6742:	6074      	str	r4, [r6, #4]
   d6744:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d6746:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6748:	4630      	mov	r0, r6
   d674a:	bd70      	pop	{r4, r5, r6, pc}
   d674c:	000d8e10 	.word	0x000d8e10

000d6750 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d6750:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6752:	460d      	mov	r5, r1
   d6754:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6756:	a801      	add	r0, sp, #4
   d6758:	f7ff fda2 	bl	d62a0 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d675c:	682a      	ldr	r2, [r5, #0]
   d675e:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6762:	6023      	str	r3, [r4, #0]
   d6764:	6853      	ldr	r3, [r2, #4]
   d6766:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d6768:	a801      	add	r0, sp, #4
   d676a:	f7ff fda1 	bl	d62b0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d676e:	4620      	mov	r0, r4
   d6770:	b003      	add	sp, #12
   d6772:	bd30      	pop	{r4, r5, pc}

000d6774 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6774:	b530      	push	{r4, r5, lr}
   d6776:	4605      	mov	r5, r0
   d6778:	b087      	sub	sp, #28
   d677a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d677c:	a801      	add	r0, sp, #4
   d677e:	f7ff fd8f 	bl	d62a0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6782:	682a      	ldr	r2, [r5, #0]
   d6784:	6823      	ldr	r3, [r4, #0]
   d6786:	8812      	ldrh	r2, [r2, #0]
   d6788:	881b      	ldrh	r3, [r3, #0]
   d678a:	429a      	cmp	r2, r3
   d678c:	d10d      	bne.n	d67aa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d678e:	4629      	mov	r1, r5
   d6790:	a802      	add	r0, sp, #8
   d6792:	f7ff ffdd 	bl	d6750 <_ZNK8particle13BlePeerDevice7addressEv>
   d6796:	4621      	mov	r1, r4
   d6798:	a804      	add	r0, sp, #16
   d679a:	f7ff ffd9 	bl	d6750 <_ZNK8particle13BlePeerDevice7addressEv>
   d679e:	a904      	add	r1, sp, #16
   d67a0:	a802      	add	r0, sp, #8
   d67a2:	f7ff fd9a 	bl	d62da <_ZNK8particle10BleAddresseqERKS0_>
   d67a6:	4604      	mov	r4, r0
   d67a8:	b900      	cbnz	r0, d67ac <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d67aa:	2400      	movs	r4, #0
    WiringBleLock lk;
   d67ac:	a801      	add	r0, sp, #4
   d67ae:	f7ff fd7f 	bl	d62b0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d67b2:	4620      	mov	r0, r4
   d67b4:	b007      	add	sp, #28
   d67b6:	bd30      	pop	{r4, r5, pc}

000d67b8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d67b8:	b510      	push	{r4, lr}
   d67ba:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d67bc:	2054      	movs	r0, #84	; 0x54
   d67be:	f7fd fc68 	bl	d4092 <_Znwj>
   d67c2:	4601      	mov	r1, r0
   d67c4:	b160      	cbz	r0, d67e0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d67c6:	2300      	movs	r3, #0
   d67c8:	e9c0 3300 	strd	r3, r3, [r0]
   d67cc:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d67d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d67d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d67d8:	6203      	str	r3, [r0, #32]
   d67da:	62c3      	str	r3, [r0, #44]	; 0x2c
   d67dc:	63c3      	str	r3, [r0, #60]	; 0x3c
   d67de:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d67e0:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d67e2:	b919      	cbnz	r1, d67ec <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d67e4:	4a09      	ldr	r2, [pc, #36]	; (d680c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d67e6:	200a      	movs	r0, #10
   d67e8:	f7ff f9aa 	bl	d5b40 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d67ec:	2000      	movs	r0, #0
   d67ee:	f7fe ffb3 	bl	d5758 <hal_ble_stack_init>
   d67f2:	b120      	cbz	r0, d67fe <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d67f4:	4a05      	ldr	r2, [pc, #20]	; (d680c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d67f6:	2100      	movs	r1, #0
   d67f8:	200a      	movs	r0, #10
   d67fa:	f7ff f9a1 	bl	d5b40 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d67fe:	6821      	ldr	r1, [r4, #0]
   d6800:	4803      	ldr	r0, [pc, #12]	; (d6810 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6802:	2200      	movs	r2, #0
   d6804:	f7ff f80e 	bl	d5824 <hal_ble_set_callback_on_periph_link_events>
}
   d6808:	4620      	mov	r0, r4
   d680a:	bd10      	pop	{r4, pc}
   d680c:	000d5739 	.word	0x000d5739
   d6810:	000d6c21 	.word	0x000d6c21

000d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6814:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6816:	4c0b      	ldr	r4, [pc, #44]	; (d6844 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6818:	7823      	ldrb	r3, [r4, #0]
   d681a:	f3bf 8f5b 	dmb	ish
   d681e:	07db      	lsls	r3, r3, #31
   d6820:	d40e      	bmi.n	d6840 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6822:	4620      	mov	r0, r4
   d6824:	f7fd fc46 	bl	d40b4 <__cxa_guard_acquire>
   d6828:	b150      	cbz	r0, d6840 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d682a:	4807      	ldr	r0, [pc, #28]	; (d6848 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d682c:	f7ff ffc4 	bl	d67b8 <_ZN8particle14BleLocalDeviceC1Ev>
   d6830:	4620      	mov	r0, r4
   d6832:	f7fd fc44 	bl	d40be <__cxa_guard_release>
   d6836:	4a05      	ldr	r2, [pc, #20]	; (d684c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6838:	4905      	ldr	r1, [pc, #20]	; (d6850 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d683a:	4803      	ldr	r0, [pc, #12]	; (d6848 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d683c:	f001 fa6e 	bl	d7d1c <__aeabi_atexit>
    return instance;
}
   d6840:	4801      	ldr	r0, [pc, #4]	; (d6848 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6842:	bd10      	pop	{r4, pc}
   d6844:	2003e65c 	.word	0x2003e65c
   d6848:	2003e668 	.word	0x2003e668
   d684c:	2003e578 	.word	0x2003e578
   d6850:	000d6a29 	.word	0x000d6a29

000d6854 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6854:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d6856:	6803      	ldr	r3, [r0, #0]
   d6858:	3b09      	subs	r3, #9
   d685a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d685c:	b08d      	sub	sp, #52	; 0x34
   d685e:	4604      	mov	r4, r0
   d6860:	460d      	mov	r5, r1
    switch (event->type) {
   d6862:	d811      	bhi.n	d6888 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6864:	f7ff ffd6 	bl	d6814 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6868:	88a1      	ldrh	r1, [r4, #4]
   d686a:	6800      	ldr	r0, [r0, #0]
   d686c:	f7ff feb8 	bl	d65e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6870:	4603      	mov	r3, r0
   d6872:	b958      	cbnz	r0, d688c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6874:	2220      	movs	r2, #32
   d6876:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d687a:	4a0b      	ldr	r2, [pc, #44]	; (d68a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d687c:	9200      	str	r2, [sp, #0]
   d687e:	490b      	ldr	r1, [pc, #44]	; (d68ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d6880:	aa04      	add	r2, sp, #16
   d6882:	2032      	movs	r0, #50	; 0x32
   d6884:	f7ff f964 	bl	d5b50 <log_message>
}
   d6888:	b00d      	add	sp, #52	; 0x34
   d688a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d688c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d688e:	2a00      	cmp	r2, #0
   d6890:	d0fa      	beq.n	d6888 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d6892:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6896:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d689a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d689e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d68a0:	aa04      	add	r2, sp, #16
   d68a2:	a903      	add	r1, sp, #12
   d68a4:	47a0      	blx	r4
}
   d68a6:	e7ef      	b.n	d6888 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d68a8:	000d8d03 	.word	0x000d8d03
   d68ac:	000d8cdc 	.word	0x000d8cdc

000d68b0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d68b0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d68b2:	2000      	movs	r0, #0
   d68b4:	f7fe ff50 	bl	d5758 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d68b8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d68bc:	bd08      	pop	{r3, pc}

000d68be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d68be:	4608      	mov	r0, r1
   d68c0:	b911      	cbnz	r1, d68c8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d68c2:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d68c4:	f7fe bf50 	b.w	d5768 <hal_ble_gap_set_advertising_data>
   d68c8:	6a09      	ldr	r1, [r1, #32]
   d68ca:	2200      	movs	r2, #0
   d68cc:	e7fa      	b.n	d68c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d68ce <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d68ce:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d68d0:	4608      	mov	r0, r1
   d68d2:	b929      	cbnz	r1, d68e0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d68d4:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d68d6:	b003      	add	sp, #12
   d68d8:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d68dc:	f7fe bf4c 	b.w	d5778 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d68e0:	2101      	movs	r1, #1
   d68e2:	9001      	str	r0, [sp, #4]
   d68e4:	f7ff fe40 	bl	d6568 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d68e8:	9801      	ldr	r0, [sp, #4]
   d68ea:	2200      	movs	r2, #0
   d68ec:	6a01      	ldr	r1, [r0, #32]
   d68ee:	e7f2      	b.n	d68d6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d68f0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d68f0:	b538      	push	{r3, r4, r5, lr}
   d68f2:	4604      	mov	r4, r0
   d68f4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d68f6:	f7ff ffe2 	bl	d68be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d68fa:	2800      	cmp	r0, #0
   d68fc:	db0a      	blt.n	d6914 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d68fe:	4629      	mov	r1, r5
   d6900:	4620      	mov	r0, r4
   d6902:	f7ff ffe4 	bl	d68ce <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6906:	2800      	cmp	r0, #0
   d6908:	db04      	blt.n	d6914 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d690a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d690e:	2000      	movs	r0, #0
   d6910:	f7fe bf3a 	b.w	d5788 <hal_ble_gap_start_advertising>
}
   d6914:	bd38      	pop	{r3, r4, r5, pc}

000d6916 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d6916:	6803      	ldr	r3, [r0, #0]
   d6918:	69d8      	ldr	r0, [r3, #28]
}
   d691a:	2800      	cmp	r0, #0
   d691c:	bfd4      	ite	le
   d691e:	2000      	movle	r0, #0
   d6920:	2001      	movgt	r0, #1
   d6922:	4770      	bx	lr

000d6924 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6924:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6926:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6928:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d692a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d692c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d692e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6930:	f7fd fbaf 	bl	d4092 <_Znwj>
   d6934:	b118      	cbz	r0, d693e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6936:	682b      	ldr	r3, [r5, #0]
   d6938:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d693a:	686b      	ldr	r3, [r5, #4]
   d693c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d693e:	4b03      	ldr	r3, [pc, #12]	; (d694c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6940:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6942:	4b03      	ldr	r3, [pc, #12]	; (d6950 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6944:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6946:	60a3      	str	r3, [r4, #8]
      }
   d6948:	4620      	mov	r0, r4
   d694a:	bd38      	pop	{r3, r4, r5, pc}
   d694c:	000d6237 	.word	0x000d6237
   d6950:	000d61f9 	.word	0x000d61f9

000d6954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6954:	680b      	ldr	r3, [r1, #0]
   d6956:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6958:	b113      	cbz	r3, d6960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d695a:	685a      	ldr	r2, [r3, #4]
   d695c:	3201      	adds	r2, #1
   d695e:	605a      	str	r2, [r3, #4]
      }
   d6960:	4770      	bx	lr

000d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6962:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6964:	f851 3b04 	ldr.w	r3, [r1], #4
   d6968:	4604      	mov	r4, r0
   d696a:	f840 3b04 	str.w	r3, [r0], #4
   d696e:	f7ff fff1 	bl	d6954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6972:	6823      	ldr	r3, [r4, #0]
   d6974:	b90b      	cbnz	r3, d697a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6976:	f7ff fc37 	bl	d61e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d697a:	4620      	mov	r0, r4
   d697c:	bd10      	pop	{r4, pc}

000d697e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d697e:	b510      	push	{r4, lr}
   d6980:	f851 3b04 	ldr.w	r3, [r1], #4
   d6984:	4604      	mov	r4, r0
   d6986:	f840 3b04 	str.w	r3, [r0], #4
   d698a:	f7ff ffe3 	bl	d6954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d698e:	4620      	mov	r0, r4
   d6990:	bd10      	pop	{r4, pc}

000d6992 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6992:	b510      	push	{r4, lr}
   d6994:	f851 3b04 	ldr.w	r3, [r1], #4
   d6998:	4604      	mov	r4, r0
   d699a:	f840 3b04 	str.w	r3, [r0], #4
   d699e:	f7ff ffd9 	bl	d6954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d69a2:	4620      	mov	r0, r4
   d69a4:	bd10      	pop	{r4, pc}

000d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d69a6:	b510      	push	{r4, lr}
   d69a8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d69aa:	6800      	ldr	r0, [r0, #0]
   d69ac:	b128      	cbz	r0, d69ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d69ae:	6843      	ldr	r3, [r0, #4]
   d69b0:	3b01      	subs	r3, #1
   d69b2:	6043      	str	r3, [r0, #4]
   d69b4:	b90b      	cbnz	r3, d69ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d69b6:	f7ff fb8a 	bl	d60ce <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d69ba:	4620      	mov	r0, r4
   d69bc:	bd10      	pop	{r4, pc}

000d69be <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d69be:	b510      	push	{r4, lr}
   d69c0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d69c2:	3004      	adds	r0, #4
   d69c4:	f7ff ffef 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d69c8:	4620      	mov	r0, r4
   d69ca:	bd10      	pop	{r4, pc}

000d69cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d69ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d69d4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d69d8:	42ae      	cmp	r6, r5
   d69da:	d004      	beq.n	d69e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d69dc:	1d28      	adds	r0, r5, #4
   d69de:	f7ff ffe2 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69e2:	3508      	adds	r5, #8
   d69e4:	e7f8      	b.n	d69d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d69e6:	6820      	ldr	r0, [r4, #0]
   d69e8:	f7ff f956 	bl	d5c98 <free>
}
   d69ec:	4620      	mov	r0, r4
   d69ee:	bd70      	pop	{r4, r5, r6, pc}

000d69f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d69f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d69f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d69f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d69fc:	42ae      	cmp	r6, r5
   d69fe:	d004      	beq.n	d6a0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6a00:	1d28      	adds	r0, r5, #4
   d6a02:	f7ff ffd0 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a06:	3508      	adds	r5, #8
   d6a08:	e7f8      	b.n	d69fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6a0a:	6820      	ldr	r0, [r4, #0]
   d6a0c:	f7ff f944 	bl	d5c98 <free>
}
   d6a10:	4620      	mov	r0, r4
   d6a12:	bd70      	pop	{r4, r5, r6, pc}

000d6a14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6a14:	b510      	push	{r4, lr}
   d6a16:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6a18:	3024      	adds	r0, #36	; 0x24
   d6a1a:	f7ff ffe9 	bl	d69f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6a1e:	f104 0018 	add.w	r0, r4, #24
   d6a22:	f7ff ffd3 	bl	d69cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6a26:	bd10      	pop	{r4, pc}

000d6a28 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6a2a:	6804      	ldr	r4, [r0, #0]
   d6a2c:	4606      	mov	r6, r0
   d6a2e:	b324      	cbz	r4, d6a7a <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6a30:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6a34:	f7ff fc0b 	bl	d624e <_ZNSt14_Function_baseD1Ev>
   d6a38:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6a3c:	f7ff fc07 	bl	d624e <_ZNSt14_Function_baseD1Ev>
   d6a40:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6a44:	f7ff fc03 	bl	d624e <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6a48:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6a4c:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6a50:	42af      	cmp	r7, r5
   d6a52:	d004      	beq.n	d6a5e <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d6a54:	1d28      	adds	r0, r5, #4
   d6a56:	f7ff ffa6 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a5a:	3508      	adds	r5, #8
   d6a5c:	e7f8      	b.n	d6a50 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d6a5e:	69a0      	ldr	r0, [r4, #24]
   d6a60:	f7ff f91a 	bl	d5c98 <free>
    ~BleLocalDeviceImpl() = default;
   d6a64:	f104 000c 	add.w	r0, r4, #12
   d6a68:	f7ff ffc2 	bl	d69f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	f7ff ffad 	bl	d69cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6a72:	2154      	movs	r1, #84	; 0x54
   d6a74:	4620      	mov	r0, r4
   d6a76:	f001 f956 	bl	d7d26 <_ZdlPvj>
   d6a7a:	4630      	mov	r0, r6
   d6a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a7e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d6a7e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6a80:	b510      	push	{r4, lr}
      if (_M_empty())
   d6a82:	b90a      	cbnz	r2, d6a88 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6a84:	f001 f953 	bl	d7d2e <_ZSt25__throw_bad_function_callv>
    }
   d6a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a8c:	68c3      	ldr	r3, [r0, #12]
   d6a8e:	4718      	bx	r3

000d6a90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6a90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a94:	4604      	mov	r4, r0
   d6a96:	460d      	mov	r5, r1
   d6a98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6a9a:	d914      	bls.n	d6ac6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6a9c:	4290      	cmp	r0, r2
   d6a9e:	d213      	bcs.n	d6ac8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6aa0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6aa4:	1a75      	subs	r5, r6, r1
   d6aa6:	f1a1 0708 	sub.w	r7, r1, #8
   d6aaa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6aac:	42b7      	cmp	r7, r6
   d6aae:	d018      	beq.n	d6ae2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6ab0:	b11c      	cbz	r4, d6aba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6ab2:	4631      	mov	r1, r6
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	f7ff ff6c 	bl	d6992 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6aba:	1d30      	adds	r0, r6, #4
   d6abc:	f7ff ff73 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6ac0:	3e08      	subs	r6, #8
   d6ac2:	3c08      	subs	r4, #8
   d6ac4:	e7f2      	b.n	d6aac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6ac6:	d00c      	beq.n	d6ae2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6ac8:	42b5      	cmp	r5, r6
   d6aca:	d00a      	beq.n	d6ae2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6acc:	b11c      	cbz	r4, d6ad6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6ace:	4629      	mov	r1, r5
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	f7ff ff5e 	bl	d6992 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6ad6:	1d28      	adds	r0, r5, #4
   d6ad8:	f7ff ff65 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6adc:	3508      	adds	r5, #8
   d6ade:	3408      	adds	r4, #8
   d6ae0:	e7f2      	b.n	d6ac8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ae4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6ae8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6aec:	4605      	mov	r5, r0
   d6aee:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6af0:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6af4:	42a7      	cmp	r7, r4
   d6af6:	d103      	bne.n	d6b00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6af8:	2600      	movs	r6, #0
}
   d6afa:	4630      	mov	r0, r6
   d6afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6b00:	4641      	mov	r1, r8
   d6b02:	4620      	mov	r0, r4
   d6b04:	f7ff fe36 	bl	d6774 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6b08:	4606      	mov	r6, r0
   d6b0a:	b908      	cbnz	r0, d6b10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6b0c:	3408      	adds	r4, #8
   d6b0e:	e7f1      	b.n	d6af4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6b10:	2c00      	cmp	r4, #0
   d6b12:	d0f1      	beq.n	d6af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6b14:	1d20      	adds	r0, r4, #4
   d6b16:	f7ff ff46 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6b1a:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6b1e:	f104 0108 	add.w	r1, r4, #8
   d6b22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6b26:	4620      	mov	r0, r4
   d6b28:	f7ff ffb2 	bl	d6a90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6b2c:	686b      	ldr	r3, [r5, #4]
   d6b2e:	3b01      	subs	r3, #1
   d6b30:	606b      	str	r3, [r5, #4]
    return true;
   d6b32:	e7e2      	b.n	d6afa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6b34 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d6b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b36:	4607      	mov	r7, r0
   d6b38:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d6b3a:	4668      	mov	r0, sp
   d6b3c:	f7ff fbb0 	bl	d62a0 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6b40:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d6b42:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d6b46:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d6b4a:	42ac      	cmp	r4, r5
   d6b4c:	d02b      	beq.n	d6ba6 <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d6b4e:	2224      	movs	r2, #36	; 0x24
   d6b50:	2100      	movs	r1, #0
   d6b52:	a801      	add	r0, sp, #4
   d6b54:	f001 fa44 	bl	d7fe0 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d6b58:	6823      	ldr	r3, [r4, #0]
   d6b5a:	2200      	movs	r2, #0
   d6b5c:	8818      	ldrh	r0, [r3, #0]
   d6b5e:	a901      	add	r1, sp, #4
   d6b60:	f7fe fe4c 	bl	d57fc <hal_ble_gap_get_connection_info>
   d6b64:	4606      	mov	r6, r0
   d6b66:	b108      	cbz	r0, d6b6c <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d6b68:	3408      	adds	r4, #8
   d6b6a:	e7ee      	b.n	d6b4a <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d6b6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6b70:	2b01      	cmp	r3, #1
   d6b72:	d1f9      	bne.n	d6b68 <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d6b74:	4668      	mov	r0, sp
   d6b76:	f7ff facf 	bl	d6118 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d6b7a:	6823      	ldr	r3, [r4, #0]
   d6b7c:	4631      	mov	r1, r6
   d6b7e:	8818      	ldrh	r0, [r3, #0]
   d6b80:	f7fe fe0a 	bl	d5798 <hal_ble_gap_disconnect>
   d6b84:	1e05      	subs	r5, r0, #0
   d6b86:	db08      	blt.n	d6b9a <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d6b88:	4668      	mov	r0, sp
   d6b8a:	f7ff fab9 	bl	d6100 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d6b8e:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d6b90:	4621      	mov	r1, r4
   d6b92:	3018      	adds	r0, #24
   d6b94:	f7ff ffa6 	bl	d6ae4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d6b98:	4635      	mov	r5, r6
    WiringBleLock lk;
   d6b9a:	4668      	mov	r0, sp
   d6b9c:	f7ff fb88 	bl	d62b0 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d6ba0:	4628      	mov	r0, r5
   d6ba2:	b00b      	add	sp, #44	; 0x2c
   d6ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d6ba6:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d6baa:	e7f6      	b.n	d6b9a <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d6bac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6bae:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6bb0:	6846      	ldr	r6, [r0, #4]
   d6bb2:	4668      	mov	r0, sp
   d6bb4:	f7ff feed 	bl	d6992 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6bb8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6bbc:	429f      	cmp	r7, r3
   d6bbe:	db12      	blt.n	d6be6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6bc0:	3701      	adds	r7, #1
        if (n > 0) {
   d6bc2:	2f00      	cmp	r7, #0
   d6bc4:	dd29      	ble.n	d6c1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d6bc6:	00f8      	lsls	r0, r7, #3
   d6bc8:	f7ff f85e 	bl	d5c88 <malloc>
            if (!d) {
   d6bcc:	4605      	mov	r5, r0
   d6bce:	b1f0      	cbz	r0, d6c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6bd0:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6bd4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6bd8:	f7ff ff5a 	bl	d6a90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6bdc:	6820      	ldr	r0, [r4, #0]
   d6bde:	f7ff f85b 	bl	d5c98 <free>
        data_ = d;
   d6be2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6be4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d6be6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6be8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6bea:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6bee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6bf2:	4631      	mov	r1, r6
   d6bf4:	f106 0008 	add.w	r0, r6, #8
   d6bf8:	f7ff ff4a 	bl	d6a90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6bfc:	b11e      	cbz	r6, d6c06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6bfe:	4669      	mov	r1, sp
   d6c00:	4630      	mov	r0, r6
   d6c02:	f7ff fec6 	bl	d6992 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6c06:	6863      	ldr	r3, [r4, #4]
   d6c08:	3301      	adds	r3, #1
   d6c0a:	6063      	str	r3, [r4, #4]
    return true;
   d6c0c:	2501      	movs	r5, #1
   d6c0e:	a801      	add	r0, sp, #4
   d6c10:	f7ff fec9 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6c14:	4628      	mov	r0, r5
   d6c16:	b003      	add	sp, #12
   d6c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6c1a:	2500      	movs	r5, #0
   d6c1c:	e7de      	b.n	d6bdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6c20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c24:	4605      	mov	r5, r0
   d6c26:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6c28:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6c2a:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6c2c:	f7ff fb38 	bl	d62a0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6c30:	682e      	ldr	r6, [r5, #0]
   d6c32:	2e04      	cmp	r6, #4
   d6c34:	d06b      	beq.n	d6d0e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d6c36:	d807      	bhi.n	d6c48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6c38:	2e03      	cmp	r6, #3
   d6c3a:	d028      	beq.n	d6c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6c3c:	a803      	add	r0, sp, #12
   d6c3e:	f7ff fb37 	bl	d62b0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6c42:	b00e      	add	sp, #56	; 0x38
   d6c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6c48:	f1a6 030c 	sub.w	r3, r6, #12
   d6c4c:	2b03      	cmp	r3, #3
   d6c4e:	d8f5      	bhi.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6c50:	89a9      	ldrh	r1, [r5, #12]
   d6c52:	4620      	mov	r0, r4
   d6c54:	f7ff fcc4 	bl	d65e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6c58:	4607      	mov	r7, r0
   d6c5a:	2800      	cmp	r0, #0
   d6c5c:	d0ee      	beq.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6c5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6c60:	2b00      	cmp	r3, #0
   d6c62:	d0eb      	beq.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6c64:	2210      	movs	r2, #16
   d6c66:	2100      	movs	r1, #0
   d6c68:	a807      	add	r0, sp, #28
   d6c6a:	f001 f9b9 	bl	d7fe0 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6c6e:	2e0d      	cmp	r6, #13
                        };
   d6c70:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6c72:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6c76:	f040 8092 	bne.w	d6d9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6c7a:	686b      	ldr	r3, [r5, #4]
   d6c7c:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6c7e:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6c80:	9308      	str	r3, [sp, #32]
   d6c82:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6c84:	a906      	add	r1, sp, #24
   d6c86:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6c8a:	4798      	blx	r3
   d6c8c:	e7d6      	b.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6c8e:	a804      	add	r0, sp, #16
   d6c90:	f7ff fd3c 	bl	d670c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6c94:	9b04      	ldr	r3, [sp, #16]
   d6c96:	89aa      	ldrh	r2, [r5, #12]
   d6c98:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6c9a:	6869      	ldr	r1, [r5, #4]
   d6c9c:	9804      	ldr	r0, [sp, #16]
   d6c9e:	3108      	adds	r1, #8
   d6ca0:	3002      	adds	r0, #2
   d6ca2:	f7ff fb0d 	bl	d62c0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d6ca6:	a904      	add	r1, sp, #16
   d6ca8:	a806      	add	r0, sp, #24
   d6caa:	f7ff fe72 	bl	d6992 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6cae:	a906      	add	r1, sp, #24
   d6cb0:	f104 0018 	add.w	r0, r4, #24
   d6cb4:	f7ff ff7a 	bl	d6bac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6cb8:	4605      	mov	r5, r0
   d6cba:	a807      	add	r0, sp, #28
   d6cbc:	f7ff fe73 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cc0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6cc2:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6cc4:	b98d      	cbnz	r5, d6cea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6cc6:	4b3e      	ldr	r3, [pc, #248]	; (d6dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6cc8:	493e      	ldr	r1, [pc, #248]	; (d6dc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6cca:	9300      	str	r3, [sp, #0]
   d6ccc:	2032      	movs	r0, #50	; 0x32
   d6cce:	462b      	mov	r3, r5
   d6cd0:	aa06      	add	r2, sp, #24
   d6cd2:	9507      	str	r5, [sp, #28]
   d6cd4:	f7fe ff3c 	bl	d5b50 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6cd8:	9b04      	ldr	r3, [sp, #16]
   d6cda:	4629      	mov	r1, r5
   d6cdc:	8818      	ldrh	r0, [r3, #0]
   d6cde:	f7fe fd5b 	bl	d5798 <hal_ble_gap_disconnect>
   d6ce2:	a805      	add	r0, sp, #20
   d6ce4:	f7ff fe5f 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ce8:	e7a8      	b.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6cea:	4a37      	ldr	r2, [pc, #220]	; (d6dc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6cec:	9200      	str	r2, [sp, #0]
   d6cee:	2300      	movs	r3, #0
   d6cf0:	4934      	ldr	r1, [pc, #208]	; (d6dc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6cf2:	9307      	str	r3, [sp, #28]
   d6cf4:	aa06      	add	r2, sp, #24
   d6cf6:	2001      	movs	r0, #1
   d6cf8:	f7fe ff2a 	bl	d5b50 <log_message>
                if (impl->connectedCallback_) {
   d6cfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6cfe:	2b00      	cmp	r3, #0
   d6d00:	d0ef      	beq.n	d6ce2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d6d02:	a904      	add	r1, sp, #16
   d6d04:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6d08:	f7ff feb9 	bl	d6a7e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6d0c:	e7e9      	b.n	d6ce2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6d0e:	89a9      	ldrh	r1, [r5, #12]
   d6d10:	4620      	mov	r0, r4
   d6d12:	f7ff fc65 	bl	d65e0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6d16:	4606      	mov	r6, r0
   d6d18:	2800      	cmp	r0, #0
   d6d1a:	d08f      	beq.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6d1c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6d1e:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6d26:	802a      	strh	r2, [r5, #0]
   d6d28:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6d2c:	4299      	cmp	r1, r3
   d6d2e:	d003      	beq.n	d6d38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6d30:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6d34:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d6d36:	e7f9      	b.n	d6d2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6d38:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6d3c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6d40:	45b8      	cmp	r8, r7
   d6d42:	d004      	beq.n	d6d4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d6d44:	1d38      	adds	r0, r7, #4
   d6d46:	f7ff fe2e 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d4a:	3708      	adds	r7, #8
   d6d4c:	e7f8      	b.n	d6d40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6d4e:	2300      	movs	r3, #0
   d6d50:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d6d52:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d6d56:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6d5a:	45b8      	cmp	r8, r7
   d6d5c:	d004      	beq.n	d6d68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6d5e:	1d38      	adds	r0, r7, #4
   d6d60:	f7ff fe21 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d64:	3708      	adds	r7, #8
   d6d66:	e7f8      	b.n	d6d5a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d6d68:	2300      	movs	r3, #0
   d6d6a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d6d6c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d6d6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d70:	b123      	cbz	r3, d6d7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d6d72:	4631      	mov	r1, r6
   d6d74:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6d78:	f7ff fe81 	bl	d6a7e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6d7c:	2300      	movs	r3, #0
   d6d7e:	2220      	movs	r2, #32
   d6d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6d84:	4a11      	ldr	r2, [pc, #68]	; (d6dcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6d86:	9200      	str	r2, [sp, #0]
   d6d88:	490e      	ldr	r1, [pc, #56]	; (d6dc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6d8a:	aa06      	add	r2, sp, #24
   d6d8c:	2001      	movs	r0, #1
   d6d8e:	f7fe fedf 	bl	d5b50 <log_message>
                    impl->peers_.removeOne(*peer);
   d6d92:	4631      	mov	r1, r6
   d6d94:	f104 0018 	add.w	r0, r4, #24
   d6d98:	f7ff fea4 	bl	d6ae4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6d9c:	e74e      	b.n	d6c3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6d9e:	2e0f      	cmp	r6, #15
   d6da0:	f47f af6f 	bne.w	d6c82 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6da4:	686b      	ldr	r3, [r5, #4]
   d6da6:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6da8:	7a2b      	ldrb	r3, [r5, #8]
   d6daa:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6dae:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6db6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6dba:	2308      	movs	r3, #8
   d6dbc:	e760      	b.n	d6c80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6dbe:	bf00      	nop
   d6dc0:	000d8d1b 	.word	0x000d8d1b
   d6dc4:	000d8cdc 	.word	0x000d8cdc
   d6dc8:	000d8d41 	.word	0x000d8d41
   d6dcc:	000d8d5e 	.word	0x000d8d5e

000d6dd0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6dd0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6dd2:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6dd4:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6dd6:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6dda:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6dde:	6823      	ldr	r3, [r4, #0]
   d6de0:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6de2:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6de4:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d6de6:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d6de8:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d6dea:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d6dec:	f7ff fddb 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d6df0:	4620      	mov	r0, r4
   d6df2:	b002      	add	sp, #8
   d6df4:	bd10      	pop	{r4, pc}

000d6df6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6df6:	b513      	push	{r0, r1, r4, lr}
   d6df8:	460b      	mov	r3, r1
   d6dfa:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dfc:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6e00:	466c      	mov	r4, sp
   d6e02:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6e06:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6e0a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6e0e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6e12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6e16:	b002      	add	sp, #8
   d6e18:	bd10      	pop	{r4, pc}

000d6e1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d6e1a:	b538      	push	{r3, r4, r5, lr}
   d6e1c:	4605      	mov	r5, r0
   d6e1e:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d6e20:	f7ff ffe9 	bl	d6df6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e24:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6e26:	68a2      	ldr	r2, [r4, #8]
   d6e28:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e2a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e2c:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6e2e:	68e2      	ldr	r2, [r4, #12]
   d6e30:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e32:	60e3      	str	r3, [r4, #12]
      }
   d6e34:	bd38      	pop	{r3, r4, r5, pc}

000d6e36 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d6e36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6e38:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d6e3a:	4604      	mov	r4, r0
   d6e3c:	4608      	mov	r0, r1
	__x.swap(*this);
   d6e3e:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d6e40:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d6e42:	f7ff ffea 	bl	d6e1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d6e46:	4621      	mov	r1, r4
   d6e48:	4668      	mov	r0, sp
   d6e4a:	f7ff ffe6 	bl	d6e1a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d6e4e:	4668      	mov	r0, sp
   d6e50:	f7ff f9fd 	bl	d624e <_ZNSt14_Function_baseD1Ev>
      }
   d6e54:	4620      	mov	r0, r4
   d6e56:	b004      	add	sp, #16
   d6e58:	bd10      	pop	{r4, pc}

000d6e5a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d6e5a:	b570      	push	{r4, r5, r6, lr}
   d6e5c:	460e      	mov	r6, r1
   d6e5e:	b088      	sub	sp, #32
   d6e60:	4604      	mov	r4, r0
   d6e62:	9201      	str	r2, [sp, #4]
   d6e64:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d6e66:	f7ff fb9b 	bl	d65a0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d6e6a:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d6e6c:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d6e6e:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d6e70:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6e74:	f7ff f8b1 	bl	d5fda <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d6e78:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d6e7c:	b185      	cbz	r5, d6ea0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d6e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6e80:	9502      	str	r5, [sp, #8]
   d6e82:	a902      	add	r1, sp, #8
   d6e84:	a804      	add	r0, sp, #16
   d6e86:	9303      	str	r3, [sp, #12]
   d6e88:	f7ff fd4c 	bl	d6924 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d6e8c:	a904      	add	r1, sp, #16
   d6e8e:	4630      	mov	r0, r6
   d6e90:	f7ff ffd1 	bl	d6e36 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d6e94:	a804      	add	r0, sp, #16
   d6e96:	f7ff f9da 	bl	d624e <_ZNSt14_Function_baseD1Ev>
    }
   d6e9a:	4620      	mov	r0, r4
   d6e9c:	b008      	add	sp, #32
   d6e9e:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d6ea0:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d6ea2:	e7f3      	b.n	d6e8c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d6ea4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ea8:	b086      	sub	sp, #24
   d6eaa:	4607      	mov	r7, r0
   d6eac:	461d      	mov	r5, r3
   d6eae:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6eb0:	2300      	movs	r3, #0
   d6eb2:	4689      	mov	r9, r1
   d6eb4:	4692      	mov	sl, r2
   d6eb6:	9304      	str	r3, [sp, #16]
   d6eb8:	f7fd f8eb 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6ebc:	1e06      	subs	r6, r0, #0
   d6ebe:	f106 080c 	add.w	r8, r6, #12
   d6ec2:	d01d      	beq.n	d6f00 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d6ec4:	2301      	movs	r3, #1
	: _M_impl(__a)
   d6ec6:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d6ec8:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d6ecc:	4b15      	ldr	r3, [pc, #84]	; (d6f24 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d6ece:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d6ed2:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d6ed6:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d6eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6edc:	9300      	str	r3, [sp, #0]
   d6ede:	464a      	mov	r2, r9
   d6ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6ee2:	a903      	add	r1, sp, #12
   d6ee4:	4640      	mov	r0, r8
   d6ee6:	f7ff ffb8 	bl	d6e5a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d6eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6eee:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d6ef0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d6ef2:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d6ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ef6:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d6efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6efc:	682b      	ldr	r3, [r5, #0]
   d6efe:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d6f00:	a904      	add	r1, sp, #16
   d6f02:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d6f04:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d6f08:	f7ff ff62 	bl	d6dd0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d6f0c:	a805      	add	r0, sp, #20
   d6f0e:	f7ff fd4a 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d6f12:	6839      	ldr	r1, [r7, #0]
   d6f14:	b919      	cbnz	r1, d6f1e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d6f16:	4a04      	ldr	r2, [pc, #16]	; (d6f28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d6f18:	200a      	movs	r0, #10
   d6f1a:	f7fe fe11 	bl	d5b40 <panic_>
}
   d6f1e:	b006      	add	sp, #24
   d6f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f24:	000d8dd8 	.word	0x000d8dd8
   d6f28:	000d5739 	.word	0x000d5739

000d6f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6f2c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f30:	4604      	mov	r4, r0
   d6f32:	460d      	mov	r5, r1
   d6f34:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6f36:	d914      	bls.n	d6f62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6f38:	4290      	cmp	r0, r2
   d6f3a:	d213      	bcs.n	d6f64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6f3c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6f40:	1a75      	subs	r5, r6, r1
   d6f42:	f1a1 0708 	sub.w	r7, r1, #8
   d6f46:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6f48:	42b7      	cmp	r7, r6
   d6f4a:	d018      	beq.n	d6f7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6f4c:	b11c      	cbz	r4, d6f56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d6f4e:	4631      	mov	r1, r6
   d6f50:	4620      	mov	r0, r4
   d6f52:	f7ff fd14 	bl	d697e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6f56:	1d30      	adds	r0, r6, #4
   d6f58:	f7ff fd25 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6f5c:	3e08      	subs	r6, #8
   d6f5e:	3c08      	subs	r4, #8
   d6f60:	e7f2      	b.n	d6f48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6f62:	d00c      	beq.n	d6f7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6f64:	42b5      	cmp	r5, r6
   d6f66:	d00a      	beq.n	d6f7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6f68:	b11c      	cbz	r4, d6f72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6f6a:	4629      	mov	r1, r5
   d6f6c:	4620      	mov	r0, r4
   d6f6e:	f7ff fd06 	bl	d697e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6f72:	1d28      	adds	r0, r5, #4
   d6f74:	f7ff fd17 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6f78:	3508      	adds	r5, #8
   d6f7a:	3408      	adds	r4, #8
   d6f7c:	e7f2      	b.n	d6f64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6f80:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6f82:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6f84:	4605      	mov	r5, r0
        if (n > 0) {
   d6f86:	dd11      	ble.n	d6fac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6f88:	00f0      	lsls	r0, r6, #3
   d6f8a:	f7fe fe7d 	bl	d5c88 <malloc>
            if (!d) {
   d6f8e:	4604      	mov	r4, r0
   d6f90:	b158      	cbz	r0, d6faa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6f92:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6f96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6f9a:	f7ff ffc7 	bl	d6f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6f9e:	6828      	ldr	r0, [r5, #0]
   d6fa0:	f7fe fe7a 	bl	d5c98 <free>
        data_ = d;
   d6fa4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6fa6:	60ae      	str	r6, [r5, #8]
        return true;
   d6fa8:	2001      	movs	r0, #1
    }
   d6faa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6fac:	2400      	movs	r4, #0
   d6fae:	e7f6      	b.n	d6f9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6fb2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6fb4:	6845      	ldr	r5, [r0, #4]
   d6fb6:	4668      	mov	r0, sp
   d6fb8:	f7ff fce1 	bl	d697e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6fbc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6fc0:	4299      	cmp	r1, r3
   d6fc2:	da10      	bge.n	d6fe6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6fc4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6fc6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6fc8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6fcc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6fd0:	4629      	mov	r1, r5
   d6fd2:	f105 0008 	add.w	r0, r5, #8
   d6fd6:	f7ff ffa9 	bl	d6f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6fda:	b98d      	cbnz	r5, d7000 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6fdc:	6863      	ldr	r3, [r4, #4]
   d6fde:	3301      	adds	r3, #1
   d6fe0:	6063      	str	r3, [r4, #4]
    return true;
   d6fe2:	2601      	movs	r6, #1
   d6fe4:	e006      	b.n	d6ff4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6fe6:	3101      	adds	r1, #1
   d6fe8:	4620      	mov	r0, r4
   d6fea:	f7ff ffc9 	bl	d6f80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6fee:	4606      	mov	r6, r0
   d6ff0:	2800      	cmp	r0, #0
   d6ff2:	d1e7      	bne.n	d6fc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6ff4:	a801      	add	r0, sp, #4
   d6ff6:	f7ff fcd6 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6ffa:	4630      	mov	r0, r6
   d6ffc:	b002      	add	sp, #8
   d6ffe:	bd70      	pop	{r4, r5, r6, pc}
   d7000:	4669      	mov	r1, sp
   d7002:	4628      	mov	r0, r5
   d7004:	f7ff fcbb 	bl	d697e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7008:	e7e8      	b.n	d6fdc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d700a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d700a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d700e:	4604      	mov	r4, r0
   d7010:	460d      	mov	r5, r1
   d7012:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7014:	d914      	bls.n	d7040 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7016:	4290      	cmp	r0, r2
   d7018:	d213      	bcs.n	d7042 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d701a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d701e:	1a75      	subs	r5, r6, r1
   d7020:	f1a1 0708 	sub.w	r7, r1, #8
   d7024:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7026:	42b7      	cmp	r7, r6
   d7028:	d018      	beq.n	d705c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d702a:	b11c      	cbz	r4, d7034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d702c:	4631      	mov	r1, r6
   d702e:	4620      	mov	r0, r4
   d7030:	f7ff fc97 	bl	d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7034:	1d30      	adds	r0, r6, #4
   d7036:	f7ff fcb6 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d703a:	3e08      	subs	r6, #8
   d703c:	3c08      	subs	r4, #8
   d703e:	e7f2      	b.n	d7026 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7040:	d00c      	beq.n	d705c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7042:	42b5      	cmp	r5, r6
   d7044:	d00a      	beq.n	d705c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7046:	b11c      	cbz	r4, d7050 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7048:	4629      	mov	r1, r5
   d704a:	4620      	mov	r0, r4
   d704c:	f7ff fc89 	bl	d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7050:	1d28      	adds	r0, r5, #4
   d7052:	f7ff fca8 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7056:	3508      	adds	r5, #8
   d7058:	3408      	adds	r4, #8
   d705a:	e7f2      	b.n	d7042 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d705c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d705e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d705e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7060:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7062:	4605      	mov	r5, r0
        if (n > 0) {
   d7064:	dd11      	ble.n	d708a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7066:	00f0      	lsls	r0, r6, #3
   d7068:	f7fe fe0e 	bl	d5c88 <malloc>
            if (!d) {
   d706c:	4604      	mov	r4, r0
   d706e:	b158      	cbz	r0, d7088 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7070:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7074:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7078:	f7ff ffc7 	bl	d700a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d707c:	6828      	ldr	r0, [r5, #0]
   d707e:	f7fe fe0b 	bl	d5c98 <free>
        data_ = d;
   d7082:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7084:	60ae      	str	r6, [r5, #8]
        return true;
   d7086:	2001      	movs	r0, #1
    }
   d7088:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d708a:	2400      	movs	r4, #0
   d708c:	e7f6      	b.n	d707c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d708e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d708e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7090:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7092:	6845      	ldr	r5, [r0, #4]
   d7094:	4668      	mov	r0, sp
   d7096:	f7ff fc64 	bl	d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d709a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d709e:	4299      	cmp	r1, r3
   d70a0:	da10      	bge.n	d70c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d70a2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d70a4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d70a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d70aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d70ae:	4629      	mov	r1, r5
   d70b0:	f105 0008 	add.w	r0, r5, #8
   d70b4:	f7ff ffa9 	bl	d700a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d70b8:	b98d      	cbnz	r5, d70de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d70ba:	6863      	ldr	r3, [r4, #4]
   d70bc:	3301      	adds	r3, #1
   d70be:	6063      	str	r3, [r4, #4]
    return true;
   d70c0:	2601      	movs	r6, #1
   d70c2:	e006      	b.n	d70d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d70c4:	3101      	adds	r1, #1
   d70c6:	4620      	mov	r0, r4
   d70c8:	f7ff ffc9 	bl	d705e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d70cc:	4606      	mov	r6, r0
   d70ce:	2800      	cmp	r0, #0
   d70d0:	d1e7      	bne.n	d70a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d70d2:	a801      	add	r0, sp, #4
   d70d4:	f7ff fc67 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70d8:	4630      	mov	r0, r6
   d70da:	b002      	add	sp, #8
   d70dc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d70de:	4669      	mov	r1, sp
   d70e0:	4628      	mov	r0, r5
   d70e2:	f7ff fc3e 	bl	d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d70e6:	e7e8      	b.n	d70ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d70e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d70e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d70ec:	4617      	mov	r7, r2
   d70ee:	b0a1      	sub	sp, #132	; 0x84
   d70f0:	4680      	mov	r8, r0
    WiringBleLock lk;
   d70f2:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d70f4:	460e      	mov	r6, r1
    WiringBleLock lk;
   d70f6:	f7ff f8d3 	bl	d62a0 <_ZN8particle3ble13WiringBleLockC1Ev>
   d70fa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d70fc:	7923      	ldrb	r3, [r4, #4]
   d70fe:	b953      	cbnz	r3, d7116 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7100:	4639      	mov	r1, r7
   d7102:	4640      	mov	r0, r8
   d7104:	f7ff fc2d 	bl	d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7108:	a80a      	add	r0, sp, #40	; 0x28
   d710a:	f7ff f8d1 	bl	d62b0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d710e:	4640      	mov	r0, r8
   d7110:	b021      	add	sp, #132	; 0x84
   d7112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7116:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7118:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d711c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7120:	9303      	str	r3, [sp, #12]
   d7122:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d7126:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d712a:	9b03      	ldr	r3, [sp, #12]
   d712c:	429d      	cmp	r5, r3
   d712e:	d021      	beq.n	d7174 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7130:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d7134:	4658      	mov	r0, fp
   d7136:	f109 0114 	add.w	r1, r9, #20
   d713a:	f7ff f96a 	bl	d6412 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d713e:	b1b8      	cbz	r0, d7170 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d7140:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d7144:	4650      	mov	r0, sl
   d7146:	f7ff f964 	bl	d6412 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d714a:	b188      	cbz	r0, d7170 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d714c:	6823      	ldr	r3, [r4, #0]
   d714e:	f8d9 2000 	ldr.w	r2, [r9]
   d7152:	4053      	eors	r3, r2
   d7154:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d7158:	d10a      	bne.n	d7170 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d715a:	2220      	movs	r2, #32
   d715c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7160:	4a5e      	ldr	r2, [pc, #376]	; (d72dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d7162:	9200      	str	r2, [sp, #0]
   d7164:	aa15      	add	r2, sp, #84	; 0x54
   d7166:	495e      	ldr	r1, [pc, #376]	; (d72e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d7168:	2032      	movs	r0, #50	; 0x32
   d716a:	f7fe fcf1 	bl	d5b50 <log_message>
   d716e:	e7c7      	b.n	d7100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7170:	3508      	adds	r5, #8
   d7172:	e7da      	b.n	d712a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d7174:	4650      	mov	r0, sl
   d7176:	f7ff f917 	bl	d63a8 <_ZNK8particle7BleUuid7isValidEv>
   d717a:	b960      	cbnz	r0, d7196 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d717c:	4959      	ldr	r1, [pc, #356]	; (d72e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d717e:	2201      	movs	r2, #1
   d7180:	a815      	add	r0, sp, #84	; 0x54
   d7182:	ad15      	add	r5, sp, #84	; 0x54
   d7184:	f7ff f8e7 	bl	d6356 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d718a:	46d4      	mov	ip, sl
   d718c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7190:	682b      	ldr	r3, [r5, #0]
   d7192:	f8cc 3000 	str.w	r3, [ip]
   d7196:	6833      	ldr	r3, [r6, #0]
   d7198:	e9d3 5300 	ldrd	r5, r3, [r3]
   d719c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d71a0:	455d      	cmp	r5, fp
   d71a2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d71a4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d71a6:	d06e      	beq.n	d7286 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d71a8:	f855 0b08 	ldr.w	r0, [r5], #8
   d71ac:	f7ff f931 	bl	d6412 <_ZNK8particle7BleUuideqERKS0_>
   d71b0:	2800      	cmp	r0, #0
   d71b2:	d0f5      	beq.n	d71a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d71b4:	f104 0a14 	add.w	sl, r4, #20
   d71b8:	4650      	mov	r0, sl
   d71ba:	f7ff f8f5 	bl	d63a8 <_ZNK8particle7BleUuid7isValidEv>
   d71be:	b988      	cbnz	r0, d71e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d71c0:	4b49      	ldr	r3, [pc, #292]	; (d72e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d71c2:	4948      	ldr	r1, [pc, #288]	; (d72e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d71c4:	881a      	ldrh	r2, [r3, #0]
   d71c6:	3201      	adds	r2, #1
   d71c8:	b292      	uxth	r2, r2
   d71ca:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d71cc:	a815      	add	r0, sp, #84	; 0x54
   d71ce:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d71d0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d71d2:	f7ff f8df 	bl	d6394 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d71d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71d8:	46d4      	mov	ip, sl
   d71da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d71de:	682b      	ldr	r3, [r5, #0]
   d71e0:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d71e4:	2228      	movs	r2, #40	; 0x28
   d71e6:	2100      	movs	r1, #0
   d71e8:	a816      	add	r0, sp, #88	; 0x58
   d71ea:	f000 fef9 	bl	d7fe0 <memset>
    charInit.version = BLE_API_VERSION;
   d71ee:	4b3f      	ldr	r3, [pc, #252]	; (d72ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d71f0:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d71f2:	4651      	mov	r1, sl
   d71f4:	a804      	add	r0, sp, #16
   d71f6:	f7ff f8e9 	bl	d63cc <_ZN8particle7BleUuid7halUUIDEv>
   d71fa:	ab04      	add	r3, sp, #16
   d71fc:	aa18      	add	r2, sp, #96	; 0x60
   d71fe:	f10d 0c20 	add.w	ip, sp, #32
   d7202:	6818      	ldr	r0, [r3, #0]
   d7204:	6859      	ldr	r1, [r3, #4]
   d7206:	4615      	mov	r5, r2
   d7208:	c503      	stmia	r5!, {r0, r1}
   d720a:	3308      	adds	r3, #8
   d720c:	4563      	cmp	r3, ip
   d720e:	462a      	mov	r2, r5
   d7210:	d1f7      	bne.n	d7202 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d7212:	6818      	ldr	r0, [r3, #0]
   d7214:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d7216:	7923      	ldrb	r3, [r4, #4]
   d7218:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d721c:	f8d9 3000 	ldr.w	r3, [r9]
   d7220:	8a9b      	ldrh	r3, [r3, #20]
   d7222:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d7226:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7228:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d722a:	4b31      	ldr	r3, [pc, #196]	; (d72f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d722c:	2200      	movs	r2, #0
   d722e:	1da1      	adds	r1, r4, #6
   d7230:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d7232:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7236:	f7fe faeb 	bl	d5810 <hal_ble_gatt_server_add_characteristic>
   d723a:	2800      	cmp	r0, #0
   d723c:	f47f af60 	bne.w	d7100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d7240:	2301      	movs	r3, #1
   d7242:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d7244:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d7246:	4639      	mov	r1, r7
        return characteristics_;
   d7248:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d724a:	a80d      	add	r0, sp, #52	; 0x34
   d724c:	f7ff fb89 	bl	d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7250:	4620      	mov	r0, r4
   d7252:	a90d      	add	r1, sp, #52	; 0x34
   d7254:	f7ff ff1b 	bl	d708e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d7258:	4604      	mov	r4, r0
   d725a:	a80e      	add	r0, sp, #56	; 0x38
   d725c:	f7ff fba3 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7260:	2c00      	cmp	r4, #0
   d7262:	f47f af4d 	bne.w	d7100 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d7266:	2320      	movs	r3, #32
   d7268:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d726c:	4b21      	ldr	r3, [pc, #132]	; (d72f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d726e:	9300      	str	r3, [sp, #0]
   d7270:	aa0d      	add	r2, sp, #52	; 0x34
   d7272:	4623      	mov	r3, r4
   d7274:	e777      	b.n	d7166 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d7276:	4639      	mov	r1, r7
   d7278:	4640      	mov	r0, r8
   d727a:	f7ff fb72 	bl	d6962 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d727e:	a80c      	add	r0, sp, #48	; 0x30
   d7280:	f7ff fb91 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7284:	e740      	b.n	d7108 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d7286:	a80b      	add	r0, sp, #44	; 0x2c
   d7288:	f7ff fa1c 	bl	d66c4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d728c:	4651      	mov	r1, sl
   d728e:	a815      	add	r0, sp, #84	; 0x54
   d7290:	f7ff f89c 	bl	d63cc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d7294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7296:	2300      	movs	r3, #0
   d7298:	3214      	adds	r2, #20
   d729a:	a915      	add	r1, sp, #84	; 0x54
   d729c:	2001      	movs	r0, #1
   d729e:	f7fe fa85 	bl	d57ac <hal_ble_gatt_server_add_service>
   d72a2:	2800      	cmp	r0, #0
   d72a4:	d1e7      	bne.n	d7276 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d72a6:	6835      	ldr	r5, [r6, #0]
   d72a8:	a90b      	add	r1, sp, #44	; 0x2c
   d72aa:	a80d      	add	r0, sp, #52	; 0x34
   d72ac:	f7ff fb67 	bl	d697e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d72b0:	4628      	mov	r0, r5
   d72b2:	a90d      	add	r1, sp, #52	; 0x34
   d72b4:	f7ff fe7c 	bl	d6fb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d72b8:	4605      	mov	r5, r0
   d72ba:	a80e      	add	r0, sp, #56	; 0x38
   d72bc:	f7ff fb73 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d72c0:	2d00      	cmp	r5, #0
   d72c2:	d0d8      	beq.n	d7276 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d72c4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d72c6:	6853      	ldr	r3, [r2, #4]
   d72c8:	6812      	ldr	r2, [r2, #0]
   d72ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d72ce:	3b01      	subs	r3, #1
   d72d0:	a80c      	add	r0, sp, #48	; 0x30
   d72d2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d72d6:	f7ff fb66 	bl	d69a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d72da:	e76b      	b.n	d71b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d72dc:	000d8d7d 	.word	0x000d8d7d
   d72e0:	000d8cdc 	.word	0x000d8cdc
   d72e4:	000d8e3c 	.word	0x000d8e3c
   d72e8:	2003e660 	.word	0x2003e660
   d72ec:	002c0001 	.word	0x002c0001
   d72f0:	000d6855 	.word	0x000d6855
   d72f4:	000d8da8 	.word	0x000d8da8

000d72f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d72f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d72fa:	4c06      	ldr	r4, [pc, #24]	; (d7314 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d72fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d72fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7300:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7302:	f7fe fabd 	bl	d5880 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d7306:	4620      	mov	r0, r4
   d7308:	4a03      	ldr	r2, [pc, #12]	; (d7318 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d730a:	4904      	ldr	r1, [pc, #16]	; (d731c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d730c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7310:	f000 bd04 	b.w	d7d1c <__aeabi_atexit>
   d7314:	2003e664 	.word	0x2003e664
   d7318:	2003e578 	.word	0x2003e578
   d731c:	000d60ef 	.word	0x000d60ef

000d7320 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7322:	4606      	mov	r6, r0
   d7324:	460d      	mov	r5, r1
  size_t n = 0;
   d7326:	188f      	adds	r7, r1, r2
   d7328:	2400      	movs	r4, #0
  while (size--) {
   d732a:	42bd      	cmp	r5, r7
   d732c:	d00c      	beq.n	d7348 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d732e:	6833      	ldr	r3, [r6, #0]
   d7330:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7334:	689b      	ldr	r3, [r3, #8]
   d7336:	4630      	mov	r0, r6
   d7338:	4798      	blx	r3
     if (chunk>=0)
   d733a:	1e03      	subs	r3, r0, #0
   d733c:	db01      	blt.n	d7342 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d733e:	441c      	add	r4, r3
  while (size--) {
   d7340:	e7f3      	b.n	d732a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7342:	2c00      	cmp	r4, #0
   d7344:	bf08      	it	eq
   d7346:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7348:	4620      	mov	r0, r4
   d734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d734c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d734c:	b513      	push	{r0, r1, r4, lr}
   d734e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7350:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7352:	b159      	cbz	r1, d736c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7354:	9101      	str	r1, [sp, #4]
   d7356:	f000 fe79 	bl	d804c <strlen>
   d735a:	6823      	ldr	r3, [r4, #0]
   d735c:	9901      	ldr	r1, [sp, #4]
   d735e:	68db      	ldr	r3, [r3, #12]
   d7360:	4602      	mov	r2, r0
   d7362:	4620      	mov	r0, r4
    }
   d7364:	b002      	add	sp, #8
   d7366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d736a:	4718      	bx	r3
    }
   d736c:	b002      	add	sp, #8
   d736e:	bd10      	pop	{r4, pc}

000d7370 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7370:	b508      	push	{r3, lr}
  return write(str);
   d7372:	f7ff ffeb 	bl	d734c <_ZN5Print5writeEPKc>
}
   d7376:	bd08      	pop	{r3, pc}

000d7378 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7378:	6803      	ldr	r3, [r0, #0]
   d737a:	689b      	ldr	r3, [r3, #8]
   d737c:	4718      	bx	r3

000d737e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d737e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7380:	210d      	movs	r1, #13
{
   d7382:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7384:	f7ff fff8 	bl	d7378 <_ZN5Print5printEc>
  n += print('\n');
   d7388:	210a      	movs	r1, #10
  size_t n = print('\r');
   d738a:	4604      	mov	r4, r0
  n += print('\n');
   d738c:	4628      	mov	r0, r5
   d738e:	f7ff fff3 	bl	d7378 <_ZN5Print5printEc>
  return n;
}
   d7392:	4420      	add	r0, r4
   d7394:	bd38      	pop	{r3, r4, r5, pc}

000d7396 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7396:	b538      	push	{r3, r4, r5, lr}
   d7398:	4605      	mov	r5, r0
  return write(str);
   d739a:	f7ff ffd7 	bl	d734c <_ZN5Print5writeEPKc>
   d739e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d73a0:	4628      	mov	r0, r5
   d73a2:	f7ff ffec 	bl	d737e <_ZN5Print7printlnEv>
  return n;
}
   d73a6:	4420      	add	r0, r4
   d73a8:	bd38      	pop	{r3, r4, r5, pc}

000d73aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d73aa:	b530      	push	{r4, r5, lr}
   d73ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d73ae:	2300      	movs	r3, #0
   d73b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d73b4:	2a01      	cmp	r2, #1
   d73b6:	bf98      	it	ls
   d73b8:	220a      	movls	r2, #10
   d73ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d73bc:	460d      	mov	r5, r1
   d73be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d73c2:	fb01 5312 	mls	r3, r1, r2, r5
   d73c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d73ca:	2b09      	cmp	r3, #9
   d73cc:	bf94      	ite	ls
   d73ce:	3330      	addls	r3, #48	; 0x30
   d73d0:	3337      	addhi	r3, #55	; 0x37
   d73d2:	b2db      	uxtb	r3, r3
  } while(n);
   d73d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d73d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d73da:	d9ef      	bls.n	d73bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d73dc:	4621      	mov	r1, r4
   d73de:	f7ff ffb5 	bl	d734c <_ZN5Print5writeEPKc>
}
   d73e2:	b00b      	add	sp, #44	; 0x2c
   d73e4:	bd30      	pop	{r4, r5, pc}

000d73e6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d73e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d73ea:	b086      	sub	sp, #24
   d73ec:	af00      	add	r7, sp, #0
   d73ee:	4605      	mov	r5, r0
   d73f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d73f2:	1d38      	adds	r0, r7, #4
   d73f4:	2114      	movs	r1, #20
{
   d73f6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d73f8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d73fa:	f7fe fc5d 	bl	d5cb8 <vsnprintf>

    if (n<bufsize)
   d73fe:	2813      	cmp	r0, #19
   d7400:	d80e      	bhi.n	d7420 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7402:	1d39      	adds	r1, r7, #4
   d7404:	4628      	mov	r0, r5
   d7406:	f7ff ffa1 	bl	d734c <_ZN5Print5writeEPKc>
   d740a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d740c:	b11e      	cbz	r6, d7416 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d740e:	4628      	mov	r0, r5
   d7410:	f7ff ffb5 	bl	d737e <_ZN5Print7printlnEv>
   d7414:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7416:	4620      	mov	r0, r4
   d7418:	3718      	adds	r7, #24
   d741a:	46bd      	mov	sp, r7
   d741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7420:	f100 0308 	add.w	r3, r0, #8
   d7424:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7428:	46e8      	mov	r8, sp
        char bigger[n+1];
   d742a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d742e:	4622      	mov	r2, r4
   d7430:	1c41      	adds	r1, r0, #1
   d7432:	683b      	ldr	r3, [r7, #0]
   d7434:	4668      	mov	r0, sp
   d7436:	f7fe fc3f 	bl	d5cb8 <vsnprintf>
  return write(str);
   d743a:	4669      	mov	r1, sp
   d743c:	4628      	mov	r0, r5
   d743e:	f7ff ff85 	bl	d734c <_ZN5Print5writeEPKc>
   d7442:	4604      	mov	r4, r0
   d7444:	46c5      	mov	sp, r8
   d7446:	e7e1      	b.n	d740c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7448 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7448:	2300      	movs	r3, #0
   d744a:	6840      	ldr	r0, [r0, #4]
   d744c:	461a      	mov	r2, r3
   d744e:	4619      	mov	r1, r3
   d7450:	f7fe bbd2 	b.w	d5bf8 <network_on>

000d7454 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7454:	4b01      	ldr	r3, [pc, #4]	; (d745c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7456:	4a02      	ldr	r2, [pc, #8]	; (d7460 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7458:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d745a:	4770      	bx	lr
   d745c:	2003e66c 	.word	0x2003e66c
   d7460:	000d8e5c 	.word	0x000d8e5c

000d7464 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7464:	4b02      	ldr	r3, [pc, #8]	; (d7470 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7466:	681a      	ldr	r2, [r3, #0]
   d7468:	4b02      	ldr	r3, [pc, #8]	; (d7474 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d746a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d746c:	4770      	bx	lr
   d746e:	bf00      	nop
   d7470:	2003e510 	.word	0x2003e510
   d7474:	2003e670 	.word	0x2003e670

000d7478 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7478:	2100      	movs	r1, #0
   d747a:	f7fe bb79 	b.w	d5b70 <system_delay_ms>

000d747e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d747e:	b510      	push	{r4, lr}
   d7480:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d7482:	f7fe fee4 	bl	d624e <_ZNSt14_Function_baseD1Ev>
   d7486:	4620      	mov	r0, r4
   d7488:	bd10      	pop	{r4, pc}

000d748a <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d748a:	b510      	push	{r4, lr}
   d748c:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   d748e:	f7fe fb47 	bl	d5b20 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   d7492:	4284      	cmp	r4, r0
   d7494:	d008      	beq.n	d74a8 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7496:	b11c      	cbz	r4, d74a0 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d7498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   d749c:	f7fe bb28 	b.w	d5af0 <LED_Signaling_Start>
}
   d74a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   d74a4:	f7fe bb2c 	b.w	d5b00 <LED_Signaling_Stop>
}
   d74a8:	bd10      	pop	{r4, pc}

000d74aa <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d74aa:	b570      	push	{r4, r5, r6, lr}
   d74ac:	4605      	mov	r5, r0
   d74ae:	460e      	mov	r6, r1
   d74b0:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   d74b2:	f7fe fb35 	bl	d5b20 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   d74b6:	b150      	cbz	r0, d74ce <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d74b8:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d74bc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d74c0:	f7fe fb0e 	bl	d5ae0 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   d74c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   d74c8:	20e7      	movs	r0, #231	; 0xe7
   d74ca:	f7fe bb31 	b.w	d5b30 <LED_On>
}
   d74ce:	bd70      	pop	{r4, r5, r6, pc}

000d74d0 <_ZN8RGBClass10brightnessEhb>:

void RGBClass::brightness(uint8_t brightness, bool update)
{
   d74d0:	b510      	push	{r4, lr}
   d74d2:	460c      	mov	r4, r1
    LED_SetBrightness(brightness);
   d74d4:	f7fe fb1c 	bl	d5b10 <LED_SetBrightness>
    return LED_RGB_IsOverRidden();
   d74d8:	f7fe fb22 	bl	d5b20 <LED_RGB_IsOverRidden>
    if (controlled() && update) {
   d74dc:	b128      	cbz	r0, d74ea <_ZN8RGBClass10brightnessEhb+0x1a>
   d74de:	b124      	cbz	r4, d74ea <_ZN8RGBClass10brightnessEhb+0x1a>
        LED_On(PARTICLE_LED_RGB);
    }
}
   d74e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_On(PARTICLE_LED_RGB);
   d74e4:	20e7      	movs	r0, #231	; 0xe7
   d74e6:	f7fe bb23 	b.w	d5b30 <LED_On>
}
   d74ea:	bd10      	pop	{r4, pc}

000d74ec <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d74ec:	4803      	ldr	r0, [pc, #12]	; (d74fc <_GLOBAL__sub_I_RGB+0x10>)
RGBClass RGB;
   d74ee:	4a04      	ldr	r2, [pc, #16]	; (d7500 <_GLOBAL__sub_I_RGB+0x14>)
   d74f0:	4904      	ldr	r1, [pc, #16]	; (d7504 <_GLOBAL__sub_I_RGB+0x18>)
   d74f2:	2300      	movs	r3, #0
   d74f4:	6083      	str	r3, [r0, #8]
   d74f6:	f000 bc11 	b.w	d7d1c <__aeabi_atexit>
   d74fa:	bf00      	nop
   d74fc:	2003e674 	.word	0x2003e674
   d7500:	2003e578 	.word	0x2003e578
   d7504:	000d747f 	.word	0x000d747f

000d7508 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7508:	4b01      	ldr	r3, [pc, #4]	; (d7510 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d750a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d750c:	4770      	bx	lr
   d750e:	bf00      	nop
   d7510:	2003e514 	.word	0x2003e514

000d7514 <serialEventRun>:
{
   d7514:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7516:	4b0b      	ldr	r3, [pc, #44]	; (d7544 <serialEventRun+0x30>)
   d7518:	b143      	cbz	r3, d752c <serialEventRun+0x18>
   d751a:	f000 f957 	bl	d77cc <_Z16_fetch_usbserialv>
   d751e:	6803      	ldr	r3, [r0, #0]
   d7520:	691b      	ldr	r3, [r3, #16]
   d7522:	4798      	blx	r3
   d7524:	2800      	cmp	r0, #0
   d7526:	dd01      	ble.n	d752c <serialEventRun+0x18>
        serialEvent();
   d7528:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d752c:	4b06      	ldr	r3, [pc, #24]	; (d7548 <serialEventRun+0x34>)
   d752e:	b143      	cbz	r3, d7542 <serialEventRun+0x2e>
   d7530:	f000 f9ca 	bl	d78c8 <_Z22__fetch_global_Serial1v>
   d7534:	6803      	ldr	r3, [r0, #0]
   d7536:	691b      	ldr	r3, [r3, #16]
   d7538:	4798      	blx	r3
   d753a:	2800      	cmp	r0, #0
   d753c:	dd01      	ble.n	d7542 <serialEventRun+0x2e>
        serialEvent1();
   d753e:	f3af 8000 	nop.w
}
   d7542:	bd08      	pop	{r3, pc}
	...

000d754c <_post_loop>:
{
   d754c:	b508      	push	{r3, lr}
	serialEventRun();
   d754e:	f7ff ffe1 	bl	d7514 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7552:	f7fe f8f9 	bl	d5748 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7556:	4b01      	ldr	r3, [pc, #4]	; (d755c <_post_loop+0x10>)
   d7558:	6018      	str	r0, [r3, #0]
}
   d755a:	bd08      	pop	{r3, pc}
   d755c:	2003e7d4 	.word	0x2003e7d4

000d7560 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7560:	4802      	ldr	r0, [pc, #8]	; (d756c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7562:	4a03      	ldr	r2, [pc, #12]	; (d7570 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7564:	4903      	ldr	r1, [pc, #12]	; (d7574 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7566:	1a12      	subs	r2, r2, r0
   d7568:	f000 bd12 	b.w	d7f90 <memcpy>
   d756c:	2003f400 	.word	0x2003f400
   d7570:	2003f404 	.word	0x2003f404
   d7574:	000d90b0 	.word	0x000d90b0

000d7578 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7578:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d757a:	2300      	movs	r3, #0
   d757c:	9300      	str	r3, [sp, #0]
   d757e:	461a      	mov	r2, r3
   d7580:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7584:	f7fe fb0e 	bl	d5ba4 <system_ctrl_set_result>
}
   d7588:	b003      	add	sp, #12
   d758a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7590 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7590:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7592:	8843      	ldrh	r3, [r0, #2]
   d7594:	2b0a      	cmp	r3, #10
   d7596:	d008      	beq.n	d75aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7598:	2b50      	cmp	r3, #80	; 0x50
   d759a:	d10b      	bne.n	d75b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d759c:	4b09      	ldr	r3, [pc, #36]	; (d75c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d759e:	681b      	ldr	r3, [r3, #0]
   d75a0:	b14b      	cbz	r3, d75b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d75a2:	b003      	add	sp, #12
   d75a4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d75a8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d75aa:	f7ff ffe5 	bl	d7578 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d75ae:	b003      	add	sp, #12
   d75b0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d75b4:	2300      	movs	r3, #0
   d75b6:	9300      	str	r3, [sp, #0]
   d75b8:	461a      	mov	r2, r3
   d75ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d75be:	f7fe faf1 	bl	d5ba4 <system_ctrl_set_result>
}
   d75c2:	e7f4      	b.n	d75ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d75c4:	2003e688 	.word	0x2003e688

000d75c8 <module_user_init_hook>:
{
   d75c8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d75ca:	4c12      	ldr	r4, [pc, #72]	; (d7614 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d75cc:	4812      	ldr	r0, [pc, #72]	; (d7618 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d75ce:	4d13      	ldr	r5, [pc, #76]	; (d761c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d75d0:	2100      	movs	r1, #0
   d75d2:	f7fe fb81 	bl	d5cd8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d75d6:	6823      	ldr	r3, [r4, #0]
   d75d8:	42ab      	cmp	r3, r5
   d75da:	4b11      	ldr	r3, [pc, #68]	; (d7620 <module_user_init_hook+0x58>)
   d75dc:	bf0c      	ite	eq
   d75de:	2201      	moveq	r2, #1
   d75e0:	2200      	movne	r2, #0
   d75e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d75e4:	d002      	beq.n	d75ec <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d75e6:	f7ff ffbb 	bl	d7560 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d75ea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d75ec:	f7fe f89c 	bl	d5728 <HAL_RNG_GetRandomNumber>
   d75f0:	4604      	mov	r4, r0
    srand(seed);
   d75f2:	f000 fcfd 	bl	d7ff0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d75f6:	4b0b      	ldr	r3, [pc, #44]	; (d7624 <module_user_init_hook+0x5c>)
   d75f8:	b113      	cbz	r3, d7600 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d75fa:	4620      	mov	r0, r4
   d75fc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7600:	2100      	movs	r1, #0
   d7602:	4808      	ldr	r0, [pc, #32]	; (d7624 <module_user_init_hook+0x5c>)
   d7604:	f7fe fb38 	bl	d5c78 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d760c:	4806      	ldr	r0, [pc, #24]	; (d7628 <module_user_init_hook+0x60>)
   d760e:	2100      	movs	r1, #0
   d7610:	f7fe babe 	b.w	d5b90 <system_ctrl_set_app_request_handler>
   d7614:	2003f400 	.word	0x2003f400
   d7618:	000d7509 	.word	0x000d7509
   d761c:	9a271c1e 	.word	0x9a271c1e
   d7620:	2003e684 	.word	0x2003e684
   d7624:	00000000 	.word	0x00000000
   d7628:	000d7591 	.word	0x000d7591

000d762c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d762c:	4770      	bx	lr

000d762e <_ZN9IPAddressD0Ev>:
   d762e:	b510      	push	{r4, lr}
   d7630:	2118      	movs	r1, #24
   d7632:	4604      	mov	r4, r0
   d7634:	f000 fb77 	bl	d7d26 <_ZdlPvj>
   d7638:	4620      	mov	r0, r4
   d763a:	bd10      	pop	{r4, pc}

000d763c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d763c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d763e:	7d03      	ldrb	r3, [r0, #20]
   d7640:	2b06      	cmp	r3, #6
{
   d7642:	b08d      	sub	sp, #52	; 0x34
   d7644:	460e      	mov	r6, r1
   d7646:	f100 0704 	add.w	r7, r0, #4
   d764a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d764e:	d012      	beq.n	d7676 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7650:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7654:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7658:	220a      	movs	r2, #10
   d765a:	4630      	mov	r0, r6
   d765c:	f7ff fea5 	bl	d73aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7660:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7662:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7664:	d019      	beq.n	d769a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7666:	2c00      	cmp	r4, #0
   d7668:	d0f4      	beq.n	d7654 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d766a:	212e      	movs	r1, #46	; 0x2e
   d766c:	4630      	mov	r0, r6
   d766e:	f7ff fe83 	bl	d7378 <_ZN5Print5printEc>
   d7672:	4404      	add	r4, r0
   d7674:	e7ee      	b.n	d7654 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7676:	232f      	movs	r3, #47	; 0x2f
   d7678:	466a      	mov	r2, sp
   d767a:	4639      	mov	r1, r7
   d767c:	200a      	movs	r0, #10
		buf[0] = 0;
   d767e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7682:	f7fe f91d 	bl	d58c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7686:	4668      	mov	r0, sp
   d7688:	f000 fce0 	bl	d804c <strlen>
   d768c:	6833      	ldr	r3, [r6, #0]
   d768e:	4602      	mov	r2, r0
   d7690:	68db      	ldr	r3, [r3, #12]
   d7692:	4669      	mov	r1, sp
   d7694:	4630      	mov	r0, r6
   d7696:	4798      	blx	r3
   d7698:	4604      	mov	r4, r0
    }
    return n;
}
   d769a:	4620      	mov	r0, r4
   d769c:	b00d      	add	sp, #52	; 0x34
   d769e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d76a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d76a0:	b510      	push	{r4, lr}
   d76a2:	4b05      	ldr	r3, [pc, #20]	; (d76b8 <_ZN9IPAddressC1Ev+0x18>)
   d76a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d76a6:	2211      	movs	r2, #17
   d76a8:	f840 3b04 	str.w	r3, [r0], #4
   d76ac:	2100      	movs	r1, #0
   d76ae:	f000 fc97 	bl	d7fe0 <memset>
}
   d76b2:	4620      	mov	r0, r4
   d76b4:	bd10      	pop	{r4, pc}
   d76b6:	bf00      	nop
   d76b8:	000d8e84 	.word	0x000d8e84

000d76bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d76bc:	4603      	mov	r3, r0
   d76be:	4a07      	ldr	r2, [pc, #28]	; (d76dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d76c0:	b510      	push	{r4, lr}
   d76c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d76c6:	f101 0210 	add.w	r2, r1, #16
   d76ca:	f851 4b04 	ldr.w	r4, [r1], #4
   d76ce:	f843 4b04 	str.w	r4, [r3], #4
   d76d2:	4291      	cmp	r1, r2
   d76d4:	d1f9      	bne.n	d76ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d76d6:	780a      	ldrb	r2, [r1, #0]
   d76d8:	701a      	strb	r2, [r3, #0]
}
   d76da:	bd10      	pop	{r4, pc}
   d76dc:	000d8e84 	.word	0x000d8e84

000d76e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d76e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d76e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d76e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d76ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d76ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d76f2:	2304      	movs	r3, #4
   d76f4:	6041      	str	r1, [r0, #4]
   d76f6:	7503      	strb	r3, [r0, #20]
}
   d76f8:	bd10      	pop	{r4, pc}
	...

000d76fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d76fc:	b513      	push	{r0, r1, r4, lr}
   d76fe:	4b05      	ldr	r3, [pc, #20]	; (d7714 <_ZN9IPAddressC1EPKh+0x18>)
   d7700:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7702:	78cb      	ldrb	r3, [r1, #3]
   d7704:	9300      	str	r3, [sp, #0]
   d7706:	788b      	ldrb	r3, [r1, #2]
   d7708:	784a      	ldrb	r2, [r1, #1]
   d770a:	7809      	ldrb	r1, [r1, #0]
   d770c:	f7ff ffe8 	bl	d76e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7710:	b002      	add	sp, #8
   d7712:	bd10      	pop	{r4, pc}
   d7714:	000d8e84 	.word	0x000d8e84

000d7718 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7718:	7441      	strb	r1, [r0, #17]
}
   d771a:	4770      	bx	lr

000d771c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d771c:	4770      	bx	lr

000d771e <_ZN9USBSerial4readEv>:
{
   d771e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7720:	2100      	movs	r1, #0
   d7722:	7c00      	ldrb	r0, [r0, #16]
   d7724:	f7fe f9c4 	bl	d5ab0 <HAL_USB_USART_Receive_Data>
}
   d7728:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d772c:	bd08      	pop	{r3, pc}

000d772e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d772e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7730:	2101      	movs	r1, #1
   d7732:	7c00      	ldrb	r0, [r0, #16]
   d7734:	f7fe f9bc 	bl	d5ab0 <HAL_USB_USART_Receive_Data>
}
   d7738:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d773c:	bd08      	pop	{r3, pc}

000d773e <_ZN9USBSerial17availableForWriteEv>:
{
   d773e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7740:	7c00      	ldrb	r0, [r0, #16]
   d7742:	f7fe f9ad 	bl	d5aa0 <HAL_USB_USART_Available_Data_For_Write>
}
   d7746:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d774a:	bd08      	pop	{r3, pc}

000d774c <_ZN9USBSerial9availableEv>:
{
   d774c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d774e:	7c00      	ldrb	r0, [r0, #16]
   d7750:	f7fe f99e 	bl	d5a90 <HAL_USB_USART_Available_Data>
}
   d7754:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7758:	bd08      	pop	{r3, pc}

000d775a <_ZN9USBSerial5writeEh>:
{
   d775a:	b513      	push	{r0, r1, r4, lr}
   d775c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d775e:	7c00      	ldrb	r0, [r0, #16]
{
   d7760:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7762:	f7fe f99d 	bl	d5aa0 <HAL_USB_USART_Available_Data_For_Write>
   d7766:	2800      	cmp	r0, #0
   d7768:	9901      	ldr	r1, [sp, #4]
   d776a:	dc01      	bgt.n	d7770 <_ZN9USBSerial5writeEh+0x16>
   d776c:	7c60      	ldrb	r0, [r4, #17]
   d776e:	b120      	cbz	r0, d777a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7770:	7c20      	ldrb	r0, [r4, #16]
   d7772:	f7fe f9a5 	bl	d5ac0 <HAL_USB_USART_Send_Data>
   d7776:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d777a:	b002      	add	sp, #8
   d777c:	bd10      	pop	{r4, pc}

000d777e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d777e:	7c00      	ldrb	r0, [r0, #16]
   d7780:	f7fe b9a6 	b.w	d5ad0 <HAL_USB_USART_Flush_Data>

000d7784 <_ZN9USBSerialD0Ev>:
   d7784:	b510      	push	{r4, lr}
   d7786:	2114      	movs	r1, #20
   d7788:	4604      	mov	r4, r0
   d778a:	f000 facc 	bl	d7d26 <_ZdlPvj>
   d778e:	4620      	mov	r0, r4
   d7790:	bd10      	pop	{r4, pc}
	...

000d7794 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7794:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d779a:	4604      	mov	r4, r0
   d779c:	4608      	mov	r0, r1
   d779e:	2100      	movs	r1, #0
   d77a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d77a4:	4b04      	ldr	r3, [pc, #16]	; (d77b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d77a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d77a8:	2301      	movs	r3, #1
  _serial = serial;
   d77aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d77ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d77ae:	4611      	mov	r1, r2
   d77b0:	f7fe f966 	bl	d5a80 <HAL_USB_USART_Init>
}
   d77b4:	4620      	mov	r0, r4
   d77b6:	bd10      	pop	{r4, pc}
   d77b8:	000d8e98 	.word	0x000d8e98

000d77bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d77bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d77be:	2214      	movs	r2, #20
{
   d77c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d77c2:	2100      	movs	r1, #0
   d77c4:	f000 fc0c 	bl	d7fe0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d77c8:	4620      	mov	r0, r4
   d77ca:	bd10      	pop	{r4, pc}

000d77cc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d77cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77ce:	4c10      	ldr	r4, [pc, #64]	; (d7810 <_Z16_fetch_usbserialv+0x44>)
{
   d77d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d77d2:	a803      	add	r0, sp, #12
   d77d4:	f7ff fff2 	bl	d77bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d77d8:	7821      	ldrb	r1, [r4, #0]
   d77da:	f3bf 8f5b 	dmb	ish
   d77de:	f011 0101 	ands.w	r1, r1, #1
   d77e2:	d111      	bne.n	d7808 <_Z16_fetch_usbserialv+0x3c>
   d77e4:	4620      	mov	r0, r4
   d77e6:	9101      	str	r1, [sp, #4]
   d77e8:	f7fc fc64 	bl	d40b4 <__cxa_guard_acquire>
   d77ec:	9901      	ldr	r1, [sp, #4]
   d77ee:	b158      	cbz	r0, d7808 <_Z16_fetch_usbserialv+0x3c>
   d77f0:	aa03      	add	r2, sp, #12
   d77f2:	4808      	ldr	r0, [pc, #32]	; (d7814 <_Z16_fetch_usbserialv+0x48>)
   d77f4:	f7ff ffce 	bl	d7794 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d77f8:	4620      	mov	r0, r4
   d77fa:	f7fc fc60 	bl	d40be <__cxa_guard_release>
   d77fe:	4a06      	ldr	r2, [pc, #24]	; (d7818 <_Z16_fetch_usbserialv+0x4c>)
   d7800:	4906      	ldr	r1, [pc, #24]	; (d781c <_Z16_fetch_usbserialv+0x50>)
   d7802:	4804      	ldr	r0, [pc, #16]	; (d7814 <_Z16_fetch_usbserialv+0x48>)
   d7804:	f000 fa8a 	bl	d7d1c <__aeabi_atexit>
	return _usbserial;
}
   d7808:	4802      	ldr	r0, [pc, #8]	; (d7814 <_Z16_fetch_usbserialv+0x48>)
   d780a:	b008      	add	sp, #32
   d780c:	bd10      	pop	{r4, pc}
   d780e:	bf00      	nop
   d7810:	2003e68c 	.word	0x2003e68c
   d7814:	2003e690 	.word	0x2003e690
   d7818:	2003e578 	.word	0x2003e578
   d781c:	000d771d 	.word	0x000d771d

000d7820 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7820:	4770      	bx	lr

000d7822 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7822:	7441      	strb	r1, [r0, #17]
}
   d7824:	4770      	bx	lr

000d7826 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7826:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7828:	7c00      	ldrb	r0, [r0, #16]
   d782a:	f7fe f889 	bl	d5940 <hal_usart_available_data_for_write>
}
   d782e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7832:	bd08      	pop	{r3, pc}

000d7834 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7834:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7836:	7c00      	ldrb	r0, [r0, #16]
   d7838:	f7fe f85a 	bl	d58f0 <hal_usart_available>
}
   d783c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7840:	bd08      	pop	{r3, pc}

000d7842 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7842:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7844:	7c00      	ldrb	r0, [r0, #16]
   d7846:	f7fe f863 	bl	d5910 <hal_usart_peek>
}
   d784a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d784e:	bd08      	pop	{r3, pc}

000d7850 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7850:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7852:	7c00      	ldrb	r0, [r0, #16]
   d7854:	f7fe f854 	bl	d5900 <hal_usart_read>
}
   d7858:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d785c:	bd08      	pop	{r3, pc}

000d785e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d785e:	7c00      	ldrb	r0, [r0, #16]
   d7860:	f7fe b85e 	b.w	d5920 <hal_usart_flush>

000d7864 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7864:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7866:	7c45      	ldrb	r5, [r0, #17]
{
   d7868:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d786a:	b12d      	cbz	r5, d7878 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d786c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d786e:	b003      	add	sp, #12
   d7870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7874:	f7fe b834 	b.w	d58e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7878:	7c00      	ldrb	r0, [r0, #16]
   d787a:	9101      	str	r1, [sp, #4]
   d787c:	f7fe f860 	bl	d5940 <hal_usart_available_data_for_write>
   d7880:	2800      	cmp	r0, #0
   d7882:	9901      	ldr	r1, [sp, #4]
   d7884:	dcf2      	bgt.n	d786c <_ZN11USARTSerial5writeEh+0x8>
}
   d7886:	4628      	mov	r0, r5
   d7888:	b003      	add	sp, #12
   d788a:	bd30      	pop	{r4, r5, pc}

000d788c <_ZN11USARTSerialD0Ev>:
   d788c:	b510      	push	{r4, lr}
   d788e:	2114      	movs	r1, #20
   d7890:	4604      	mov	r4, r0
   d7892:	f000 fa48 	bl	d7d26 <_ZdlPvj>
   d7896:	4620      	mov	r0, r4
   d7898:	bd10      	pop	{r4, pc}
	...

000d789c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d789c:	b510      	push	{r4, lr}
   d789e:	f04f 0c00 	mov.w	ip, #0
   d78a2:	4604      	mov	r4, r0
   d78a4:	4608      	mov	r0, r1
   d78a6:	4611      	mov	r1, r2
   d78a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d78ac:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d78b0:	4a04      	ldr	r2, [pc, #16]	; (d78c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d78b2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d78b4:	2201      	movs	r2, #1
  _serial = serial;
   d78b6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d78b8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d78ba:	461a      	mov	r2, r3
   d78bc:	f7fe f808 	bl	d58d0 <hal_usart_init>
}
   d78c0:	4620      	mov	r0, r4
   d78c2:	bd10      	pop	{r4, pc}
   d78c4:	000d8ec8 	.word	0x000d8ec8

000d78c8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d78c8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d78ca:	4c0e      	ldr	r4, [pc, #56]	; (d7904 <_Z22__fetch_global_Serial1v+0x3c>)
   d78cc:	7821      	ldrb	r1, [r4, #0]
   d78ce:	f3bf 8f5b 	dmb	ish
   d78d2:	f011 0101 	ands.w	r1, r1, #1
   d78d6:	d112      	bne.n	d78fe <_Z22__fetch_global_Serial1v+0x36>
   d78d8:	4620      	mov	r0, r4
   d78da:	9101      	str	r1, [sp, #4]
   d78dc:	f7fc fbea 	bl	d40b4 <__cxa_guard_acquire>
   d78e0:	9901      	ldr	r1, [sp, #4]
   d78e2:	b160      	cbz	r0, d78fe <_Z22__fetch_global_Serial1v+0x36>
   d78e4:	4a08      	ldr	r2, [pc, #32]	; (d7908 <_Z22__fetch_global_Serial1v+0x40>)
   d78e6:	4b09      	ldr	r3, [pc, #36]	; (d790c <_Z22__fetch_global_Serial1v+0x44>)
   d78e8:	4809      	ldr	r0, [pc, #36]	; (d7910 <_Z22__fetch_global_Serial1v+0x48>)
   d78ea:	f7ff ffd7 	bl	d789c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d78ee:	4620      	mov	r0, r4
   d78f0:	f7fc fbe5 	bl	d40be <__cxa_guard_release>
   d78f4:	4a07      	ldr	r2, [pc, #28]	; (d7914 <_Z22__fetch_global_Serial1v+0x4c>)
   d78f6:	4908      	ldr	r1, [pc, #32]	; (d7918 <_Z22__fetch_global_Serial1v+0x50>)
   d78f8:	4805      	ldr	r0, [pc, #20]	; (d7910 <_Z22__fetch_global_Serial1v+0x48>)
   d78fa:	f000 fa0f 	bl	d7d1c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d78fe:	4804      	ldr	r0, [pc, #16]	; (d7910 <_Z22__fetch_global_Serial1v+0x48>)
   d7900:	b002      	add	sp, #8
   d7902:	bd10      	pop	{r4, pc}
   d7904:	2003e6a4 	.word	0x2003e6a4
   d7908:	2003e6a8 	.word	0x2003e6a8
   d790c:	2003e72c 	.word	0x2003e72c
   d7910:	2003e7b0 	.word	0x2003e7b0
   d7914:	2003e578 	.word	0x2003e578
   d7918:	000d7821 	.word	0x000d7821

000d791c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d791c:	4770      	bx	lr

000d791e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d791e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7920:	4606      	mov	r6, r0
   d7922:	4615      	mov	r5, r2
   d7924:	460c      	mov	r4, r1
   d7926:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7928:	42bc      	cmp	r4, r7
   d792a:	d006      	beq.n	d793a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d792c:	6833      	ldr	r3, [r6, #0]
   d792e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7932:	689b      	ldr	r3, [r3, #8]
   d7934:	4630      	mov	r0, r6
   d7936:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7938:	e7f6      	b.n	d7928 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d793a:	4628      	mov	r0, r5
   d793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d793e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d793e:	7c00      	ldrb	r0, [r0, #16]
   d7940:	2200      	movs	r2, #0
   d7942:	f7fe b825 	b.w	d5990 <hal_i2c_write>

000d7946 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7946:	7c00      	ldrb	r0, [r0, #16]
   d7948:	2100      	movs	r1, #0
   d794a:	f7fe b829 	b.w	d59a0 <hal_i2c_available>

000d794e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d794e:	7c00      	ldrb	r0, [r0, #16]
   d7950:	2100      	movs	r1, #0
   d7952:	f7fe b82d 	b.w	d59b0 <hal_i2c_read>

000d7956 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7956:	7c00      	ldrb	r0, [r0, #16]
   d7958:	2100      	movs	r1, #0
   d795a:	f7fe b831 	b.w	d59c0 <hal_i2c_peek>

000d795e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d795e:	7c00      	ldrb	r0, [r0, #16]
   d7960:	2100      	movs	r1, #0
   d7962:	f7fe b835 	b.w	d59d0 <hal_i2c_flush>

000d7966 <_ZN7TwoWireD0Ev>:
   d7966:	b510      	push	{r4, lr}
   d7968:	2114      	movs	r1, #20
   d796a:	4604      	mov	r4, r0
   d796c:	f000 f9db 	bl	d7d26 <_ZdlPvj>
   d7970:	4620      	mov	r0, r4
   d7972:	bd10      	pop	{r4, pc}

000d7974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7974:	b510      	push	{r4, lr}
   d7976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d797a:	4604      	mov	r4, r0
   d797c:	4608      	mov	r0, r1
   d797e:	2100      	movs	r1, #0
   d7980:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7984:	4b03      	ldr	r3, [pc, #12]	; (d7994 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7986:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7988:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d798a:	4611      	mov	r1, r2
   d798c:	f7fe f830 	bl	d59f0 <hal_i2c_init>
}
   d7990:	4620      	mov	r0, r4
   d7992:	bd10      	pop	{r4, pc}
   d7994:	000d8ef8 	.word	0x000d8ef8

000d7998 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d7998:	7c00      	ldrb	r0, [r0, #16]
   d799a:	2200      	movs	r2, #0
   d799c:	f7fd bfd8 	b.w	d5950 <hal_i2c_set_speed>

000d79a0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d79a0:	2300      	movs	r3, #0
   d79a2:	7c00      	ldrb	r0, [r0, #16]
   d79a4:	461a      	mov	r2, r3
   d79a6:	4619      	mov	r1, r3
   d79a8:	f7fd bfda 	b.w	d5960 <hal_i2c_begin>

000d79ac <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d79ac:	7c00      	ldrb	r0, [r0, #16]
   d79ae:	2200      	movs	r2, #0
   d79b0:	f7fd bfde 	b.w	d5970 <hal_i2c_begin_transmission>

000d79b4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d79b4:	b2c9      	uxtb	r1, r1
   d79b6:	f7ff bff9 	b.w	d79ac <_ZN7TwoWire17beginTransmissionEh>

000d79ba <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d79ba:	7c00      	ldrb	r0, [r0, #16]
   d79bc:	2200      	movs	r2, #0
   d79be:	f7fd bfdf 	b.w	d5980 <hal_i2c_end_transmission>

000d79c2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d79c2:	2101      	movs	r1, #1
   d79c4:	f7ff bff9 	b.w	d79ba <_ZN7TwoWire15endTransmissionEh>

000d79c8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d79c8:	2200      	movs	r2, #0
   d79ca:	6840      	ldr	r0, [r0, #4]
   d79cc:	4611      	mov	r1, r2
   d79ce:	f7fe b90b 	b.w	d5be8 <network_ready>

000d79d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d79d2:	2200      	movs	r2, #0
   d79d4:	6840      	ldr	r0, [r0, #4]
   d79d6:	4611      	mov	r1, r2
   d79d8:	f7fe b926 	b.w	d5c28 <network_listening>

000d79dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d79dc:	2200      	movs	r2, #0
   d79de:	6840      	ldr	r0, [r0, #4]
   d79e0:	4611      	mov	r1, r2
   d79e2:	f7fe b931 	b.w	d5c48 <network_get_listen_timeout>

000d79e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d79e6:	6840      	ldr	r0, [r0, #4]
   d79e8:	2200      	movs	r2, #0
   d79ea:	f7fe b925 	b.w	d5c38 <network_set_listen_timeout>

000d79ee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d79ee:	6840      	ldr	r0, [r0, #4]
   d79f0:	2200      	movs	r2, #0
   d79f2:	f081 0101 	eor.w	r1, r1, #1
   d79f6:	f7fe b90f 	b.w	d5c18 <network_listen>

000d79fa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d79fa:	2300      	movs	r3, #0
   d79fc:	6840      	ldr	r0, [r0, #4]
   d79fe:	461a      	mov	r2, r3
   d7a00:	4619      	mov	r1, r3
   d7a02:	f7fe b901 	b.w	d5c08 <network_off>

000d7a06 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7a06:	2200      	movs	r2, #0
   d7a08:	6840      	ldr	r0, [r0, #4]
   d7a0a:	4611      	mov	r1, r2
   d7a0c:	f7fe b8dc 	b.w	d5bc8 <network_connecting>

000d7a10 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a10:	6840      	ldr	r0, [r0, #4]
   d7a12:	2200      	movs	r2, #0
   d7a14:	2102      	movs	r1, #2
   d7a16:	f7fe b8df 	b.w	d5bd8 <network_disconnect>

000d7a1a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7a1a:	2300      	movs	r3, #0
   d7a1c:	6840      	ldr	r0, [r0, #4]
   d7a1e:	461a      	mov	r2, r3
   d7a20:	f7fe b8ca 	b.w	d5bb8 <network_connect>

000d7a24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7a24:	4b02      	ldr	r3, [pc, #8]	; (d7a30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7a26:	2204      	movs	r2, #4
   d7a28:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7a2a:	4a02      	ldr	r2, [pc, #8]	; (d7a34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7a2c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7a2e:	4770      	bx	lr
   d7a30:	2003e7c4 	.word	0x2003e7c4
   d7a34:	000d8f20 	.word	0x000d8f20

000d7a38 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7a38:	2300      	movs	r3, #0
   d7a3a:	6840      	ldr	r0, [r0, #4]
   d7a3c:	461a      	mov	r2, r3
   d7a3e:	f7fe b8bb 	b.w	d5bb8 <network_connect>

000d7a42 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7a42:	6840      	ldr	r0, [r0, #4]
   d7a44:	2200      	movs	r2, #0
   d7a46:	2102      	movs	r1, #2
   d7a48:	f7fe b8c6 	b.w	d5bd8 <network_disconnect>

000d7a4c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7a4c:	2200      	movs	r2, #0
   d7a4e:	6840      	ldr	r0, [r0, #4]
   d7a50:	4611      	mov	r1, r2
   d7a52:	f7fe b8b9 	b.w	d5bc8 <network_connecting>

000d7a56 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7a56:	2200      	movs	r2, #0
   d7a58:	6840      	ldr	r0, [r0, #4]
   d7a5a:	4611      	mov	r1, r2
   d7a5c:	f7fe b8c4 	b.w	d5be8 <network_ready>

000d7a60 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7a60:	2300      	movs	r3, #0
   d7a62:	6840      	ldr	r0, [r0, #4]
   d7a64:	461a      	mov	r2, r3
   d7a66:	4619      	mov	r1, r3
   d7a68:	f7fe b8c6 	b.w	d5bf8 <network_on>

000d7a6c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7a6c:	2300      	movs	r3, #0
   d7a6e:	6840      	ldr	r0, [r0, #4]
   d7a70:	461a      	mov	r2, r3
   d7a72:	4619      	mov	r1, r3
   d7a74:	f7fe b8c8 	b.w	d5c08 <network_off>

000d7a78 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7a78:	6840      	ldr	r0, [r0, #4]
   d7a7a:	2100      	movs	r1, #0
   d7a7c:	f7fe b8ec 	b.w	d5c58 <network_is_on>

000d7a80 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7a80:	6840      	ldr	r0, [r0, #4]
   d7a82:	2100      	movs	r1, #0
   d7a84:	f7fe b8f0 	b.w	d5c68 <network_is_off>

000d7a88 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7a88:	6840      	ldr	r0, [r0, #4]
   d7a8a:	2200      	movs	r2, #0
   d7a8c:	f081 0101 	eor.w	r1, r1, #1
   d7a90:	f7fe b8c2 	b.w	d5c18 <network_listen>

000d7a94 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7a94:	6840      	ldr	r0, [r0, #4]
   d7a96:	2200      	movs	r2, #0
   d7a98:	f7fe b8ce 	b.w	d5c38 <network_set_listen_timeout>

000d7a9c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7a9c:	2200      	movs	r2, #0
   d7a9e:	6840      	ldr	r0, [r0, #4]
   d7aa0:	4611      	mov	r1, r2
   d7aa2:	f7fe b8d1 	b.w	d5c48 <network_get_listen_timeout>

000d7aa6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7aa6:	2200      	movs	r2, #0
   d7aa8:	6840      	ldr	r0, [r0, #4]
   d7aaa:	4611      	mov	r1, r2
   d7aac:	f7fe b8bc 	b.w	d5c28 <network_listening>

000d7ab0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7ab4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7ab6:	b095      	sub	sp, #84	; 0x54
   d7ab8:	4616      	mov	r6, r2
   d7aba:	460d      	mov	r5, r1
   d7abc:	4607      	mov	r7, r0
    IPAddress addr;
   d7abe:	f7ff fdef 	bl	d76a0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7ac2:	4621      	mov	r1, r4
   d7ac4:	2218      	movs	r2, #24
   d7ac6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7ac8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7aca:	f000 fa89 	bl	d7fe0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7ace:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7ad0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7ad4:	4621      	mov	r1, r4
   d7ad6:	466b      	mov	r3, sp
   d7ad8:	aa0c      	add	r2, sp, #48	; 0x30
   d7ada:	4630      	mov	r0, r6
   d7adc:	f7fd fdfc 	bl	d56d8 <netdb_getaddrinfo>
    if (!r) {
   d7ae0:	4604      	mov	r4, r0
   d7ae2:	2800      	cmp	r0, #0
   d7ae4:	d14c      	bne.n	d7b80 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ae6:	4602      	mov	r2, r0
   d7ae8:	2101      	movs	r1, #1
   d7aea:	6868      	ldr	r0, [r5, #4]
   d7aec:	f7fe f87c 	bl	d5be8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7af0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7af2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7af4:	4622      	mov	r2, r4
   d7af6:	6868      	ldr	r0, [r5, #4]
   d7af8:	f7fe f876 	bl	d5be8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7afc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7afe:	4681      	mov	r9, r0
        bool ok = false;
   d7b00:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b02:	2e00      	cmp	r6, #0
   d7b04:	d03c      	beq.n	d7b80 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7b06:	2900      	cmp	r1, #0
   d7b08:	d13a      	bne.n	d7b80 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7b0a:	6873      	ldr	r3, [r6, #4]
   d7b0c:	2b02      	cmp	r3, #2
   d7b0e:	d003      	beq.n	d7b18 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7b10:	2b0a      	cmp	r3, #10
   d7b12:	d011      	beq.n	d7b38 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b14:	69f6      	ldr	r6, [r6, #28]
   d7b16:	e7f4      	b.n	d7b02 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7b18:	f1b8 0f00 	cmp.w	r8, #0
   d7b1c:	d00a      	beq.n	d7b34 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7b1e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7b20:	a806      	add	r0, sp, #24
   d7b22:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7b24:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7b26:	f7ff fde9 	bl	d76fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b2c:	1d3c      	adds	r4, r7, #4
   d7b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b30:	682b      	ldr	r3, [r5, #0]
   d7b32:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7b34:	4641      	mov	r1, r8
   d7b36:	e7ed      	b.n	d7b14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7b38:	f1b9 0f00 	cmp.w	r9, #0
   d7b3c:	d101      	bne.n	d7b42 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7b3e:	4649      	mov	r1, r9
   d7b40:	e7e8      	b.n	d7b14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7b42:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7b44:	2210      	movs	r2, #16
   d7b46:	a801      	add	r0, sp, #4
   d7b48:	f000 fa4a 	bl	d7fe0 <memset>
                    a.v = 6;
   d7b4c:	2306      	movs	r3, #6
   d7b4e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b52:	ad01      	add	r5, sp, #4
   d7b54:	f104 0308 	add.w	r3, r4, #8
   d7b58:	3418      	adds	r4, #24
   d7b5a:	6818      	ldr	r0, [r3, #0]
   d7b5c:	6859      	ldr	r1, [r3, #4]
   d7b5e:	462a      	mov	r2, r5
   d7b60:	c203      	stmia	r2!, {r0, r1}
   d7b62:	3308      	adds	r3, #8
   d7b64:	42a3      	cmp	r3, r4
   d7b66:	4615      	mov	r5, r2
   d7b68:	d1f7      	bne.n	d7b5a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7b6a:	a901      	add	r1, sp, #4
   d7b6c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7b6e:	ad07      	add	r5, sp, #28
   d7b70:	f7ff fda4 	bl	d76bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b76:	1d3c      	adds	r4, r7, #4
   d7b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b7a:	682b      	ldr	r3, [r5, #0]
   d7b7c:	7023      	strb	r3, [r4, #0]
   d7b7e:	e7de      	b.n	d7b3e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7b80:	9800      	ldr	r0, [sp, #0]
   d7b82:	f7fd fda1 	bl	d56c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7b86:	4638      	mov	r0, r7
   d7b88:	b015      	add	sp, #84	; 0x54
   d7b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7b90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7b90:	4b02      	ldr	r3, [pc, #8]	; (d7b9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7b92:	4a03      	ldr	r2, [pc, #12]	; (d7ba0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7b94:	601a      	str	r2, [r3, #0]
   d7b96:	2200      	movs	r2, #0
   d7b98:	605a      	str	r2, [r3, #4]

} // spark
   d7b9a:	4770      	bx	lr
   d7b9c:	2003e7cc 	.word	0x2003e7cc
   d7ba0:	000d8f5c 	.word	0x000d8f5c

000d7ba4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7ba4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7ba6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7ba8:	d902      	bls.n	d7bb0 <pinAvailable+0xc>
    return false;
   d7baa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7bac:	b002      	add	sp, #8
   d7bae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7bb0:	f1a0 030b 	sub.w	r3, r0, #11
   d7bb4:	2b02      	cmp	r3, #2
   d7bb6:	d81a      	bhi.n	d7bee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7bb8:	4c17      	ldr	r4, [pc, #92]	; (d7c18 <pinAvailable+0x74>)
   d7bba:	7821      	ldrb	r1, [r4, #0]
   d7bbc:	f3bf 8f5b 	dmb	ish
   d7bc0:	f011 0101 	ands.w	r1, r1, #1
   d7bc4:	d10b      	bne.n	d7bde <pinAvailable+0x3a>
   d7bc6:	4620      	mov	r0, r4
   d7bc8:	9101      	str	r1, [sp, #4]
   d7bca:	f7fc fa73 	bl	d40b4 <__cxa_guard_acquire>
   d7bce:	9901      	ldr	r1, [sp, #4]
   d7bd0:	b128      	cbz	r0, d7bde <pinAvailable+0x3a>
   d7bd2:	4812      	ldr	r0, [pc, #72]	; (d7c1c <pinAvailable+0x78>)
   d7bd4:	f7fe f8cc 	bl	d5d70 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7bd8:	4620      	mov	r0, r4
   d7bda:	f7fc fa70 	bl	d40be <__cxa_guard_release>
   d7bde:	4b0f      	ldr	r3, [pc, #60]	; (d7c1c <pinAvailable+0x78>)
   d7be0:	7818      	ldrb	r0, [r3, #0]
   d7be2:	f7fd ff25 	bl	d5a30 <hal_spi_is_enabled>
   d7be6:	2800      	cmp	r0, #0
   d7be8:	d1df      	bne.n	d7baa <pinAvailable+0x6>
  return true; // 'pin' is available
   d7bea:	2001      	movs	r0, #1
   d7bec:	e7de      	b.n	d7bac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7bee:	2801      	cmp	r0, #1
   d7bf0:	d809      	bhi.n	d7c06 <pinAvailable+0x62>
   d7bf2:	f000 f86b 	bl	d7ccc <_Z19__fetch_global_Wirev>
   d7bf6:	2100      	movs	r1, #0
   d7bf8:	7c00      	ldrb	r0, [r0, #16]
   d7bfa:	f7fd fef1 	bl	d59e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7bfe:	f080 0001 	eor.w	r0, r0, #1
   d7c02:	b2c0      	uxtb	r0, r0
   d7c04:	e7d2      	b.n	d7bac <pinAvailable+0x8>
   d7c06:	3809      	subs	r0, #9
   d7c08:	2801      	cmp	r0, #1
   d7c0a:	d8ee      	bhi.n	d7bea <pinAvailable+0x46>
   d7c0c:	f7ff fe5c 	bl	d78c8 <_Z22__fetch_global_Serial1v>
   d7c10:	7c00      	ldrb	r0, [r0, #16]
   d7c12:	f7fd fe8d 	bl	d5930 <hal_usart_is_enabled>
   d7c16:	e7f2      	b.n	d7bfe <pinAvailable+0x5a>
   d7c18:	2003e638 	.word	0x2003e638
   d7c1c:	2003e63c 	.word	0x2003e63c

000d7c20 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c20:	2823      	cmp	r0, #35	; 0x23
{
   d7c22:	b538      	push	{r3, r4, r5, lr}
   d7c24:	4604      	mov	r4, r0
   d7c26:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7c28:	d80a      	bhi.n	d7c40 <pinMode+0x20>
   d7c2a:	29ff      	cmp	r1, #255	; 0xff
   d7c2c:	d008      	beq.n	d7c40 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7c2e:	f7ff ffb9 	bl	d7ba4 <pinAvailable>
   d7c32:	b128      	cbz	r0, d7c40 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7c34:	4629      	mov	r1, r5
   d7c36:	4620      	mov	r0, r4
}
   d7c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7c3c:	f7fd bd54 	b.w	d56e8 <HAL_Pin_Mode>
}
   d7c40:	bd38      	pop	{r3, r4, r5, pc}

000d7c42 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7c42:	b538      	push	{r3, r4, r5, lr}
   d7c44:	4604      	mov	r4, r0
   d7c46:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c48:	f7fd fd56 	bl	d56f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7c4c:	28ff      	cmp	r0, #255	; 0xff
   d7c4e:	d010      	beq.n	d7c72 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7c50:	2806      	cmp	r0, #6
   d7c52:	d804      	bhi.n	d7c5e <digitalWrite+0x1c>
   d7c54:	234d      	movs	r3, #77	; 0x4d
   d7c56:	fa23 f000 	lsr.w	r0, r3, r0
   d7c5a:	07c3      	lsls	r3, r0, #31
   d7c5c:	d409      	bmi.n	d7c72 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7c5e:	4620      	mov	r0, r4
   d7c60:	f7ff ffa0 	bl	d7ba4 <pinAvailable>
   d7c64:	b128      	cbz	r0, d7c72 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7c66:	4629      	mov	r1, r5
   d7c68:	4620      	mov	r0, r4
}
   d7c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7c6e:	f7fd bd4b 	b.w	d5708 <HAL_GPIO_Write>
}
   d7c72:	bd38      	pop	{r3, r4, r5, pc}

000d7c74 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7c74:	b510      	push	{r4, lr}
   d7c76:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7c78:	f7fd fd3e 	bl	d56f8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7c7c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7c7e:	b2db      	uxtb	r3, r3
   d7c80:	2b01      	cmp	r3, #1
   d7c82:	d908      	bls.n	d7c96 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7c84:	4620      	mov	r0, r4
   d7c86:	f7ff ff8d 	bl	d7ba4 <pinAvailable>
   d7c8a:	b120      	cbz	r0, d7c96 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7c8c:	4620      	mov	r0, r4
}
   d7c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7c92:	f7fd bd41 	b.w	d5718 <HAL_GPIO_Read>
}
   d7c96:	2000      	movs	r0, #0
   d7c98:	bd10      	pop	{r4, pc}
	...

000d7c9c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7c9c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7c9e:	2300      	movs	r3, #0
   d7ca0:	2520      	movs	r5, #32
   d7ca2:	8043      	strh	r3, [r0, #2]
   d7ca4:	2314      	movs	r3, #20
{
   d7ca6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7ca8:	8003      	strh	r3, [r0, #0]
   d7caa:	6085      	str	r5, [r0, #8]
   d7cac:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cae:	4906      	ldr	r1, [pc, #24]	; (d7cc8 <_Z17acquireWireBufferv+0x2c>)
   d7cb0:	4628      	mov	r0, r5
   d7cb2:	f000 f83a 	bl	d7d2a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cb6:	4904      	ldr	r1, [pc, #16]	; (d7cc8 <_Z17acquireWireBufferv+0x2c>)
	};
   d7cb8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7cba:	4628      	mov	r0, r5
   d7cbc:	f000 f835 	bl	d7d2a <_ZnajRKSt9nothrow_t>
	};
   d7cc0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7cc2:	4620      	mov	r0, r4
   d7cc4:	bd38      	pop	{r3, r4, r5, pc}
   d7cc6:	bf00      	nop
   d7cc8:	000d8f90 	.word	0x000d8f90

000d7ccc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7ccc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cce:	4d0f      	ldr	r5, [pc, #60]	; (d7d0c <_Z19__fetch_global_Wirev+0x40>)
   d7cd0:	7829      	ldrb	r1, [r5, #0]
   d7cd2:	f3bf 8f5b 	dmb	ish
   d7cd6:	f011 0401 	ands.w	r4, r1, #1
{
   d7cda:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cdc:	d113      	bne.n	d7d06 <_Z19__fetch_global_Wirev+0x3a>
   d7cde:	4628      	mov	r0, r5
   d7ce0:	f7fc f9e8 	bl	d40b4 <__cxa_guard_acquire>
   d7ce4:	b178      	cbz	r0, d7d06 <_Z19__fetch_global_Wirev+0x3a>
   d7ce6:	a801      	add	r0, sp, #4
   d7ce8:	f7ff ffd8 	bl	d7c9c <_Z17acquireWireBufferv>
   d7cec:	aa01      	add	r2, sp, #4
   d7cee:	4621      	mov	r1, r4
   d7cf0:	4807      	ldr	r0, [pc, #28]	; (d7d10 <_Z19__fetch_global_Wirev+0x44>)
   d7cf2:	f7ff fe3f 	bl	d7974 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7cf6:	4628      	mov	r0, r5
   d7cf8:	f7fc f9e1 	bl	d40be <__cxa_guard_release>
   d7cfc:	4a05      	ldr	r2, [pc, #20]	; (d7d14 <_Z19__fetch_global_Wirev+0x48>)
   d7cfe:	4906      	ldr	r1, [pc, #24]	; (d7d18 <_Z19__fetch_global_Wirev+0x4c>)
   d7d00:	4803      	ldr	r0, [pc, #12]	; (d7d10 <_Z19__fetch_global_Wirev+0x44>)
   d7d02:	f000 f80b 	bl	d7d1c <__aeabi_atexit>
	return wire;
}
   d7d06:	4802      	ldr	r0, [pc, #8]	; (d7d10 <_Z19__fetch_global_Wirev+0x44>)
   d7d08:	b007      	add	sp, #28
   d7d0a:	bd30      	pop	{r4, r5, pc}
   d7d0c:	2003e7d8 	.word	0x2003e7d8
   d7d10:	2003e7dc 	.word	0x2003e7dc
   d7d14:	2003e578 	.word	0x2003e578
   d7d18:	000d791d 	.word	0x000d791d

000d7d1c <__aeabi_atexit>:
   d7d1c:	460b      	mov	r3, r1
   d7d1e:	4601      	mov	r1, r0
   d7d20:	4618      	mov	r0, r3
   d7d22:	f000 b919 	b.w	d7f58 <__cxa_atexit>

000d7d26 <_ZdlPvj>:
   d7d26:	f7fc b9b8 	b.w	d409a <_ZdlPv>

000d7d2a <_ZnajRKSt9nothrow_t>:
   d7d2a:	f7fc b9b4 	b.w	d4096 <_Znaj>

000d7d2e <_ZSt25__throw_bad_function_callv>:
   d7d2e:	b508      	push	{r3, lr}
   d7d30:	f7fd ffca 	bl	d5cc8 <abort>

000d7d34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7d34:	4901      	ldr	r1, [pc, #4]	; (d7d3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7d36:	f000 b8f9 	b.w	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7d3a:	bf00      	nop
   d7d3c:	000d8fac 	.word	0x000d8fac

000d7d40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7d40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7d42:	2400      	movs	r4, #0
   d7d44:	2310      	movs	r3, #16
   d7d46:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7d4a:	6803      	ldr	r3, [r0, #0]
   d7d4c:	9400      	str	r4, [sp, #0]
   d7d4e:	699e      	ldr	r6, [r3, #24]
   d7d50:	f88d 4004 	strb.w	r4, [sp, #4]
   d7d54:	4615      	mov	r5, r2
   d7d56:	466b      	mov	r3, sp
   d7d58:	6812      	ldr	r2, [r2, #0]
   d7d5a:	47b0      	blx	r6
   d7d5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7d60:	f003 0306 	and.w	r3, r3, #6
   d7d64:	2b06      	cmp	r3, #6
   d7d66:	bf03      	ittte	eq
   d7d68:	9b00      	ldreq	r3, [sp, #0]
   d7d6a:	602b      	streq	r3, [r5, #0]
   d7d6c:	2001      	moveq	r0, #1
   d7d6e:	4620      	movne	r0, r4
   d7d70:	b004      	add	sp, #16
   d7d72:	bd70      	pop	{r4, r5, r6, pc}

000d7d74 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7d74:	9800      	ldr	r0, [sp, #0]
   d7d76:	4290      	cmp	r0, r2
   d7d78:	bf14      	ite	ne
   d7d7a:	2001      	movne	r0, #1
   d7d7c:	2006      	moveq	r0, #6
   d7d7e:	4770      	bx	lr

000d7d80 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7d80:	b510      	push	{r4, lr}
   d7d82:	4b03      	ldr	r3, [pc, #12]	; (d7d90 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7d84:	6003      	str	r3, [r0, #0]
   d7d86:	4604      	mov	r4, r0
   d7d88:	f000 f8cd 	bl	d7f26 <_ZNSt9type_infoD1Ev>
   d7d8c:	4620      	mov	r0, r4
   d7d8e:	bd10      	pop	{r4, pc}
   d7d90:	000d8fec 	.word	0x000d8fec

000d7d94 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7d94:	b510      	push	{r4, lr}
   d7d96:	4604      	mov	r4, r0
   d7d98:	f7ff fff2 	bl	d7d80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7d9c:	4620      	mov	r0, r4
   d7d9e:	2108      	movs	r1, #8
   d7da0:	f7ff ffc1 	bl	d7d26 <_ZdlPvj>
   d7da4:	4620      	mov	r0, r4
   d7da6:	bd10      	pop	{r4, pc}

000d7da8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7dac:	461f      	mov	r7, r3
   d7dae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7db2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7db6:	4598      	cmp	r8, r3
   d7db8:	4606      	mov	r6, r0
   d7dba:	4615      	mov	r5, r2
   d7dbc:	d107      	bne.n	d7dce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7dbe:	9907      	ldr	r1, [sp, #28]
   d7dc0:	f000 f8b4 	bl	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7dc4:	b118      	cbz	r0, d7dce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7dc6:	7165      	strb	r5, [r4, #5]
   d7dc8:	2000      	movs	r0, #0
   d7dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7dce:	4639      	mov	r1, r7
   d7dd0:	4630      	mov	r0, r6
   d7dd2:	f000 f8ab 	bl	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7dd6:	2800      	cmp	r0, #0
   d7dd8:	d0f6      	beq.n	d7dc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7dda:	2301      	movs	r3, #1
   d7ddc:	f8c4 8000 	str.w	r8, [r4]
   d7de0:	7125      	strb	r5, [r4, #4]
   d7de2:	71a3      	strb	r3, [r4, #6]
   d7de4:	e7f0      	b.n	d7dc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7de6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7de6:	b538      	push	{r3, r4, r5, lr}
   d7de8:	4615      	mov	r5, r2
   d7dea:	461c      	mov	r4, r3
   d7dec:	f000 f89e 	bl	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7df0:	b120      	cbz	r0, d7dfc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7df2:	2308      	movs	r3, #8
   d7df4:	60e3      	str	r3, [r4, #12]
   d7df6:	2306      	movs	r3, #6
   d7df8:	6025      	str	r5, [r4, #0]
   d7dfa:	7123      	strb	r3, [r4, #4]
   d7dfc:	bd38      	pop	{r3, r4, r5, pc}

000d7dfe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7e00:	4605      	mov	r5, r0
   d7e02:	460c      	mov	r4, r1
   d7e04:	9201      	str	r2, [sp, #4]
   d7e06:	461e      	mov	r6, r3
   d7e08:	f000 f890 	bl	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7e0c:	b950      	cbnz	r0, d7e24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7e0e:	2e03      	cmp	r6, #3
   d7e10:	d808      	bhi.n	d7e24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7e12:	6823      	ldr	r3, [r4, #0]
   d7e14:	9a01      	ldr	r2, [sp, #4]
   d7e16:	695b      	ldr	r3, [r3, #20]
   d7e18:	4629      	mov	r1, r5
   d7e1a:	4620      	mov	r0, r4
   d7e1c:	b002      	add	sp, #8
   d7e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7e22:	4718      	bx	r3
   d7e24:	b002      	add	sp, #8
   d7e26:	bd70      	pop	{r4, r5, r6, pc}

000d7e28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7e28:	b510      	push	{r4, lr}
   d7e2a:	4b03      	ldr	r3, [pc, #12]	; (d7e38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7e2c:	6003      	str	r3, [r0, #0]
   d7e2e:	4604      	mov	r4, r0
   d7e30:	f7ff ffa6 	bl	d7d80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7e34:	4620      	mov	r0, r4
   d7e36:	bd10      	pop	{r4, pc}
   d7e38:	000d904c 	.word	0x000d904c

000d7e3c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7e3c:	b510      	push	{r4, lr}
   d7e3e:	4604      	mov	r4, r0
   d7e40:	f7ff fff2 	bl	d7e28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7e44:	4620      	mov	r0, r4
   d7e46:	210c      	movs	r1, #12
   d7e48:	f7ff ff6d 	bl	d7d26 <_ZdlPvj>
   d7e4c:	4620      	mov	r0, r4
   d7e4e:	bd10      	pop	{r4, pc}

000d7e50 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7e52:	9f08      	ldr	r7, [sp, #32]
   d7e54:	4297      	cmp	r7, r2
   d7e56:	4605      	mov	r5, r0
   d7e58:	460e      	mov	r6, r1
   d7e5a:	4614      	mov	r4, r2
   d7e5c:	d00a      	beq.n	d7e74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7e5e:	68a8      	ldr	r0, [r5, #8]
   d7e60:	6802      	ldr	r2, [r0, #0]
   d7e62:	9708      	str	r7, [sp, #32]
   d7e64:	6a15      	ldr	r5, [r2, #32]
   d7e66:	4631      	mov	r1, r6
   d7e68:	4622      	mov	r2, r4
   d7e6a:	46ac      	mov	ip, r5
   d7e6c:	b003      	add	sp, #12
   d7e6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7e72:	4760      	bx	ip
   d7e74:	4619      	mov	r1, r3
   d7e76:	9301      	str	r3, [sp, #4]
   d7e78:	f000 f858 	bl	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7e7c:	9b01      	ldr	r3, [sp, #4]
   d7e7e:	2800      	cmp	r0, #0
   d7e80:	d0ed      	beq.n	d7e5e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7e82:	2006      	movs	r0, #6
   d7e84:	b003      	add	sp, #12
   d7e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7e88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7e88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e8c:	460d      	mov	r5, r1
   d7e8e:	4619      	mov	r1, r3
   d7e90:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7e94:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7e98:	4681      	mov	r9, r0
   d7e9a:	4617      	mov	r7, r2
   d7e9c:	4698      	mov	r8, r3
   d7e9e:	f000 f845 	bl	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7ea2:	b190      	cbz	r0, d7eca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7ea4:	2d00      	cmp	r5, #0
   d7ea6:	6034      	str	r4, [r6, #0]
   d7ea8:	7137      	strb	r7, [r6, #4]
   d7eaa:	db09      	blt.n	d7ec0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7eac:	1961      	adds	r1, r4, r5
   d7eae:	458a      	cmp	sl, r1
   d7eb0:	bf0c      	ite	eq
   d7eb2:	2106      	moveq	r1, #6
   d7eb4:	2101      	movne	r1, #1
   d7eb6:	71b1      	strb	r1, [r6, #6]
   d7eb8:	2000      	movs	r0, #0
   d7eba:	b001      	add	sp, #4
   d7ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7ec0:	3502      	adds	r5, #2
   d7ec2:	d1f9      	bne.n	d7eb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7ec4:	2301      	movs	r3, #1
   d7ec6:	71b3      	strb	r3, [r6, #6]
   d7ec8:	e7f6      	b.n	d7eb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7eca:	4554      	cmp	r4, sl
   d7ecc:	d106      	bne.n	d7edc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7ece:	4659      	mov	r1, fp
   d7ed0:	4648      	mov	r0, r9
   d7ed2:	f000 f82b 	bl	d7f2c <_ZNKSt9type_infoeqERKS_>
   d7ed6:	b108      	cbz	r0, d7edc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7ed8:	7177      	strb	r7, [r6, #5]
   d7eda:	e7ed      	b.n	d7eb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7edc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7ee0:	6803      	ldr	r3, [r0, #0]
   d7ee2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7ee6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7eea:	69dc      	ldr	r4, [r3, #28]
   d7eec:	463a      	mov	r2, r7
   d7eee:	4643      	mov	r3, r8
   d7ef0:	4629      	mov	r1, r5
   d7ef2:	46a4      	mov	ip, r4
   d7ef4:	b001      	add	sp, #4
   d7ef6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7efa:	4760      	bx	ip

000d7efc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f00:	4607      	mov	r7, r0
   d7f02:	460c      	mov	r4, r1
   d7f04:	4615      	mov	r5, r2
   d7f06:	461e      	mov	r6, r3
   d7f08:	f7ff ff6d 	bl	d7de6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7f0c:	b948      	cbnz	r0, d7f22 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7f0e:	68b8      	ldr	r0, [r7, #8]
   d7f10:	6803      	ldr	r3, [r0, #0]
   d7f12:	699f      	ldr	r7, [r3, #24]
   d7f14:	462a      	mov	r2, r5
   d7f16:	4633      	mov	r3, r6
   d7f18:	4621      	mov	r1, r4
   d7f1a:	46bc      	mov	ip, r7
   d7f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7f20:	4760      	bx	ip
   d7f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7f26 <_ZNSt9type_infoD1Ev>:
   d7f26:	4770      	bx	lr

000d7f28 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7f28:	2000      	movs	r0, #0
   d7f2a:	4770      	bx	lr

000d7f2c <_ZNKSt9type_infoeqERKS_>:
   d7f2c:	4281      	cmp	r1, r0
   d7f2e:	b508      	push	{r3, lr}
   d7f30:	d00e      	beq.n	d7f50 <_ZNKSt9type_infoeqERKS_+0x24>
   d7f32:	6840      	ldr	r0, [r0, #4]
   d7f34:	7803      	ldrb	r3, [r0, #0]
   d7f36:	2b2a      	cmp	r3, #42	; 0x2a
   d7f38:	d00c      	beq.n	d7f54 <_ZNKSt9type_infoeqERKS_+0x28>
   d7f3a:	6849      	ldr	r1, [r1, #4]
   d7f3c:	780b      	ldrb	r3, [r1, #0]
   d7f3e:	2b2a      	cmp	r3, #42	; 0x2a
   d7f40:	bf08      	it	eq
   d7f42:	3101      	addeq	r1, #1
   d7f44:	f000 f878 	bl	d8038 <strcmp>
   d7f48:	fab0 f080 	clz	r0, r0
   d7f4c:	0940      	lsrs	r0, r0, #5
   d7f4e:	bd08      	pop	{r3, pc}
   d7f50:	2001      	movs	r0, #1
   d7f52:	e7fc      	b.n	d7f4e <_ZNKSt9type_infoeqERKS_+0x22>
   d7f54:	2000      	movs	r0, #0
   d7f56:	e7fa      	b.n	d7f4e <_ZNKSt9type_infoeqERKS_+0x22>

000d7f58 <__cxa_atexit>:
   d7f58:	b510      	push	{r4, lr}
   d7f5a:	4c05      	ldr	r4, [pc, #20]	; (d7f70 <__cxa_atexit+0x18>)
   d7f5c:	4613      	mov	r3, r2
   d7f5e:	b12c      	cbz	r4, d7f6c <__cxa_atexit+0x14>
   d7f60:	460a      	mov	r2, r1
   d7f62:	4601      	mov	r1, r0
   d7f64:	2002      	movs	r0, #2
   d7f66:	f3af 8000 	nop.w
   d7f6a:	bd10      	pop	{r4, pc}
   d7f6c:	4620      	mov	r0, r4
   d7f6e:	e7fc      	b.n	d7f6a <__cxa_atexit+0x12>
   d7f70:	00000000 	.word	0x00000000

000d7f74 <memcmp>:
   d7f74:	b530      	push	{r4, r5, lr}
   d7f76:	3901      	subs	r1, #1
   d7f78:	2400      	movs	r4, #0
   d7f7a:	42a2      	cmp	r2, r4
   d7f7c:	d101      	bne.n	d7f82 <memcmp+0xe>
   d7f7e:	2000      	movs	r0, #0
   d7f80:	e005      	b.n	d7f8e <memcmp+0x1a>
   d7f82:	5d03      	ldrb	r3, [r0, r4]
   d7f84:	3401      	adds	r4, #1
   d7f86:	5d0d      	ldrb	r5, [r1, r4]
   d7f88:	42ab      	cmp	r3, r5
   d7f8a:	d0f6      	beq.n	d7f7a <memcmp+0x6>
   d7f8c:	1b58      	subs	r0, r3, r5
   d7f8e:	bd30      	pop	{r4, r5, pc}

000d7f90 <memcpy>:
   d7f90:	440a      	add	r2, r1
   d7f92:	4291      	cmp	r1, r2
   d7f94:	f100 33ff 	add.w	r3, r0, #4294967295
   d7f98:	d100      	bne.n	d7f9c <memcpy+0xc>
   d7f9a:	4770      	bx	lr
   d7f9c:	b510      	push	{r4, lr}
   d7f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7fa6:	4291      	cmp	r1, r2
   d7fa8:	d1f9      	bne.n	d7f9e <memcpy+0xe>
   d7faa:	bd10      	pop	{r4, pc}

000d7fac <memmove>:
   d7fac:	4288      	cmp	r0, r1
   d7fae:	b510      	push	{r4, lr}
   d7fb0:	eb01 0402 	add.w	r4, r1, r2
   d7fb4:	d902      	bls.n	d7fbc <memmove+0x10>
   d7fb6:	4284      	cmp	r4, r0
   d7fb8:	4623      	mov	r3, r4
   d7fba:	d807      	bhi.n	d7fcc <memmove+0x20>
   d7fbc:	1e43      	subs	r3, r0, #1
   d7fbe:	42a1      	cmp	r1, r4
   d7fc0:	d008      	beq.n	d7fd4 <memmove+0x28>
   d7fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7fca:	e7f8      	b.n	d7fbe <memmove+0x12>
   d7fcc:	4402      	add	r2, r0
   d7fce:	4601      	mov	r1, r0
   d7fd0:	428a      	cmp	r2, r1
   d7fd2:	d100      	bne.n	d7fd6 <memmove+0x2a>
   d7fd4:	bd10      	pop	{r4, pc}
   d7fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7fde:	e7f7      	b.n	d7fd0 <memmove+0x24>

000d7fe0 <memset>:
   d7fe0:	4402      	add	r2, r0
   d7fe2:	4603      	mov	r3, r0
   d7fe4:	4293      	cmp	r3, r2
   d7fe6:	d100      	bne.n	d7fea <memset+0xa>
   d7fe8:	4770      	bx	lr
   d7fea:	f803 1b01 	strb.w	r1, [r3], #1
   d7fee:	e7f9      	b.n	d7fe4 <memset+0x4>

000d7ff0 <srand>:
   d7ff0:	b538      	push	{r3, r4, r5, lr}
   d7ff2:	4b0d      	ldr	r3, [pc, #52]	; (d8028 <srand+0x38>)
   d7ff4:	681d      	ldr	r5, [r3, #0]
   d7ff6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7ff8:	4604      	mov	r4, r0
   d7ffa:	b97b      	cbnz	r3, d801c <srand+0x2c>
   d7ffc:	2018      	movs	r0, #24
   d7ffe:	f7fd fe43 	bl	d5c88 <malloc>
   d8002:	4a0a      	ldr	r2, [pc, #40]	; (d802c <srand+0x3c>)
   d8004:	4b0a      	ldr	r3, [pc, #40]	; (d8030 <srand+0x40>)
   d8006:	63a8      	str	r0, [r5, #56]	; 0x38
   d8008:	e9c0 2300 	strd	r2, r3, [r0]
   d800c:	4b09      	ldr	r3, [pc, #36]	; (d8034 <srand+0x44>)
   d800e:	6083      	str	r3, [r0, #8]
   d8010:	230b      	movs	r3, #11
   d8012:	8183      	strh	r3, [r0, #12]
   d8014:	2201      	movs	r2, #1
   d8016:	2300      	movs	r3, #0
   d8018:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d801c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d801e:	2200      	movs	r2, #0
   d8020:	611c      	str	r4, [r3, #16]
   d8022:	615a      	str	r2, [r3, #20]
   d8024:	bd38      	pop	{r3, r4, r5, pc}
   d8026:	bf00      	nop
   d8028:	2003e514 	.word	0x2003e514
   d802c:	abcd330e 	.word	0xabcd330e
   d8030:	e66d1234 	.word	0xe66d1234
   d8034:	0005deec 	.word	0x0005deec

000d8038 <strcmp>:
   d8038:	f810 2b01 	ldrb.w	r2, [r0], #1
   d803c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8040:	2a01      	cmp	r2, #1
   d8042:	bf28      	it	cs
   d8044:	429a      	cmpcs	r2, r3
   d8046:	d0f7      	beq.n	d8038 <strcmp>
   d8048:	1ad0      	subs	r0, r2, r3
   d804a:	4770      	bx	lr

000d804c <strlen>:
   d804c:	4603      	mov	r3, r0
   d804e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8052:	2a00      	cmp	r2, #0
   d8054:	d1fb      	bne.n	d804e <strlen+0x2>
   d8056:	1a18      	subs	r0, r3, r0
   d8058:	3801      	subs	r0, #1
   d805a:	4770      	bx	lr

000d805c <strncpy>:
   d805c:	b510      	push	{r4, lr}
   d805e:	3901      	subs	r1, #1
   d8060:	4603      	mov	r3, r0
   d8062:	b132      	cbz	r2, d8072 <strncpy+0x16>
   d8064:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8068:	f803 4b01 	strb.w	r4, [r3], #1
   d806c:	3a01      	subs	r2, #1
   d806e:	2c00      	cmp	r4, #0
   d8070:	d1f7      	bne.n	d8062 <strncpy+0x6>
   d8072:	441a      	add	r2, r3
   d8074:	2100      	movs	r1, #0
   d8076:	4293      	cmp	r3, r2
   d8078:	d100      	bne.n	d807c <strncpy+0x20>
   d807a:	bd10      	pop	{r4, pc}
   d807c:	f803 1b01 	strb.w	r1, [r3], #1
   d8080:	e7f9      	b.n	d8076 <strncpy+0x1a>

000d8082 <strnlen>:
   d8082:	b510      	push	{r4, lr}
   d8084:	4602      	mov	r2, r0
   d8086:	4401      	add	r1, r0
   d8088:	428a      	cmp	r2, r1
   d808a:	4613      	mov	r3, r2
   d808c:	d101      	bne.n	d8092 <strnlen+0x10>
   d808e:	1a18      	subs	r0, r3, r0
   d8090:	bd10      	pop	{r4, pc}
   d8092:	781c      	ldrb	r4, [r3, #0]
   d8094:	3201      	adds	r2, #1
   d8096:	2c00      	cmp	r4, #0
   d8098:	d1f6      	bne.n	d8088 <strnlen+0x6>
   d809a:	e7f8      	b.n	d808e <strnlen+0xc>

000d809c <dynalib_user>:
   d809c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d80ac:	0000 0000 654e 6576 2072 6f67 6e6e 2061     ....Never gonna 
   d80bc:	6967 6576 7920 756f 7520 2c70 4e20 7665     give you up, Nev
   d80cc:	7265 6720 6e6f 616e 6c20 7465 7920 756f     er gonna let you
   d80dc:	6420 776f 2e6e 2e2e 4800 6c65 6f6c 0a21      down....Hello!.
   d80ec:	3600 3445 3030 3030 2d31 3542 3341 462d     .6E400001-B5A3-F
   d80fc:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   d810c:	4343 3941 0045 4536 3034 3030 3230 422d     CCA9E.6E400002-B
   d811c:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   d812c:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   d813c:	3030 2d33 3542 3341 462d 3933 2d33 3045     003-B5A3-F393-E0
   d814c:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   d815c:	7874 7200 0078 6564 6166 6c75 2074 4d00     tx.rx.default .M
   d816c:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   d817c:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   d818c:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   d819c:	2073 4f4d 4544 7525 003e                    s MODE%u>.

000d81a6 <_ZL4font>:
   d81a6:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d81b6:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d81c6:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d81d6:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d81e6:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d81f6:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d8206:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d8216:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d8226:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d8236:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d8246:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d8256:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d8266:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d8276:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d8286:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d8296:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d82a6:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d82b6:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d82c6:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d82d6:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d82e6:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d82f6:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d8306:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8316:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8326:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8336:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8346:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8356:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8366:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8376:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d8386:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d8396:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d83a6:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d83b6:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d83c6:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d83d6:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d83e6:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d83f6:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8406:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8416:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8426:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8436:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d8446:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8456:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8466:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d8476:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d8486:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d8496:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d84a6:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d84b6:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d84c6:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d84d6:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d84e6:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d84f6:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8506:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8516:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d8526:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d8536:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d8546:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d8556:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d8566:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d8576:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d8586:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d8596:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d85a6:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d85b6:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d85c6:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d85d6:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d85e6:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d85f6:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d8606:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d8616:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d8626:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d8636:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d8646:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d8656:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d8666:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d8676:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d8686:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d8696:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d86a8 <_ZTV12Adafruit_GFX>:
	...
   d86b8:	4b05 000d 7321 000d 40a1 000d 450d 000d     .K..!s...@...E..
   d86c8:	450f 000d 4541 000d 451d 000d 452f 000d     .E..AE...E../E..
   d86d8:	4451 000d 450d 000d 4739 000d 46b3 000d     QD...E..9G...F..
   d86e8:	4559 000d 4597 000d 45d1 000d 4617 000d     YE...E...E...F..
   d86f8:	46b5 000d 4633 000d                         .F..3F..

000d8700 <_ZTV16OledWingAdafruit>:
	...
   d8708:	4c15 000d 4c35 000d 4b05 000d 7321 000d     .L..5L...K..!s..
   d8718:	4df9 000d 450d 000d 450f 000d 4541 000d     .M...E...E..AE..
   d8728:	451d 000d 452f 000d 4451 000d 450d 000d     .E../E..QD...E..
   d8738:	4739 000d 4fb3 000d 5547 000d 54f9 000d     9G...O..GU...T..
   d8748:	45d1 000d 4617 000d 46b5 000d 4633 000d     .E...F...F..3F..

000d8758 <_ZTVN8particle11SPISettingsE>:
	...
   d8760:	43fd 000d 43d1 000d 43d3 000d               .C...C...C..

000d876c <_ZL12splash1_data>:
   d876c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d877c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d878c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d879c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d87ac:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d87bc:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d87d4:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d87e4:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d87f4:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d8804:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d8814:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d8824:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d8834:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d8844:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d8854:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d8864:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d8874:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d8884:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d8894:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d88a4:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d88b4:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d88c4:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d88d4:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d88e4:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d88fc:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d8914:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d8924:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d8934:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d8944:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d8954:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d8964:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d8974:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d8984:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d8994:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d89a4:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d89b4:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d89c4:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d89d4:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d89e4:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d89f4:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d8a04:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d8a14:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d8a24:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d8a2c <_ZL12splash2_data>:
   d8a2c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d8a3c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d8a4c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d8a68:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d8a78:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d8a88:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d8a98:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d8aa8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d8ab8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d8ac8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d8ad8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d8ae8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d8af8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d8b08:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d8b18:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d8b28:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d8b38:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d8b48:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d8b58:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d8b68:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d8b78:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d8b88:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d8b98:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d8ba8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d8bc0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d8bd0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d8be0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d8bf0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d8c00:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d8c0c <_ZTV16Adafruit_SSD1306>:
	...
   d8c14:	4dcd 000d 4de5 000d 4b05 000d 7321 000d     .M...M...K..!s..
   d8c24:	4df9 000d 450d 000d 450f 000d 4541 000d     .M...E...E..AE..
   d8c34:	451d 000d 452f 000d 4451 000d 450d 000d     .E../E..QD...E..
   d8c44:	4739 000d 4fb3 000d 5547 000d 54f9 000d     9G...O..GU...T..
   d8c54:	45d1 000d 4617 000d 46b5 000d 4633 000d     .E...F...F..3F..

000d8c64 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d8c64:	8000 e0c0 f8f0 fefc                         ........

000d8c6c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d8c6c:	0100 0703 1f0f 7f3f                         ......?.

000d8c74 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d8c74:	d5ae a880                                   ....

000d8c78 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d8c78:	00d3 8d40                                   ..@.

000d8c7c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d8c7c:	0020 c8a1                                    ...

000d8c80 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d8c80:	40db a6a4 af2e                              .@....

000d8c86 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d8c86:	02da 8f81                                   ....

000d8c8a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d8c8a:	12da                                         ...

000d8c8d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d8c8d:	02da                                         ...

000d8c90 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d8c90:	0022 21ff 0000 0000                         "..!....

000d8c98 <_ZTVN5spark13EthernetClassE>:
	...
   d8ca0:	5d47 000d 5d3d 000d 5d33 000d 5d29 000d     G]..=]..3]..)]..
   d8cb0:	5d1d 000d 5d11 000d 7a79 000d 7a81 000d     .]...]..yz...z..
   d8cc0:	5d05 000d 5cfd 000d 5cf3 000d 5ce9 000d     .]...\...\...\..
   d8cd0:	7ab1 000d                                   .z..

000d8cd4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8cd4:	0800 1810 2820 3830 6977 6972 676e 622e     .... (08wiring.b
   d8ce4:	656c 5300 6174 7472 6420 7369 6f63 6576     le.Start discove
   d8cf4:	6972 676e 7320 7265 6976 6563 2e73 5000     ring services..P
   d8d04:	6565 2072 6564 6976 6563 6920 2073 696d     eer device is mi
   d8d14:	7373 6e69 2167 4600 6961 656c 2064 6f74     ssing!.Failed to
   d8d24:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   d8d34:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   d8d44:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   d8d54:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   d8d64:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   d8d74:	6420 7665 6369 2e65 4400 7075 696c 6163      device..Duplica
   d8d84:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d8d94:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d8da4:	6465 002e 6146 6c69 6465 7420 206f 7061     ed..Failed to ap
   d8db4:	6570 646e 6c20 636f 6c61 6320 6168 6172     pend local chara
   d8dc4:	7463 7265 7369 6974 2e63 0000               cteristic...

000d8dd0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8dd8:	6035 000d 6099 000d 6261 000d 60c3 000d     5`...`..ab...`..
   d8de8:	6039 000d                                   9`..

000d8dec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8df4:	6031 000d 60a7 000d 6033 000d 60c7 000d     1`...`..3`...`..
   d8e04:	6059 000d                                   Y`..

000d8e08 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8e10:	602f 000d 60b5 000d 6a15 000d 60cb 000d     /`...`...j...`..
   d8e20:	6079 000d                                   y`..

000d8e24 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8e2c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d8e3c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d8e3c:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d8e4c <_ZN8particle7BleUuid9BASE_UUIDE>:
   d8e4c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d8e5c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d8e6c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d8e7c <_ZTV9IPAddress>:
	...
   d8e84:	763d 000d 762d 000d 762f 000d               =v..-v../v..

000d8e90 <_ZTV9USBSerial>:
	...
   d8e98:	771d 000d 7785 000d 775b 000d 7321 000d     .w...w..[w..!s..
   d8ea8:	774d 000d 771f 000d 772f 000d 777f 000d     Mw...w../w...w..
   d8eb8:	773f 000d 7719 000d                         ?w...w..

000d8ec0 <_ZTV11USARTSerial>:
	...
   d8ec8:	7821 000d 788d 000d 7865 000d 7321 000d     !x...x..ex..!s..
   d8ed8:	7835 000d 7851 000d 7843 000d 785f 000d     5x..Qx..Cx.._x..
   d8ee8:	7823 000d 7827 000d                         #x..'x..

000d8ef0 <_ZTV7TwoWire>:
	...
   d8ef8:	791d 000d 7967 000d 793f 000d 791f 000d     .y..gy..?y...y..
   d8f08:	7947 000d 794f 000d 7957 000d 795f 000d     Gy..Oy..Wy.._y..

000d8f18 <_ZTVN5spark9WiFiClassE>:
	...
   d8f20:	7a1b 000d 7a11 000d 7a07 000d 79c9 000d     .z...z...z...y..
   d8f30:	7449 000d 79fb 000d 7a79 000d 7a81 000d     It...y..yz...z..
   d8f40:	79ef 000d 79e7 000d 79dd 000d 79d3 000d     .y...y...y...y..
   d8f50:	7ab1 000d                                   .z..

000d8f54 <_ZTVN5spark12NetworkClassE>:
	...
   d8f5c:	7a39 000d 7a43 000d 7a4d 000d 7a57 000d     9z..Cz..Mz..Wz..
   d8f6c:	7a61 000d 7a6d 000d 7a79 000d 7a81 000d     az..mz..yz...z..
   d8f7c:	7a89 000d 7a95 000d 7a9d 000d 7aa7 000d     .z...z...z...z..
   d8f8c:	7ab1 000d                                   .z..

000d8f90 <_ZSt7nothrow>:
	...

000d8f91 <_ZTSSt19_Sp_make_shared_tag>:
   d8f91:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d8fa1:	6572 5f64 6174 0067 0000                     red_tag....

000d8fac <_ZTISt19_Sp_make_shared_tag>:
   d8fac:	8fec 000d 8f91 000d                         ........

000d8fb4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8fb4:	904c 000d 8fc0 000d 9070 000d               L.......p...

000d8fc0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8fc0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d8fd0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d8fe0:	0045 0000                                   E...

000d8fe4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8fe4:	0000 0000 8fb4 000d 7d81 000d 7d95 000d     .........}...}..
   d8ff4:	7f29 000d 7f29 000d 7dff 000d 7d41 000d     )...)....}..A}..
   d9004:	7de7 000d 7da9 000d 7d75 000d               .}...}..u}..

000d9010 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9010:	904c 000d 901c 000d 8fb4 000d               L...........

000d901c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d901c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d902c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d903c:	666e 456f 0000 0000                         nfoE....

000d9044 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9044:	0000 0000 9010 000d 7e29 000d 7e3d 000d     ........)~..=~..
   d9054:	7f29 000d 7f29 000d 7dff 000d 7d41 000d     )...)....}..A}..
   d9064:	7efd 000d 7e89 000d 7e51 000d               .~...~..Q~..

000d9070 <_ZTISt9type_info>:
   d9070:	8fec 000d 9078 000d                         ....x...

000d9078 <_ZTSSt9type_info>:
   d9078:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d9085 <link_const_variable_data_end>:
   d9085:	00          	.byte	0x00
	...

000d9088 <link_constructors_location>:
   d9088:	000d42d5 	.word	0x000d42d5
   d908c:	000d5d51 	.word	0x000d5d51
   d9090:	000d5ee1 	.word	0x000d5ee1
   d9094:	000d72f9 	.word	0x000d72f9
   d9098:	000d7455 	.word	0x000d7455
   d909c:	000d7465 	.word	0x000d7465
   d90a0:	000d74ed 	.word	0x000d74ed
   d90a4:	000d7a25 	.word	0x000d7a25
   d90a8:	000d7b91 	.word	0x000d7b91

000d90ac <link_constructors_end>:
   d90ac:	00000000 	.word	0x00000000
